
prototipo-02-recepcao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e34  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f30  08002f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f30  08002f30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f30  08002f30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  08002f44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08002f44  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fee  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ba  00000000  00000000  00028022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  000296e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00029e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fc1  00000000  00000000  0002a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008125  00000000  00000000  00044559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7bdf  00000000  00000000  0004c67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f425d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a78  00000000  00000000  000f42b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002ed8 	.word	0x08002ed8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002ed8 	.word	0x08002ed8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b08f      	sub	sp, #60	; 0x3c
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80003f8:	200c      	movs	r0, #12
 80003fa:	183b      	adds	r3, r7, r0
 80003fc:	22b2      	movs	r2, #178	; 0xb2
 80003fe:	32ff      	adds	r2, #255	; 0xff
 8000400:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 8000402:	183b      	adds	r3, r7, r0
 8000404:	2224      	movs	r2, #36	; 0x24
 8000406:	2107      	movs	r1, #7
 8000408:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 800040a:	183b      	adds	r3, r7, r0
 800040c:	2225      	movs	r2, #37	; 0x25
 800040e:	2107      	movs	r1, #7
 8000410:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 8000412:	183b      	adds	r3, r7, r0
 8000414:	2226      	movs	r2, #38	; 0x26
 8000416:	2101      	movs	r1, #1
 8000418:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 800041a:	183b      	adds	r3, r7, r0
 800041c:	222a      	movs	r2, #42	; 0x2a
 800041e:	21ff      	movs	r1, #255	; 0xff
 8000420:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 8000422:	183b      	adds	r3, r7, r0
 8000424:	222b      	movs	r2, #43	; 0x2b
 8000426:	2164      	movs	r1, #100	; 0x64
 8000428:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 800042a:	0001      	movs	r1, r0
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2208      	movs	r2, #8
 8000430:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	187a      	adds	r2, r7, r1
 8000436:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000438:	c313      	stmia	r3!, {r0, r1, r4}
 800043a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800043c:	c313      	stmia	r3!, {r0, r1, r4}
 800043e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000440:	c313      	stmia	r3!, {r0, r1, r4}
 8000442:	ca03      	ldmia	r2!, {r0, r1}
 8000444:	c303      	stmia	r3!, {r0, r1}
}
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	46bd      	mov	sp, r7
 800044a:	b00f      	add	sp, #60	; 0x3c
 800044c:	bd90      	pop	{r4, r7, pc}

0800044e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800044e:	b5b0      	push	{r4, r5, r7, lr}
 8000450:	b084      	sub	sp, #16
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000458:	250e      	movs	r5, #14
 800045a:	197c      	adds	r4, r7, r5
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2101      	movs	r1, #1
 8000460:	0018      	movs	r0, r3
 8000462:	f000 f9e8 	bl	8000836 <LoRa_read>
 8000466:	0003      	movs	r3, r0
 8000468:	7023      	strb	r3, [r4, #0]
	data = read;
 800046a:	200f      	movs	r0, #15
 800046c:	183b      	adds	r3, r7, r0
 800046e:	0029      	movs	r1, r5
 8000470:	187a      	adds	r2, r7, r1
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d109      	bne.n	8000490 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 800047c:	183b      	adds	r3, r7, r0
 800047e:	187a      	adds	r2, r7, r1
 8000480:	7812      	ldrb	r2, [r2, #0]
 8000482:	2107      	movs	r1, #7
 8000484:	438a      	bics	r2, r1
 8000486:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
 800048e:	e04e      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d110      	bne.n	80004b8 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000496:	230e      	movs	r3, #14
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b25b      	sxtb	r3, r3
 800049e:	2207      	movs	r2, #7
 80004a0:	4393      	bics	r3, r2
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	2201      	movs	r2, #1
 80004a6:	4313      	orrs	r3, r2
 80004a8:	b25a      	sxtb	r2, r3
 80004aa:	230f      	movs	r3, #15
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	61da      	str	r2, [r3, #28]
 80004b6:	e03a      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	d110      	bne.n	80004e0 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 80004be:	230e      	movs	r3, #14
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	2207      	movs	r2, #7
 80004c8:	4393      	bics	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	2203      	movs	r2, #3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	230f      	movs	r3, #15
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2203      	movs	r2, #3
 80004dc:	61da      	str	r2, [r3, #28]
 80004de:	e026      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b05      	cmp	r3, #5
 80004e4:	d110      	bne.n	8000508 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 80004e6:	230e      	movs	r3, #14
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	2207      	movs	r2, #7
 80004f0:	4393      	bics	r3, r2
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	2205      	movs	r2, #5
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b25a      	sxtb	r2, r3
 80004fa:	230f      	movs	r3, #15
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2205      	movs	r2, #5
 8000504:	61da      	str	r2, [r3, #28]
 8000506:	e012      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b06      	cmp	r3, #6
 800050c:	d10f      	bne.n	800052e <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 800050e:	230e      	movs	r3, #14
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	2207      	movs	r2, #7
 8000518:	4393      	bics	r3, r2
 800051a:	b25b      	sxtb	r3, r3
 800051c:	2206      	movs	r2, #6
 800051e:	4313      	orrs	r3, r2
 8000520:	b25a      	sxtb	r2, r3
 8000522:	230f      	movs	r3, #15
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2206      	movs	r2, #6
 800052c:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800052e:	230f      	movs	r3, #15
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2101      	movs	r1, #1
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f99a 	bl	8000872 <LoRa_write>
	//HAL_Delay(10);
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bdb0      	pop	{r4, r5, r7, pc}

08000546 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000546:	b590      	push	{r4, r7, lr}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	889b      	ldrh	r3, [r3, #4]
 800055e:	2200      	movs	r2, #0
 8000560:	0019      	movs	r1, r3
 8000562:	f001 f831 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6998      	ldr	r0, [r3, #24]
 800056a:	23fa      	movs	r3, #250	; 0xfa
 800056c:	00dc      	lsls	r4, r3, #3
 800056e:	1dbb      	adds	r3, r7, #6
 8000570:	881a      	ldrh	r2, [r3, #0]
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	0023      	movs	r3, r4
 8000576:	f001 fe2d 	bl	80021d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fa9d 	bl	8002ac0 <HAL_SPI_GetState>
 8000586:	0003      	movs	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d1f7      	bne.n	800057c <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	6998      	ldr	r0, [r3, #24]
 8000590:	23fa      	movs	r3, #250	; 0xfa
 8000592:	00dc      	lsls	r4, r3, #3
 8000594:	2320      	movs	r3, #32
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	881a      	ldrh	r2, [r3, #0]
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	0023      	movs	r3, r4
 800059e:	f001 ff71 	bl	8002484 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fa89 	bl	8002ac0 <HAL_SPI_GetState>
 80005ae:	0003      	movs	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d1f7      	bne.n	80005a4 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	0019      	movs	r1, r3
 80005c0:	f001 f802 	bl	80015c8 <HAL_GPIO_WritePin>
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b005      	add	sp, #20
 80005ca:	bd90      	pop	{r4, r7, pc}

080005cc <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	889b      	ldrh	r3, [r3, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	0019      	movs	r1, r3
 80005e8:	f000 ffee 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6998      	ldr	r0, [r3, #24]
 80005f0:	23fa      	movs	r3, #250	; 0xfa
 80005f2:	00dc      	lsls	r4, r3, #3
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	0023      	movs	r3, r4
 80005fc:	f001 fdea 	bl	80021d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	0018      	movs	r0, r3
 8000608:	f002 fa5a 	bl	8002ac0 <HAL_SPI_GetState>
 800060c:	0003      	movs	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d1f7      	bne.n	8000602 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6998      	ldr	r0, [r3, #24]
 8000616:	23fa      	movs	r3, #250	; 0xfa
 8000618:	00dc      	lsls	r4, r3, #3
 800061a:	2320      	movs	r3, #32
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	881a      	ldrh	r2, [r3, #0]
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	0023      	movs	r3, r4
 8000624:	f001 fdd6 	bl	80021d4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	0018      	movs	r0, r3
 8000630:	f002 fa46 	bl	8002ac0 <HAL_SPI_GetState>
 8000634:	0003      	movs	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d1f7      	bne.n	800062a <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	0019      	movs	r1, r3
 8000646:	f000 ffbf 	bl	80015c8 <HAL_GPIO_WritePin>
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b005      	add	sp, #20
 8000650:	bd90      	pop	{r4, r7, pc}

08000652 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000652:	b590      	push	{r4, r7, lr}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	115b      	asrs	r3, r3, #5
 8000662:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	0c1a      	lsrs	r2, r3, #16
 8000668:	240b      	movs	r4, #11
 800066a:	193b      	adds	r3, r7, r4
 800066c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 800066e:	193b      	adds	r3, r7, r4
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2106      	movs	r1, #6
 8000676:	0018      	movs	r0, r3
 8000678:	f000 f8fb 	bl	8000872 <LoRa_write>
	HAL_Delay(5);
 800067c:	2005      	movs	r0, #5
 800067e:	f000 fd49 	bl	8001114 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	0a1a      	lsrs	r2, r3, #8
 8000686:	193b      	adds	r3, r7, r4
 8000688:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 800068a:	193b      	adds	r3, r7, r4
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2107      	movs	r1, #7
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f8ed 	bl	8000872 <LoRa_write>
	HAL_Delay(5);
 8000698:	2005      	movs	r0, #5
 800069a:	f000 fd3b 	bl	8001114 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2108      	movs	r1, #8
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f8e0 	bl	8000872 <LoRa_write>
	HAL_Delay(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f000 fd2e 	bl	8001114 <HAL_Delay>
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b005      	add	sp, #20
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2b0c      	cmp	r3, #12
 80006ce:	dd01      	ble.n	80006d4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80006d0:	230c      	movs	r3, #12
 80006d2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	dc01      	bgt.n	80006de <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80006de:	250f      	movs	r5, #15
 80006e0:	197c      	adds	r4, r7, r5
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	211e      	movs	r1, #30
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f8a5 	bl	8000836 <LoRa_read>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 80006f0:	200a      	movs	r0, #10
 80006f2:	f000 fd0f 	bl	8001114 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	197b      	adds	r3, r7, r5
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	220f      	movs	r2, #15
 8000704:	4013      	ands	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	200e      	movs	r0, #14
 800070a:	183b      	adds	r3, r7, r0
 800070c:	188a      	adds	r2, r1, r2
 800070e:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000710:	183b      	adds	r3, r7, r0
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	211e      	movs	r1, #30
 8000718:	0018      	movs	r0, r3
 800071a:	f000 f8aa 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f000 fcf8 	bl	8001114 <HAL_Delay>
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bdb0      	pop	{r4, r5, r7, pc}

0800072c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	000a      	movs	r2, r1
 8000736:	1cfb      	adds	r3, r7, #3
 8000738:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 800073a:	1cfb      	adds	r3, r7, #3
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2109      	movs	r1, #9
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f895 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fce3 	bl	8001114 <HAL_Delay>
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}

08000756 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	000a      	movs	r2, r1
 8000760:	1cfb      	adds	r3, r7, #3
 8000762:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]

	if(current<45)
 800076c:	1cfb      	adds	r3, r7, #3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b2c      	cmp	r3, #44	; 0x2c
 8000772:	d802      	bhi.n	800077a <LoRa_setOCP+0x24>
		current = 45;
 8000774:	1cfb      	adds	r3, r7, #3
 8000776:	222d      	movs	r2, #45	; 0x2d
 8000778:	701a      	strb	r2, [r3, #0]
	if(current>240)
 800077a:	1cfb      	adds	r3, r7, #3
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2bf0      	cmp	r3, #240	; 0xf0
 8000780:	d902      	bls.n	8000788 <LoRa_setOCP+0x32>
		current = 240;
 8000782:	1cfb      	adds	r3, r7, #3
 8000784:	22f0      	movs	r2, #240	; 0xf0
 8000786:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000788:	1cfb      	adds	r3, r7, #3
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b78      	cmp	r3, #120	; 0x78
 800078e:	d80c      	bhi.n	80007aa <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8000790:	1cfb      	adds	r3, r7, #3
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3b2d      	subs	r3, #45	; 0x2d
 8000796:	2105      	movs	r1, #5
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fd3d 	bl	8000218 <__divsi3>
 800079e:	0003      	movs	r3, r0
 80007a0:	001a      	movs	r2, r3
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e00f      	b.n	80007ca <LoRa_setOCP+0x74>
	else if(current <= 240)
 80007aa:	1cfb      	adds	r3, r7, #3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2bf0      	cmp	r3, #240	; 0xf0
 80007b0:	d80b      	bhi.n	80007ca <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 80007b2:	1cfb      	adds	r3, r7, #3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	331e      	adds	r3, #30
 80007b8:	210a      	movs	r1, #10
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fd2c 	bl	8000218 <__divsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	001a      	movs	r2, r3
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 80007ca:	210f      	movs	r1, #15
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	3220      	adds	r2, #32
 80007d4:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	210b      	movs	r1, #11
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f847 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 fc95 	bl	8001114 <HAL_Delay>
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80007f2:	b5b0      	push	{r4, r5, r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007fa:	250f      	movs	r5, #15
 80007fc:	197c      	adds	r4, r7, r5
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	211e      	movs	r1, #30
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f817 	bl	8000836 <LoRa_read>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 800080c:	200e      	movs	r0, #14
 800080e:	183b      	adds	r3, r7, r0
 8000810:	197a      	adds	r2, r7, r5
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	2107      	movs	r1, #7
 8000816:	430a      	orrs	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800081a:	183b      	adds	r3, r7, r0
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	211e      	movs	r1, #30
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f825 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f000 fc73 	bl	8001114 <HAL_Delay>
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bdb0      	pop	{r4, r5, r7, pc}

08000836 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b087      	sub	sp, #28
 800083a:	af02      	add	r7, sp, #8
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	000a      	movs	r2, r1
 8000840:	1cfb      	adds	r3, r7, #3
 8000842:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000844:	1cfb      	adds	r3, r7, #3
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	227f      	movs	r2, #127	; 0x7f
 800084a:	4013      	ands	r3, r2
 800084c:	b2da      	uxtb	r2, r3
 800084e:	210e      	movs	r1, #14
 8000850:	187b      	adds	r3, r7, r1
 8000852:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000854:	240f      	movs	r4, #15
 8000856:	193b      	adds	r3, r7, r4
 8000858:	1879      	adds	r1, r7, r1
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	2201      	movs	r2, #1
 800085e:	9200      	str	r2, [sp, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	f7ff fe70 	bl	8000546 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	781b      	ldrb	r3, [r3, #0]
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b005      	add	sp, #20
 8000870:	bd90      	pop	{r4, r7, pc}

08000872 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af02      	add	r7, sp, #8
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	0008      	movs	r0, r1
 800087c:	0011      	movs	r1, r2
 800087e:	1cfb      	adds	r3, r7, #3
 8000880:	1c02      	adds	r2, r0, #0
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	1cbb      	adds	r3, r7, #2
 8000886:	1c0a      	adds	r2, r1, #0
 8000888:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800088a:	1cfb      	adds	r3, r7, #3
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	4252      	negs	r2, r2
 8000892:	4313      	orrs	r3, r2
 8000894:	b2da      	uxtb	r2, r3
 8000896:	210e      	movs	r1, #14
 8000898:	187b      	adds	r3, r7, r1
 800089a:	701a      	strb	r2, [r3, #0]
	data = value;
 800089c:	200f      	movs	r0, #15
 800089e:	183b      	adds	r3, r7, r0
 80008a0:	1cba      	adds	r2, r7, #2
 80008a2:	7812      	ldrb	r2, [r2, #0]
 80008a4:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008a6:	183b      	adds	r3, r7, r0
 80008a8:	1879      	adds	r1, r7, r1
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	9200      	str	r2, [sp, #0]
 80008b0:	2201      	movs	r2, #1
 80008b2:	f7ff fe8b 	bl	80005cc <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}

080008be <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]

	return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2105      	movs	r1, #5
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff fdb6 	bl	800044e <LoRa_gotoMode>
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}

080008ea <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80008ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ec:	b089      	sub	sp, #36	; 0x24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80008f8:	231f      	movs	r3, #31
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	e007      	b.n	8000916 <LoRa_receive+0x2c>
		data[i]=0;
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	18d3      	adds	r3, r2, r3
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	3301      	adds	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf2      	blt.n	8000906 <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2101      	movs	r1, #1
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff fd92 	bl	800044e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800092a:	2513      	movs	r5, #19
 800092c:	197c      	adds	r4, r7, r5
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2112      	movs	r1, #18
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff ff7f 	bl	8000836 <LoRa_read>
 8000938:	0003      	movs	r3, r0
 800093a:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 800093c:	197b      	adds	r3, r7, r5
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2240      	movs	r2, #64	; 0x40
 8000942:	4013      	ands	r3, r2
 8000944:	d03f      	beq.n	80009c6 <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	2112      	movs	r1, #18
 800094c:	0018      	movs	r0, r3
 800094e:	f7ff ff90 	bl	8000872 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000952:	2612      	movs	r6, #18
 8000954:	19bc      	adds	r4, r7, r6
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2113      	movs	r1, #19
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff ff6b 	bl	8000836 <LoRa_read>
 8000960:	0003      	movs	r3, r0
 8000962:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000964:	197c      	adds	r4, r7, r5
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2110      	movs	r1, #16
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff ff63 	bl	8000836 <LoRa_read>
 8000970:	0003      	movs	r3, r0
 8000972:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000974:	197b      	adds	r3, r7, r5
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	210d      	movs	r1, #13
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff ff78 	bl	8000872 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000982:	231f      	movs	r3, #31
 8000984:	18fa      	adds	r2, r7, r3
 8000986:	19bb      	adds	r3, r7, r6
 8000988:	1df9      	adds	r1, r7, #7
 800098a:	780c      	ldrb	r4, [r1, #0]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2d8      	uxtb	r0, r3
 8000990:	b2e1      	uxtb	r1, r4
 8000992:	4288      	cmp	r0, r1
 8000994:	d900      	bls.n	8000998 <LoRa_receive+0xae>
 8000996:	1c23      	adds	r3, r4, #0
 8000998:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e00c      	b.n	80009ba <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	18d4      	adds	r4, r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2100      	movs	r1, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff ff43 	bl	8000836 <LoRa_read>
 80009b0:	0003      	movs	r3, r0
 80009b2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	231f      	movs	r3, #31
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbec      	blt.n	80009a0 <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2105      	movs	r1, #5
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fd3f 	bl	800044e <LoRa_gotoMode>
    return min;
 80009d0:	231f      	movs	r3, #31
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	781b      	ldrb	r3, [r3, #0]
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b009      	add	sp, #36	; 0x24
 80009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009de <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80009de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e0:	b085      	sub	sp, #20
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ff68 	bl	80008be <LoRa_isvalid>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d100      	bne.n	80009f4 <LoRa_init+0x16>
 80009f2:	e0b3      	b.n	8000b5c <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2100      	movs	r1, #0
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fd28 	bl	800044e <LoRa_gotoMode>
			HAL_Delay(10);
 80009fe:	200a      	movs	r0, #10
 8000a00:	f000 fb88 	bl	8001114 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a04:	260f      	movs	r6, #15
 8000a06:	19bc      	adds	r4, r7, r6
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ff12 	bl	8000836 <LoRa_read>
 8000a12:	0003      	movs	r3, r0
 8000a14:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8000a16:	200a      	movs	r0, #10
 8000a18:	f000 fb7c 	bl	8001114 <HAL_Delay>
			data = read | 0x80;
 8000a1c:	250e      	movs	r5, #14
 8000a1e:	197b      	adds	r3, r7, r5
 8000a20:	0034      	movs	r4, r6
 8000a22:	193a      	adds	r2, r7, r4
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	4249      	negs	r1, r1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a2e:	197b      	adds	r3, r7, r5
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2101      	movs	r1, #1
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff ff1b 	bl	8000872 <LoRa_write>
			HAL_Delay(100);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f000 fb69 	bl	8001114 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a1a      	ldr	r2, [r3, #32]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff fe01 	bl	8000652 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	222a      	movs	r2, #42	; 0x2a
 8000a54:	5c9a      	ldrb	r2, [r3, r2]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fe66 	bl	800072c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	222b      	movs	r2, #43	; 0x2b
 8000a64:	5c9a      	ldrb	r2, [r3, r2]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fe73 	bl	8000756 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2223      	movs	r2, #35	; 0x23
 8000a74:	210c      	movs	r1, #12
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fefb 	bl	8000872 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff feb7 	bl	80007f2 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2224      	movs	r2, #36	; 0x24
 8000a88:	5c9b      	ldrb	r3, [r3, r2]
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fe15 	bl	80006c0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	211f      	movs	r1, #31
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff fee8 	bl	8000872 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000aa2:	197b      	adds	r3, r7, r5
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2225      	movs	r2, #37	; 0x25
 8000aac:	5c9b      	ldrb	r3, [r3, r2]
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	b2d9      	uxtb	r1, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2226      	movs	r2, #38	; 0x26
 8000ab6:	5c9b      	ldrb	r3, [r3, r2]
 8000ab8:	18db      	adds	r3, r3, r3
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	197b      	adds	r3, r7, r5
 8000abe:	188a      	adds	r2, r1, r2
 8000ac0:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ac2:	197b      	adds	r3, r7, r5
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	211d      	movs	r1, #29
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fed1 	bl	8000872 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2120      	movs	r1, #32
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fec7 	bl	8000872 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2121      	movs	r1, #33	; 0x21
 8000aee:	0018      	movs	r0, r3
 8000af0:	f7ff febf 	bl	8000872 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000af4:	0026      	movs	r6, r4
 8000af6:	193c      	adds	r4, r7, r4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2140      	movs	r1, #64	; 0x40
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fe9a 	bl	8000836 <LoRa_read>
 8000b02:	0003      	movs	r3, r0
 8000b04:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8000b06:	197b      	adds	r3, r7, r5
 8000b08:	0034      	movs	r4, r6
 8000b0a:	193a      	adds	r2, r7, r4
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	213f      	movs	r1, #63	; 0x3f
 8000b10:	430a      	orrs	r2, r1
 8000b12:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b14:	197b      	adds	r3, r7, r5
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fea8 	bl	8000872 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2101      	movs	r1, #1
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fc91 	bl	800044e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b32:	200a      	movs	r0, #10
 8000b34:	f000 faee 	bl	8001114 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b38:	0025      	movs	r5, r4
 8000b3a:	193c      	adds	r4, r7, r4
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2142      	movs	r1, #66	; 0x42
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fe78 	bl	8000836 <LoRa_read>
 8000b46:	0003      	movs	r3, r0
 8000b48:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 8000b4a:	197b      	adds	r3, r7, r5
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b12      	cmp	r3, #18
 8000b50:	d101      	bne.n	8000b56 <LoRa_init+0x178>
				return LORA_OK;
 8000b52:	23c8      	movs	r3, #200	; 0xc8
 8000b54:	e004      	b.n	8000b60 <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 8000b56:	23ca      	movs	r3, #202	; 0xca
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	e001      	b.n	8000b60 <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b5c:	23f8      	movs	r3, #248	; 0xf8
 8000b5e:	33ff      	adds	r3, #255	; 0xff
	}
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b005      	add	sp, #20
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08d      	sub	sp, #52	; 0x34
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 fa4b 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f86d 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 f907 	bl	8000d88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b7a:	f000 f8c7 	bl	8000d0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 8000b7e:	4c2e      	ldr	r4, [pc, #184]	; (8000c38 <main+0xd0>)
 8000b80:	003b      	movs	r3, r7
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fc34 	bl	80003f0 <newLoRa>
 8000b88:	003a      	movs	r2, r7
 8000b8a:	0023      	movs	r3, r4
 8000b8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b8e:	c313      	stmia	r3!, {r0, r1, r4}
 8000b90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b92:	c313      	stmia	r3!, {r0, r1, r4}
 8000b94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b96:	c313      	stmia	r3!, {r0, r1, r4}
 8000b98:	ca03      	ldmia	r2!, {r0, r1}
 8000b9a:	c303      	stmia	r3!, {r0, r1}

    	myLoRa.hSPIx                 = &hspi1;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <main+0xd0>)
 8000b9e:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <main+0xd4>)
 8000ba0:	619a      	str	r2, [r3, #24]
    	myLoRa.CS_port               = NSS_GPIO_Port;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <main+0xd0>)
 8000ba4:	22a0      	movs	r2, #160	; 0xa0
 8000ba6:	05d2      	lsls	r2, r2, #23
 8000ba8:	601a      	str	r2, [r3, #0]
    	myLoRa.CS_pin                = NSS_Pin;
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <main+0xd0>)
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	809a      	strh	r2, [r3, #4]
    	myLoRa.reset_port            = RESET_GPIO_Port;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <main+0xd0>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <main+0xd8>)
 8000bb4:	609a      	str	r2, [r3, #8]
    	myLoRa.reset_pin             = RESET_Pin;
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <main+0xd0>)
 8000bb8:	2210      	movs	r2, #16
 8000bba:	819a      	strh	r2, [r3, #12]
    	myLoRa.DIO0_port						 = DIO0_GPIO_Port;
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <main+0xd0>)
 8000bbe:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <main+0xd8>)
 8000bc0:	611a      	str	r2, [r3, #16]
    	myLoRa.DIO0_pin							 = DIO0_Pin;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <main+0xd0>)
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	829a      	strh	r2, [r3, #20]

    	myLoRa.frequency             = 433;							  // default = 433 MHz
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <main+0xd0>)
 8000bca:	22b2      	movs	r2, #178	; 0xb2
 8000bcc:	32ff      	adds	r2, #255	; 0xff
 8000bce:	621a      	str	r2, [r3, #32]
    	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <main+0xd0>)
 8000bd2:	2224      	movs	r2, #36	; 0x24
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	5499      	strb	r1, [r3, r2]
    	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <main+0xd0>)
 8000bda:	2225      	movs	r2, #37	; 0x25
 8000bdc:	2107      	movs	r1, #7
 8000bde:	5499      	strb	r1, [r3, r2]
    	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <main+0xd0>)
 8000be2:	2226      	movs	r2, #38	; 0x26
 8000be4:	2101      	movs	r1, #1
 8000be6:	5499      	strb	r1, [r3, r2]
    	myLoRa.power					       = POWER_20db;				// default = 20db
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <main+0xd0>)
 8000bea:	222a      	movs	r2, #42	; 0x2a
 8000bec:	21ff      	movs	r1, #255	; 0xff
 8000bee:	5499      	strb	r1, [r3, r2]
    	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <main+0xd0>)
 8000bf2:	222b      	movs	r2, #43	; 0x2b
 8000bf4:	2178      	movs	r1, #120	; 0x78
 8000bf6:	5499      	strb	r1, [r3, r2]
    	myLoRa.preamble				       = 10;		  					// default = 8;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <main+0xd0>)
 8000bfa:	220a      	movs	r2, #10
 8000bfc:	851a      	strh	r2, [r3, #40]	; 0x28


    	teste=LoRa_init(&myLoRa);
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <main+0xd0>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff feec 	bl	80009de <LoRa_init>
 8000c06:	0003      	movs	r3, r0
 8000c08:	001a      	movs	r2, r3
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <main+0xdc>)
 8000c0c:	801a      	strh	r2, [r3, #0]

    	LoRa_startReceiving(&myLoRa);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <main+0xd0>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fe5d 	bl	80008d0 <LoRa_startReceiving>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  packet_size = LoRa_receive(&myLoRa, received_data, 10);
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <main+0xe0>)
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <main+0xd0>)
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fe64 	bl	80008ea <LoRa_receive>
 8000c22:	0003      	movs	r3, r0
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <main+0xe4>)
 8000c28:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(500);
 8000c2a:	23fa      	movs	r3, #250	; 0xfa
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fa70 	bl	8001114 <HAL_Delay>
		  packet_size = LoRa_receive(&myLoRa, received_data, 10);
 8000c34:	e7ef      	b.n	8000c16 <main+0xae>
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	200001a4 	.word	0x200001a4
 8000c3c:	20000140 	.word	0x20000140
 8000c40:	50000800 	.word	0x50000800
 8000c44:	200000bc 	.word	0x200000bc
 8000c48:	2000002c 	.word	0x2000002c
 8000c4c:	20000028 	.word	0x20000028

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b095      	sub	sp, #84	; 0x54
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	2414      	movs	r4, #20
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	233c      	movs	r3, #60	; 0x3c
 8000c5e:	001a      	movs	r2, r3
 8000c60:	2100      	movs	r1, #0
 8000c62:	f002 f931 	bl	8002ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f002 f92a 	bl	8002ec8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fcc3 	bl	8001604 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2202      	movs	r2, #2
 8000c82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	0052      	lsls	r2, r2, #1
 8000c8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c8c:	0021      	movs	r1, r4
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2240      	movs	r2, #64	; 0x40
 8000c98:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2208      	movs	r2, #8
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	0292      	lsls	r2, r2, #10
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	0492      	lsls	r2, r2, #18
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	0592      	lsls	r2, r2, #22
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 fcd9 	bl	8001684 <HAL_RCC_OscConfig>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000cd6:	f000 f8d9 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 f82a 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d00:	f000 f8c4 	bl	8000e8c <Error_Handler>
  }
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b015      	add	sp, #84	; 0x54
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <MX_SPI1_Init+0x78>)
 8000d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d18:	2282      	movs	r2, #130	; 0x82
 8000d1a:	0052      	lsls	r2, r2, #1
 8000d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d26:	22e0      	movs	r2, #224	; 0xe0
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d42:	2230      	movs	r2, #48	; 0x30
 8000d44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d66:	2208      	movs	r2, #8
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <MX_SPI1_Init+0x74>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 f979 	bl	8002064 <HAL_SPI_Init>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f000 f889 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000140 	.word	0x20000140
 8000d84:	40013000 	.word	0x40013000

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	240c      	movs	r4, #12
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	0018      	movs	r0, r3
 8000d94:	2314      	movs	r3, #20
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f002 f895 	bl	8002ec8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	4013      	ands	r3, r2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	2202      	movs	r2, #2
 8000de0:	4013      	ands	r3, r2
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000de6:	23a0      	movs	r3, #160	; 0xa0
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fbea 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000df4:	23a0      	movs	r3, #160	; 0xa0
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 fbe3 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_Pin|DIO0_Pin, GPIO_PIN_RESET);
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	2130      	movs	r1, #48	; 0x30
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 fbdd 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin NSS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|NSS_Pin;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	22a0      	movs	r2, #160	; 0xa0
 8000e12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2201      	movs	r2, #1
 8000e18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	193a      	adds	r2, r7, r4
 8000e28:	23a0      	movs	r3, #160	; 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fa5e 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|DIO0_Pin;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2230      	movs	r2, #48	; 0x30
 8000e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e50:	0019      	movs	r1, r3
 8000e52:	0010      	movs	r0, r2
 8000e54:	f000 fa4c 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : a_Pin */
  GPIO_InitStruct.Pin = a_Pin;
 8000e58:	0021      	movs	r1, r4
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(a_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <MX_GPIO_Init+0x100>)
 8000e70:	0019      	movs	r1, r3
 8000e72:	0010      	movs	r0, r2
 8000e74:	f000 fa3c 	bl	80012f0 <HAL_GPIO_Init>

}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b009      	add	sp, #36	; 0x24
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	50000800 	.word	0x50000800
 8000e88:	50000400 	.word	0x50000400

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0549      	lsls	r1, r1, #21
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	055b      	lsls	r3, r3, #21
 8000ecc:	4013      	ands	r3, r2
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000ed2:	23c0      	movs	r3, #192	; 0xc0
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f940 	bl	800115c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b08b      	sub	sp, #44	; 0x2c
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	2414      	movs	r4, #20
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	2314      	movs	r3, #20
 8000ef8:	001a      	movs	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	f001 ffe4 	bl	8002ec8 <memset>
  if(hspi->Instance==SPI1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d130      	bne.n	8000f6c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	0149      	lsls	r1, r1, #5
 8000f14:	430a      	orrs	r2, r1
 8000f16:	641a      	str	r2, [r3, #64]	; 0x40
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	015b      	lsls	r3, r3, #5
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8000f3e:	0021      	movs	r1, r4
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2246      	movs	r2, #70	; 0x46
 8000f44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2202      	movs	r2, #2
 8000f4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	187a      	adds	r2, r7, r1
 8000f60:	23a0      	movs	r3, #160	; 0xa0
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f9c2 	bl	80012f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b00b      	add	sp, #44	; 0x2c
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40021000 	.word	0x40021000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f89c 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff fff7 	bl	8000faa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fe2:	f001 ff4d 	bl	8002e80 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fe6:	f7ff fdbf 	bl	8000b68 <main>

08000fea <LoopForever>:

LoopForever:
  b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   r0, =_estack
 8000fec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff8:	08002f38 	.word	0x08002f38
  ldr r2, =_sbss
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001000:	200001d4 	.word	0x200001d4

08001004 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_COMP_IRQHandler>
	...

08001008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x3c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Init+0x3c>)
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	0049      	lsls	r1, r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	2003      	movs	r0, #3
 8001024:	f000 f810 	bl	8001048 <HAL_InitTick>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d003      	beq.n	8001034 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800102c:	1dfb      	adds	r3, r7, #7
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e001      	b.n	8001038 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff ff30 	bl	8000e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	781b      	ldrb	r3, [r3, #0]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_InitTick+0x88>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d02b      	beq.n	80010b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_InitTick+0x8c>)
 8001062:	681c      	ldr	r4, [r3, #0]
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_InitTick+0x88>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	0019      	movs	r1, r3
 800106a:	23fa      	movs	r3, #250	; 0xfa
 800106c:	0098      	lsls	r0, r3, #2
 800106e:	f7ff f849 	bl	8000104 <__udivsi3>
 8001072:	0003      	movs	r3, r0
 8001074:	0019      	movs	r1, r3
 8001076:	0020      	movs	r0, r4
 8001078:	f7ff f844 	bl	8000104 <__udivsi3>
 800107c:	0003      	movs	r3, r0
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f929 	bl	80012d6 <HAL_SYSTICK_Config>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d112      	bne.n	80010ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d80a      	bhi.n	80010a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	2301      	movs	r3, #1
 8001092:	425b      	negs	r3, r3
 8001094:	2200      	movs	r2, #0
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f908 	bl	80012ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_InitTick+0x90>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e00d      	b.n	80010c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010a4:	230f      	movs	r3, #15
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e008      	b.n	80010c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	230f      	movs	r3, #15
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e003      	b.n	80010c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010c0:	230f      	movs	r3, #15
 80010c2:	18fb      	adds	r3, r7, r3
 80010c4:	781b      	ldrb	r3, [r3, #0]
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b005      	add	sp, #20
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	001a      	movs	r2, r3
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x20>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	18d2      	adds	r2, r2, r3
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_IncTick+0x20>)
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200001d0 	.word	0x200001d0

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b02      	ldr	r3, [pc, #8]	; (8001110 <HAL_GetTick+0x10>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	200001d0 	.word	0x200001d0

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff fff0 	bl	8001100 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	001a      	movs	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	189b      	adds	r3, r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	f7ff ffe0 	bl	8001100 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800116a:	4013      	ands	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40010000 	.word	0x40010000
 8001184:	fffff9ff 	.word	0xfffff9ff

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b7f      	cmp	r3, #127	; 0x7f
 800119c:	d828      	bhi.n	80011f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	33c0      	adds	r3, #192	; 0xc0
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	589b      	ldr	r3, [r3, r2]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	33c0      	adds	r3, #192	; 0xc0
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ee:	e031      	b.n	8001254 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <__NVIC_SetPriority+0xd8>)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0019      	movs	r1, r3
 80011f8:	230f      	movs	r3, #15
 80011fa:	400b      	ands	r3, r1
 80011fc:	3b08      	subs	r3, #8
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3306      	adds	r3, #6
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	3304      	adds	r3, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1dfa      	adds	r2, r7, #7
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	2203      	movs	r2, #3
 8001212:	400a      	ands	r2, r1
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	401a      	ands	r2, r3
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4003      	ands	r3, r0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <__NVIC_SetPriority+0xd8>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	001c      	movs	r4, r3
 8001240:	230f      	movs	r3, #15
 8001242:	4023      	ands	r3, r4
 8001244:	3b08      	subs	r3, #8
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	430a      	orrs	r2, r1
 800124a:	3306      	adds	r3, #6
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	18c3      	adds	r3, r0, r3
 8001250:	3304      	adds	r3, #4
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b003      	add	sp, #12
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	045b      	lsls	r3, r3, #17
 8001274:	429a      	cmp	r2, r3
 8001276:	d301      	bcc.n	800127c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001278:	2301      	movs	r3, #1
 800127a:	e010      	b.n	800129e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <SysTick_Config+0x44>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	3a01      	subs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001284:	2301      	movs	r3, #1
 8001286:	425b      	negs	r3, r3
 8001288:	2103      	movs	r1, #3
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff ff7c 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x44>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x44>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	210f      	movs	r1, #15
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ffbf 	bl	8001264 <SysTick_Config>
 80012e6:	0003      	movs	r3, r0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fe:	e14d      	b.n	800159c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d100      	bne.n	8001318 <HAL_GPIO_Init+0x28>
 8001316:	e13e      	b.n	8001596 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
 8001320:	2b01      	cmp	r3, #1
 8001322:	d005      	beq.n	8001330 <HAL_GPIO_Init+0x40>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	4013      	ands	r3, r2
 800132c:	2b02      	cmp	r3, #2
 800132e:	d130      	bne.n	8001392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001366:	2201      	movs	r2, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	43da      	mvns	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	2201      	movs	r2, #1
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	4013      	ands	r3, r2
 800139a:	2b03      	cmp	r3, #3
 800139c:	d017      	beq.n	80013ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	58d3      	ldr	r3, [r2, r3]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2207      	movs	r2, #7
 80013ec:	4013      	ands	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2107      	movs	r1, #7
 8001406:	400b      	ands	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	6939      	ldr	r1, [r7, #16]
 8001420:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	401a      	ands	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	4013      	ands	r3, r2
 8001460:	d100      	bne.n	8001464 <HAL_GPIO_Init+0x174>
 8001462:	e098      	b.n	8001596 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001464:	4a53      	ldr	r2, [pc, #332]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3318      	adds	r3, #24
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	589b      	ldr	r3, [r3, r2]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2203      	movs	r2, #3
 8001476:	4013      	ands	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	220f      	movs	r2, #15
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	23a0      	movs	r3, #160	; 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	429a      	cmp	r2, r3
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x1d6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a48      	ldr	r2, [pc, #288]	; (80015b8 <HAL_GPIO_Init+0x2c8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x1d2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a47      	ldr	r2, [pc, #284]	; (80015bc <HAL_GPIO_Init+0x2cc>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x1ce>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a46      	ldr	r2, [pc, #280]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x1ca>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x1c6>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x1d8>
 80014b6:	2305      	movs	r3, #5
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x1d8>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x1d8>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x1d8>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x1d8>
 80014c6:	2300      	movs	r3, #0
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	2103      	movs	r1, #3
 80014cc:	400a      	ands	r2, r1
 80014ce:	00d2      	lsls	r2, r2, #3
 80014d0:	4093      	lsls	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014d8:	4936      	ldr	r1, [pc, #216]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3318      	adds	r3, #24
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014e6:	4a33      	ldr	r2, [pc, #204]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	58d3      	ldr	r3, [r2, r3]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43da      	mvns	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	025b      	lsls	r3, r3, #9
 8001500:	4013      	ands	r3, r2
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800150c:	4929      	ldr	r1, [pc, #164]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 8001516:	2384      	movs	r3, #132	; 0x84
 8001518:	58d3      	ldr	r3, [r2, r3]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	029b      	lsls	r3, r3, #10
 800152e:	4013      	ands	r3, r2
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800153a:	491e      	ldr	r1, [pc, #120]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 800153c:	2284      	movs	r2, #132	; 0x84
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43da      	mvns	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	035b      	lsls	r3, r3, #13
 800155a:	4013      	ands	r3, r2
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	039b      	lsls	r3, r3, #14
 8001584:	4013      	ands	r3, r2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	40da      	lsrs	r2, r3
 80015a4:	1e13      	subs	r3, r2, #0
 80015a6:	d000      	beq.n	80015aa <HAL_GPIO_Init+0x2ba>
 80015a8:	e6aa      	b.n	8001300 <HAL_GPIO_Init+0x10>
  }
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b006      	add	sp, #24
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021800 	.word	0x40021800
 80015b8:	50000400 	.word	0x50000400
 80015bc:	50000800 	.word	0x50000800
 80015c0:	50000c00 	.word	0x50000c00
 80015c4:	50001000 	.word	0x50001000

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	0008      	movs	r0, r1
 80015d2:	0011      	movs	r1, r2
 80015d4:	1cbb      	adds	r3, r7, #2
 80015d6:	1c02      	adds	r2, r0, #0
 80015d8:	801a      	strh	r2, [r3, #0]
 80015da:	1c7b      	adds	r3, r7, #1
 80015dc:	1c0a      	adds	r2, r1, #0
 80015de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e0:	1c7b      	adds	r3, r7, #1
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015e8:	1cbb      	adds	r3, r7, #2
 80015ea:	881a      	ldrh	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f0:	e003      	b.n	80015fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f2:	1cbb      	adds	r3, r7, #2
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001612:	4013      	ands	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d11f      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	0013      	movs	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	189b      	adds	r3, r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4912      	ldr	r1, [pc, #72]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001636:	0018      	movs	r0, r3
 8001638:	f7fe fd64 	bl	8000104 <__udivsi3>
 800163c:	0003      	movs	r3, r0
 800163e:	3301      	adds	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001642:	e008      	b.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3b01      	subs	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e001      	b.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e009      	b.n	800166a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	401a      	ands	r2, r3
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	429a      	cmp	r2, r3
 8001666:	d0ed      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b004      	add	sp, #16
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40007000 	.word	0x40007000
 8001678:	fffff9ff 	.word	0xfffff9ff
 800167c:	20000000 	.word	0x20000000
 8001680:	000f4240 	.word	0x000f4240

08001684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f000 fb56 	bl	8001d44 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d100      	bne.n	80016a4 <HAL_RCC_OscConfig+0x20>
 80016a2:	e07d      	b.n	80017a0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a4:	4bc3      	ldr	r3, [pc, #780]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2238      	movs	r2, #56	; 0x38
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ae:	4bc1      	ldr	r3, [pc, #772]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d102      	bne.n	80016c4 <HAL_RCC_OscConfig+0x40>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d002      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4bba      	ldr	r3, [pc, #744]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d063      	beq.n	800179e <HAL_RCC_OscConfig+0x11a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d15f      	bne.n	800179e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	f000 fb30 	bl	8001d44 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	025b      	lsls	r3, r3, #9
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x7c>
 80016f0:	4bb0      	ldr	r3, [pc, #704]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4baf      	ldr	r3, [pc, #700]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0249      	lsls	r1, r1, #9
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e020      	b.n	8001742 <HAL_RCC_OscConfig+0xbe>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	23a0      	movs	r3, #160	; 0xa0
 8001706:	02db      	lsls	r3, r3, #11
 8001708:	429a      	cmp	r2, r3
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0xa6>
 800170c:	4ba9      	ldr	r3, [pc, #676]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4ba8      	ldr	r3, [pc, #672]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	02c9      	lsls	r1, r1, #11
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	4ba6      	ldr	r3, [pc, #664]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4ba5      	ldr	r3, [pc, #660]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0249      	lsls	r1, r1, #9
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0xbe>
 800172a:	4ba2      	ldr	r3, [pc, #648]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4ba1      	ldr	r3, [pc, #644]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001730:	49a1      	ldr	r1, [pc, #644]	; (80019b8 <HAL_RCC_OscConfig+0x334>)
 8001732:	400a      	ands	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	4b9f      	ldr	r3, [pc, #636]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b9e      	ldr	r3, [pc, #632]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800173c:	499f      	ldr	r1, [pc, #636]	; (80019bc <HAL_RCC_OscConfig+0x338>)
 800173e:	400a      	ands	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d014      	beq.n	8001774 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fcd9 	bl	8001100 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fcd4 	bl	8001100 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e2ee      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	4b93      	ldr	r3, [pc, #588]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	029b      	lsls	r3, r3, #10
 800176e:	4013      	ands	r3, r2
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xd0>
 8001772:	e015      	b.n	80017a0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fcc4 	bl	8001100 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177e:	f7ff fcbf 	bl	8001100 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	; 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e2d9      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001790:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0xfa>
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d100      	bne.n	80017ac <HAL_RCC_OscConfig+0x128>
 80017aa:	e099      	b.n	80018e0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ac:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2238      	movs	r2, #56	; 0x38
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b6:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2203      	movs	r2, #3
 80017bc:	4013      	ands	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d102      	bne.n	80017cc <HAL_RCC_OscConfig+0x148>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d002      	beq.n	80017d2 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d135      	bne.n	800183e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d2:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4013      	ands	r3, r2
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x166>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e2ac      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a74      	ldr	r2, [pc, #464]	; (80019c0 <HAL_RCC_OscConfig+0x33c>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	021a      	lsls	r2, r3, #8
 80017fa:	4b6e      	ldr	r3, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d112      	bne.n	800182c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6e      	ldr	r2, [pc, #440]	; (80019c4 <HAL_RCC_OscConfig+0x340>)
 800180c:	4013      	ands	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800181a:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0adb      	lsrs	r3, r3, #11
 8001820:	2207      	movs	r2, #7
 8001822:	4013      	ands	r3, r2
 8001824:	4a68      	ldr	r2, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x344>)
 8001826:	40da      	lsrs	r2, r3
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x348>)
 800182a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x34c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fc09 	bl	8001048 <HAL_InitTick>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d051      	beq.n	80018de <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e282      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d030      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5e      	ldr	r2, [pc, #376]	; (80019c4 <HAL_RCC_OscConfig+0x340>)
 800184c:	4013      	ands	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b55      	ldr	r3, [pc, #340]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	0049      	lsls	r1, r1, #1
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fc4a 	bl	8001100 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fc45 	bl	8001100 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e25f      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4013      	ands	r3, r2
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a4a      	ldr	r2, [pc, #296]	; (80019c0 <HAL_RCC_OscConfig+0x33c>)
 8001896:	4013      	ands	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	021a      	lsls	r2, r3, #8
 80018a0:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	e01b      	b.n	80018e0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018a8:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80018ae:	4949      	ldr	r1, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x350>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc24 	bl	8001100 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff fc1f 	bl	8001100 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e239      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4013      	ands	r3, r2
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x23a>
 80018dc:	e000      	b.n	80018e0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2208      	movs	r2, #8
 80018e6:	4013      	ands	r3, r2
 80018e8:	d047      	beq.n	800197a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2238      	movs	r2, #56	; 0x38
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	d10a      	bne.n	800190c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	2202      	movs	r2, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	d03c      	beq.n	800197a <HAL_RCC_OscConfig+0x2f6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d138      	bne.n	800197a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e21b      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d019      	beq.n	8001948 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001916:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800191a:	2101      	movs	r1, #1
 800191c:	430a      	orrs	r2, r1
 800191e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fbee 	bl	8001100 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fbe9 	bl	8001100 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e203      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800193e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d0f1      	beq.n	800192a <HAL_RCC_OscConfig+0x2a6>
 8001946:	e018      	b.n	800197a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800194a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800194e:	2101      	movs	r1, #1
 8001950:	438a      	bics	r2, r1
 8001952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fbd4 	bl	8001100 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fbcf 	bl	8001100 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1e9      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d1f1      	bne.n	800195e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2204      	movs	r2, #4
 8001980:	4013      	ands	r3, r2
 8001982:	d100      	bne.n	8001986 <HAL_RCC_OscConfig+0x302>
 8001984:	e0c6      	b.n	8001b14 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	231f      	movs	r3, #31
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2238      	movs	r2, #56	; 0x38
 8001994:	4013      	ands	r3, r2
 8001996:	2b20      	cmp	r3, #32
 8001998:	d11e      	bne.n	80019d8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x322>
 80019a4:	e0b6      	b.n	8001b14 <HAL_RCC_OscConfig+0x490>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d000      	beq.n	80019b0 <HAL_RCC_OscConfig+0x32c>
 80019ae:	e0b1      	b.n	8001b14 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e1c7      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
 80019b4:	40021000 	.word	0x40021000
 80019b8:	fffeffff 	.word	0xfffeffff
 80019bc:	fffbffff 	.word	0xfffbffff
 80019c0:	ffff80ff 	.word	0xffff80ff
 80019c4:	ffffc7ff 	.word	0xffffc7ff
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004
 80019d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019d8:	4bb8      	ldr	r3, [pc, #736]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 80019da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	055b      	lsls	r3, r3, #21
 80019e0:	4013      	ands	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x364>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x366>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d011      	beq.n	8001a12 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4bb3      	ldr	r3, [pc, #716]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 80019f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f2:	4bb2      	ldr	r3, [pc, #712]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0549      	lsls	r1, r1, #21
 80019f8:	430a      	orrs	r2, r1
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80019fc:	4baf      	ldr	r3, [pc, #700]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 80019fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a0a:	231f      	movs	r3, #31
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4bab      	ldr	r3, [pc, #684]	; (8001cc0 <HAL_RCC_OscConfig+0x63c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d11a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1e:	4ba8      	ldr	r3, [pc, #672]	; (8001cc0 <HAL_RCC_OscConfig+0x63c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4ba7      	ldr	r3, [pc, #668]	; (8001cc0 <HAL_RCC_OscConfig+0x63c>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0049      	lsls	r1, r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb68 	bl	8001100 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff fb63 	bl	8001100 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e17d      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a48:	4b9d      	ldr	r3, [pc, #628]	; (8001cc0 <HAL_RCC_OscConfig+0x63c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3e6>
 8001a5c:	4b97      	ldr	r3, [pc, #604]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a60:	4b96      	ldr	r3, [pc, #600]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a68:	e01c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x420>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x408>
 8001a72:	4b92      	ldr	r3, [pc, #584]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a76:	4b91      	ldr	r3, [pc, #580]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a78:	2104      	movs	r1, #4
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a7e:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a82:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x420>
 8001a8c:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a90:	4b8a      	ldr	r3, [pc, #552]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a98:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9c:	4b87      	ldr	r3, [pc, #540]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fb28 	bl	8001100 <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fb23 	bl	8001100 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a80      	ldr	r2, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x640>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e13c      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aca:	4b7c      	ldr	r3, [pc, #496]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x432>
 8001ad4:	e013      	b.n	8001afe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fb13 	bl	8001100 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ade:	e009      	b.n	8001af4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fb0e 	bl	8001100 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	4a76      	ldr	r2, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x640>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e127      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	4b71      	ldr	r3, [pc, #452]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001afe:	231f      	movs	r3, #31
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b0c:	4b6b      	ldr	r3, [pc, #428]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b0e:	496e      	ldr	r1, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x644>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d039      	beq.n	8001b92 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	03c9      	lsls	r1, r1, #15
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fae4 	bl	8001100 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b3e:	f7ff fadf 	bl	8001100 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0f9      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b50:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4ba>
 8001b5c:	e019      	b.n	8001b92 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b5e:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b64:	4959      	ldr	r1, [pc, #356]	; (8001ccc <HAL_RCC_OscConfig+0x648>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fac9 	bl	8001100 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b74:	f7ff fac4 	bl	8001100 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0de      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b86:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <HAL_RCC_OscConfig+0x518>
 8001b9a:	e0d2      	b.n	8001d42 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2238      	movs	r2, #56	; 0x38
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_OscConfig+0x526>
 8001ba8:	e081      	b.n	8001cae <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d156      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001bb8:	4945      	ldr	r1, [pc, #276]	; (8001cd0 <HAL_RCC_OscConfig+0x64c>)
 8001bba:	400a      	ands	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fa9f 	bl	8001100 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff fa9a 	bl	8001100 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e0b4      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	049b      	lsls	r3, r3, #18
 8001be2:	4013      	ands	r3, r2
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <HAL_RCC_OscConfig+0x650>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	431a      	orrs	r2, r3
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0449      	lsls	r1, r1, #17
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	0549      	lsls	r1, r1, #21
 8001c32:	430a      	orrs	r2, r1
 8001c34:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff fa63 	bl	8001100 <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff fa5e 	bl	8001100 <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e078      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	049b      	lsls	r3, r3, #18
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x5bc>
 8001c5e:	e070      	b.n	8001d42 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c66:	491a      	ldr	r1, [pc, #104]	; (8001cd0 <HAL_RCC_OscConfig+0x64c>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c72:	2103      	movs	r1, #3
 8001c74:	438a      	bics	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001c7e:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <HAL_RCC_OscConfig+0x654>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fa3c 	bl	8001100 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff fa37 	bl	8001100 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e051      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_OscConfig+0x638>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	049b      	lsls	r3, r3, #18
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x60a>
 8001cac:	e049      	b.n	8001d42 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d112      	bne.n	8001cdc <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e044      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	efffffff 	.word	0xefffffff
 8001ccc:	ffbfffff 	.word	0xffbfffff
 8001cd0:	feffffff 	.word	0xfeffffff
 8001cd4:	11c1808c 	.word	0x11c1808c
 8001cd8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x6c8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d126      	bne.n	8001d3e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2270      	movs	r2, #112	; 0x70
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d11f      	bne.n	8001d3e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	23fe      	movs	r3, #254	; 0xfe
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	401a      	ands	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d116      	bne.n	8001d3e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	23f8      	movs	r3, #248	; 0xf8
 8001d14:	039b      	lsls	r3, r3, #14
 8001d16:	401a      	ands	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10e      	bne.n	8001d3e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	23e0      	movs	r3, #224	; 0xe0
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	0f5b      	lsrs	r3, r3, #29
 8001d34:	075a      	lsls	r2, r3, #29
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b008      	add	sp, #32
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0e9      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d91e      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b73      	ldr	r3, [pc, #460]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2207      	movs	r2, #7
 8001d78:	4393      	bics	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d84:	f7ff f9bc 	bl	8001100 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7ff f9b7 	bl	8001100 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4a6a      	ldr	r2, [pc, #424]	; (8001f44 <HAL_RCC_ClockConfig+0x1f4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0ca      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001da2:	4b67      	ldr	r3, [pc, #412]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2207      	movs	r2, #7
 8001da8:	4013      	ands	r3, r2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1ee      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d006      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dc4:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	21e0      	movs	r1, #224	; 0xe0
 8001dcc:	01c9      	lsls	r1, r1, #7
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_RCC_ClockConfig+0x1fc>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d057      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df8:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	029b      	lsls	r3, r3, #10
 8001e00:	4013      	ands	r3, r2
 8001e02:	d12b      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e097      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	049b      	lsls	r3, r3, #18
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d11f      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e08b      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e28:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	d113      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e07f      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e40:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d108      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e074      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2202      	movs	r2, #2
 8001e54:	4013      	ands	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e06d      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2207      	movs	r2, #7
 8001e62:	4393      	bics	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e70:	f7ff f946 	bl	8001100 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e78:	e009      	b.n	8001e8e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7a:	f7ff f941 	bl	8001100 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <HAL_RCC_ClockConfig+0x1f4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e054      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2238      	movs	r2, #56	; 0x38
 8001e94:	401a      	ands	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1ec      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d21e      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ec0:	f7ff f91e 	bl	8001100 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ec8:	e009      	b.n	8001ede <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eca:	f7ff f919 	bl	8001100 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <HAL_RCC_ClockConfig+0x1f4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e02c      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1ee      	bne.n	8001eca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <HAL_RCC_ClockConfig+0x200>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f0a:	f000 f829 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f0e:	0001      	movs	r1, r0
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	220f      	movs	r2, #15
 8001f18:	401a      	ands	r2, r3
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_RCC_ClockConfig+0x204>)
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	58d3      	ldr	r3, [r2, r3]
 8001f20:	221f      	movs	r2, #31
 8001f22:	4013      	ands	r3, r2
 8001f24:	000a      	movs	r2, r1
 8001f26:	40da      	lsrs	r2, r3
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x208>)
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x20c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff f889 	bl	8001048 <HAL_InitTick>
 8001f36:	0003      	movs	r3, r0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40022000 	.word	0x40022000
 8001f44:	00001388 	.word	0x00001388
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	fffff0ff 	.word	0xfffff0ff
 8001f50:	ffff8fff 	.word	0xffff8fff
 8001f54:	08002ef0 	.word	0x08002ef0
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2238      	movs	r2, #56	; 0x38
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d10f      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0adb      	lsrs	r3, r3, #11
 8001f76:	2207      	movs	r2, #7
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	0013      	movs	r3, r2
 8001f80:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f82:	6839      	ldr	r1, [r7, #0]
 8001f84:	4835      	ldr	r0, [pc, #212]	; (800205c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f86:	f7fe f8bd 	bl	8000104 <__udivsi3>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e05d      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2238      	movs	r2, #56	; 0x38
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d102      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e054      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2238      	movs	r2, #56	; 0x38
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d138      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	4824      	ldr	r0, [pc, #144]	; (8002060 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fd0:	f7fe f898 	bl	8000104 <__udivsi3>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	227f      	movs	r2, #127	; 0x7f
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	434b      	muls	r3, r1
 8001fe4:	617b      	str	r3, [r7, #20]
        break;
 8001fe6:	e00d      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	481c      	ldr	r0, [pc, #112]	; (800205c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fec:	f7fe f88a 	bl	8000104 <__udivsi3>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	227f      	movs	r2, #127	; 0x7f
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	434b      	muls	r3, r1
 8002000:	617b      	str	r3, [r7, #20]
        break;
 8002002:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0f5b      	lsrs	r3, r3, #29
 800200a:	2207      	movs	r2, #7
 800200c:	4013      	ands	r3, r2
 800200e:	3301      	adds	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	6978      	ldr	r0, [r7, #20]
 8002016:	f7fe f875 	bl	8000104 <__udivsi3>
 800201a:	0003      	movs	r3, r0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e015      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2238      	movs	r2, #56	; 0x38
 8002026:	4013      	ands	r3, r2
 8002028:	2b20      	cmp	r3, #32
 800202a:	d103      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	e00b      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2238      	movs	r2, #56	; 0x38
 800203a:	4013      	ands	r3, r2
 800203c:	2b18      	cmp	r3, #24
 800203e:	d103      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002040:	23fa      	movs	r3, #250	; 0xfa
 8002042:	01db      	lsls	r3, r3, #7
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e001      	b.n	800204c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800204c:	693b      	ldr	r3, [r7, #16]
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b006      	add	sp, #24
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	40021000 	.word	0x40021000
 800205c:	00f42400 	.word	0x00f42400
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0a8      	b.n	80021c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	2382      	movs	r3, #130	; 0x82
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	429a      	cmp	r2, r3
 8002088:	d009      	beq.n	800209e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
 8002090:	e005      	b.n	800209e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	225d      	movs	r2, #93	; 0x5d
 80020a8:	5c9b      	ldrb	r3, [r3, r2]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	225c      	movs	r2, #92	; 0x5c
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7fe ff14 	bl	8000ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	225d      	movs	r2, #93	; 0x5d
 80020c4:	2102      	movs	r1, #2
 80020c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2140      	movs	r1, #64	; 0x40
 80020d4:	438a      	bics	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	23e0      	movs	r3, #224	; 0xe0
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d902      	bls.n	80020ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e002      	b.n	80020f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	23f0      	movs	r3, #240	; 0xf0
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d008      	beq.n	800210e <HAL_SPI_Init+0xaa>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	23e0      	movs	r3, #224	; 0xe0
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	429a      	cmp	r2, r3
 8002106:	d002      	beq.n	800210e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	2382      	movs	r3, #130	; 0x82
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	401a      	ands	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6899      	ldr	r1, [r3, #8]
 800211c:	2384      	movs	r3, #132	; 0x84
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	400b      	ands	r3, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2102      	movs	r1, #2
 800212a:	400b      	ands	r3, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2101      	movs	r1, #1
 8002134:	400b      	ands	r3, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6999      	ldr	r1, [r3, #24]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	400b      	ands	r3, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2138      	movs	r1, #56	; 0x38
 800214a:	400b      	ands	r3, r1
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	400b      	ands	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	0011      	movs	r1, r2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	2204      	movs	r2, #4
 8002174:	401a      	ands	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	2110      	movs	r1, #16
 800217c:	400b      	ands	r3, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	2108      	movs	r1, #8
 8002186:	400b      	ands	r3, r1
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68d9      	ldr	r1, [r3, #12]
 800218e:	23f0      	movs	r3, #240	; 0xf0
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	400b      	ands	r3, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	0011      	movs	r1, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4907      	ldr	r1, [pc, #28]	; (80021d0 <HAL_SPI_Init+0x16c>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	225d      	movs	r2, #93	; 0x5d
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b004      	add	sp, #16
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	fffff7ff 	.word	0xfffff7ff

080021d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	1dbb      	adds	r3, r7, #6
 80021e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021e4:	231f      	movs	r3, #31
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	225c      	movs	r2, #92	; 0x5c
 80021f0:	5c9b      	ldrb	r3, [r3, r2]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_SPI_Transmit+0x26>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e140      	b.n	800247c <HAL_SPI_Transmit+0x2a8>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	225c      	movs	r2, #92	; 0x5c
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002202:	f7fe ff7d 	bl	8001100 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800220a:	2316      	movs	r3, #22
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	1dba      	adds	r2, r7, #6
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	225d      	movs	r2, #93	; 0x5d
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d004      	beq.n	800222a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002220:	231f      	movs	r3, #31
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2202      	movs	r2, #2
 8002226:	701a      	strb	r2, [r3, #0]
    goto error;
 8002228:	e11d      	b.n	8002466 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_SPI_Transmit+0x64>
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d104      	bne.n	8002242 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002238:	231f      	movs	r3, #31
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002240:	e111      	b.n	8002466 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	225d      	movs	r2, #93	; 0x5d
 8002246:	2103      	movs	r1, #3
 8002248:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1dba      	adds	r2, r7, #6
 800225a:	8812      	ldrh	r2, [r2, #0]
 800225c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1dba      	adds	r2, r7, #6
 8002262:	8812      	ldrh	r2, [r2, #0]
 8002264:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2244      	movs	r2, #68	; 0x44
 8002270:	2100      	movs	r1, #0
 8002272:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2246      	movs	r2, #70	; 0x46
 8002278:	2100      	movs	r1, #0
 800227a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	429a      	cmp	r2, r3
 8002292:	d110      	bne.n	80022b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	438a      	bics	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	01c9      	lsls	r1, r1, #7
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	4013      	ands	r3, r2
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d007      	beq.n	80022d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	23e0      	movs	r3, #224	; 0xe0
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	429a      	cmp	r2, r3
 80022de:	d94e      	bls.n	800237e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_SPI_Transmit+0x11e>
 80022e8:	2316      	movs	r3, #22
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d13f      	bne.n	8002372 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	881a      	ldrh	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	1c9a      	adds	r2, r3, #2
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002316:	e02c      	b.n	8002372 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d112      	bne.n	800234c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	1c9a      	adds	r2, r3, #2
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	87da      	strh	r2, [r3, #62]	; 0x3e
 800234a:	e012      	b.n	8002372 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800234c:	f7fe fed8 	bl	8001100 <HAL_GetTick>
 8002350:	0002      	movs	r2, r0
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d802      	bhi.n	8002362 <HAL_SPI_Transmit+0x18e>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_SPI_Transmit+0x194>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002368:	231f      	movs	r3, #31
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2203      	movs	r2, #3
 800236e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002370:	e079      	b.n	8002466 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1cd      	bne.n	8002318 <HAL_SPI_Transmit+0x144>
 800237c:	e04f      	b.n	800241e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <HAL_SPI_Transmit+0x1bc>
 8002386:	2316      	movs	r3, #22
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d141      	bne.n	8002414 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	330c      	adds	r3, #12
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80023b6:	e02d      	b.n	8002414 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2202      	movs	r2, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d113      	bne.n	80023ee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023ec:	e012      	b.n	8002414 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ee:	f7fe fe87 	bl	8001100 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d802      	bhi.n	8002404 <HAL_SPI_Transmit+0x230>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_SPI_Transmit+0x236>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800240a:	231f      	movs	r3, #31
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2203      	movs	r2, #3
 8002410:	701a      	strb	r2, [r3, #0]
          goto error;
 8002412:	e028      	b.n	8002466 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1cc      	bne.n	80023b8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fce5 	bl	8002df4 <SPI_EndRxTxTransaction>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d002      	beq.n	8002434 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800245a:	231f      	movs	r3, #31
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e000      	b.n	8002466 <HAL_SPI_Transmit+0x292>
  }

error:
 8002464:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	225d      	movs	r2, #93	; 0x5d
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	225c      	movs	r2, #92	; 0x5c
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002476:	231f      	movs	r3, #31
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	781b      	ldrb	r3, [r3, #0]
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b008      	add	sp, #32
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	1dbb      	adds	r3, r7, #6
 8002492:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002494:	2317      	movs	r3, #23
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	2382      	movs	r3, #130	; 0x82
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d113      	bne.n	80024d0 <HAL_SPI_Receive+0x4c>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	225d      	movs	r2, #93	; 0x5d
 80024b4:	2104      	movs	r1, #4
 80024b6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024b8:	1dbb      	adds	r3, r7, #6
 80024ba:	881c      	ldrh	r4, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	0023      	movs	r3, r4
 80024c8:	f000 f928 	bl	800271c <HAL_SPI_TransmitReceive>
 80024cc:	0003      	movs	r3, r0
 80024ce:	e11c      	b.n	800270a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	225c      	movs	r2, #92	; 0x5c
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_SPI_Receive+0x5a>
 80024da:	2302      	movs	r3, #2
 80024dc:	e115      	b.n	800270a <HAL_SPI_Receive+0x286>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	225c      	movs	r2, #92	; 0x5c
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e6:	f7fe fe0b 	bl	8001100 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	225d      	movs	r2, #93	; 0x5d
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d004      	beq.n	8002504 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80024fa:	2317      	movs	r3, #23
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
    goto error;
 8002502:	e0f7      	b.n	80026f4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_SPI_Receive+0x8e>
 800250a:	1dbb      	adds	r3, r7, #6
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002512:	2317      	movs	r3, #23
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
    goto error;
 800251a:	e0eb      	b.n	80026f4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	225d      	movs	r2, #93	; 0x5d
 8002520:	2104      	movs	r1, #4
 8002522:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1dba      	adds	r2, r7, #6
 8002534:	2144      	movs	r1, #68	; 0x44
 8002536:	8812      	ldrh	r2, [r2, #0]
 8002538:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1dba      	adds	r2, r7, #6
 800253e:	2146      	movs	r1, #70	; 0x46
 8002540:	8812      	ldrh	r2, [r2, #0]
 8002542:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	23e0      	movs	r3, #224	; 0xe0
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	429a      	cmp	r2, r3
 800256c:	d908      	bls.n	8002580 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4966      	ldr	r1, [pc, #408]	; (8002714 <HAL_SPI_Receive+0x290>)
 800257a:	400a      	ands	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e008      	b.n	8002592 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	0149      	lsls	r1, r1, #5
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	429a      	cmp	r2, r3
 800259c:	d10f      	bne.n	80025be <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	438a      	bics	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4957      	ldr	r1, [pc, #348]	; (8002718 <HAL_SPI_Receive+0x294>)
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d007      	beq.n	80025dc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2140      	movs	r1, #64	; 0x40
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	23e0      	movs	r3, #224	; 0xe0
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d900      	bls.n	80025ea <HAL_SPI_Receive+0x166>
 80025e8:	e069      	b.n	80026be <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025ea:	e031      	b.n	8002650 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d117      	bne.n	800262a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	330c      	adds	r3, #12
 8002600:	001a      	movs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	7812      	ldrb	r2, [r2, #0]
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2246      	movs	r2, #70	; 0x46
 800261a:	5a9b      	ldrh	r3, [r3, r2]
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b299      	uxth	r1, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2246      	movs	r2, #70	; 0x46
 8002626:	5299      	strh	r1, [r3, r2]
 8002628:	e012      	b.n	8002650 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262a:	f7fe fd69 	bl	8001100 <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d802      	bhi.n	8002640 <HAL_SPI_Receive+0x1bc>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	d102      	bne.n	8002646 <HAL_SPI_Receive+0x1c2>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002646:	2317      	movs	r3, #23
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2203      	movs	r2, #3
 800264c:	701a      	strb	r2, [r3, #0]
          goto error;
 800264e:	e051      	b.n	80026f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2246      	movs	r2, #70	; 0x46
 8002654:	5a9b      	ldrh	r3, [r3, r2]
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1c7      	bne.n	80025ec <HAL_SPI_Receive+0x168>
 800265c:	e035      	b.n	80026ca <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	2b01      	cmp	r3, #1
 800266a:	d115      	bne.n	8002698 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	b292      	uxth	r2, r2
 8002678:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	1c9a      	adds	r2, r3, #2
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2246      	movs	r2, #70	; 0x46
 8002688:	5a9b      	ldrh	r3, [r3, r2]
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b299      	uxth	r1, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2246      	movs	r2, #70	; 0x46
 8002694:	5299      	strh	r1, [r3, r2]
 8002696:	e012      	b.n	80026be <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002698:	f7fe fd32 	bl	8001100 <HAL_GetTick>
 800269c:	0002      	movs	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d802      	bhi.n	80026ae <HAL_SPI_Receive+0x22a>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_SPI_Receive+0x230>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80026b4:	2317      	movs	r3, #23
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2203      	movs	r2, #3
 80026ba:	701a      	strb	r2, [r3, #0]
          goto error;
 80026bc:	e01a      	b.n	80026f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2246      	movs	r2, #70	; 0x46
 80026c2:	5a9b      	ldrh	r3, [r3, r2]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1c9      	bne.n	800265e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fb31 	bl	8002d38 <SPI_EndRxTransaction>
 80026d6:	1e03      	subs	r3, r0, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80026e8:	2317      	movs	r3, #23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e000      	b.n	80026f4 <HAL_SPI_Receive+0x270>
  }

error :
 80026f2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	225d      	movs	r2, #93	; 0x5d
 80026f8:	2101      	movs	r1, #1
 80026fa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	225c      	movs	r2, #92	; 0x5c
 8002700:	2100      	movs	r1, #0
 8002702:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002704:	2317      	movs	r3, #23
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b007      	add	sp, #28
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	ffffefff 	.word	0xffffefff
 8002718:	ffffbfff 	.word	0xffffbfff

0800271c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	001a      	movs	r2, r3
 800272a:	1cbb      	adds	r3, r7, #2
 800272c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800272e:	2301      	movs	r3, #1
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002732:	2323      	movs	r3, #35	; 0x23
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	225c      	movs	r2, #92	; 0x5c
 800273e:	5c9b      	ldrb	r3, [r3, r2]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x2c>
 8002744:	2302      	movs	r3, #2
 8002746:	e1b5      	b.n	8002ab4 <HAL_SPI_TransmitReceive+0x398>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	225c      	movs	r2, #92	; 0x5c
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002750:	f7fe fcd6 	bl	8001100 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002758:	201b      	movs	r0, #27
 800275a:	183b      	adds	r3, r7, r0
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	215d      	movs	r1, #93	; 0x5d
 8002760:	5c52      	ldrb	r2, [r2, r1]
 8002762:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800276a:	2312      	movs	r3, #18
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	1cba      	adds	r2, r7, #2
 8002770:	8812      	ldrh	r2, [r2, #0]
 8002772:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002774:	183b      	adds	r3, r7, r0
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d011      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x84>
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	2382      	movs	r3, #130	; 0x82
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	429a      	cmp	r2, r3
 8002784:	d107      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x7a>
 800278e:	183b      	adds	r3, r7, r0
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d004      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002796:	2323      	movs	r3, #35	; 0x23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
    goto error;
 800279e:	e17e      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x98>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x98>
 80027ac:	1cbb      	adds	r3, r7, #2
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80027b4:	2323      	movs	r3, #35	; 0x23
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80027bc:	e16f      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	225d      	movs	r2, #93	; 0x5d
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d003      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	225d      	movs	r2, #93	; 0x5d
 80027ce:	2105      	movs	r1, #5
 80027d0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1cba      	adds	r2, r7, #2
 80027e2:	2146      	movs	r1, #70	; 0x46
 80027e4:	8812      	ldrh	r2, [r2, #0]
 80027e6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1cba      	adds	r2, r7, #2
 80027ec:	2144      	movs	r1, #68	; 0x44
 80027ee:	8812      	ldrh	r2, [r2, #0]
 80027f0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1cba      	adds	r2, r7, #2
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1cba      	adds	r2, r7, #2
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	23e0      	movs	r3, #224	; 0xe0
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	429a      	cmp	r2, r3
 800281e:	d908      	bls.n	8002832 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	49a4      	ldr	r1, [pc, #656]	; (8002abc <HAL_SPI_TransmitReceive+0x3a0>)
 800282c:	400a      	ands	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	e008      	b.n	8002844 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0149      	lsls	r1, r1, #5
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	4013      	ands	r3, r2
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d007      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2140      	movs	r1, #64	; 0x40
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	23e0      	movs	r3, #224	; 0xe0
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	429a      	cmp	r2, r3
 800286c:	d800      	bhi.n	8002870 <HAL_SPI_TransmitReceive+0x154>
 800286e:	e07f      	b.n	8002970 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x168>
 8002878:	2312      	movs	r3, #18
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d000      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x168>
 8002882:	e069      	b.n	8002958 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a8:	e056      	b.n	8002958 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d11b      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x1d4>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x1d4>
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d113      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	1c9a      	adds	r2, r3, #2
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d11c      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x21c>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2246      	movs	r2, #70	; 0x46
 8002902:	5a9b      	ldrh	r3, [r3, r2]
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	b292      	uxth	r2, r2
 8002916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	1c9a      	adds	r2, r3, #2
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2246      	movs	r2, #70	; 0x46
 8002926:	5a9b      	ldrh	r3, [r3, r2]
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b299      	uxth	r1, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2246      	movs	r2, #70	; 0x46
 8002932:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002934:	2301      	movs	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002938:	f7fe fbe2 	bl	8001100 <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002944:	429a      	cmp	r2, r3
 8002946:	d807      	bhi.n	8002958 <HAL_SPI_TransmitReceive+0x23c>
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	3301      	adds	r3, #1
 800294c:	d004      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800294e:	2323      	movs	r3, #35	; 0x23
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2203      	movs	r2, #3
 8002954:	701a      	strb	r2, [r3, #0]
        goto error;
 8002956:	e0a2      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1a3      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x18e>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2246      	movs	r2, #70	; 0x46
 8002966:	5a9b      	ldrh	r3, [r3, r2]
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d19d      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x18e>
 800296e:	e085      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x268>
 8002978:	2312      	movs	r3, #18
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d000      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x268>
 8002982:	e070      	b.n	8002a66 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029aa:	e05c      	b.n	8002a66 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2202      	movs	r2, #2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d11c      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x2d8>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d017      	beq.n	80029f4 <HAL_SPI_TransmitReceive+0x2d8>
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d114      	bne.n	80029f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d11e      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x324>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2246      	movs	r2, #70	; 0x46
 8002a06:	5a9b      	ldrh	r3, [r3, r2]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	001a      	movs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2246      	movs	r2, #70	; 0x46
 8002a2e:	5a9b      	ldrh	r3, [r3, r2]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b299      	uxth	r1, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2246      	movs	r2, #70	; 0x46
 8002a3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a40:	f7fe fb5e 	bl	8001100 <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d802      	bhi.n	8002a56 <HAL_SPI_TransmitReceive+0x33a>
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	3301      	adds	r3, #1
 8002a54:	d102      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x340>
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002a5c:	2323      	movs	r3, #35	; 0x23
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	2203      	movs	r2, #3
 8002a62:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a64:	e01b      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d19d      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x290>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2246      	movs	r2, #70	; 0x46
 8002a74:	5a9b      	ldrh	r3, [r3, r2]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d197      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f9b6 	bl	8002df4 <SPI_EndRxTxTransaction>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002a8c:	2323      	movs	r3, #35	; 0x23
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	661a      	str	r2, [r3, #96]	; 0x60
 8002a9a:	e000      	b.n	8002a9e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002a9c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	225d      	movs	r2, #93	; 0x5d
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	225c      	movs	r2, #92	; 0x5c
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002aae:	2323      	movs	r3, #35	; 0x23
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b00a      	add	sp, #40	; 0x28
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	ffffefff 	.word	0xffffefff

08002ac0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	225d      	movs	r2, #93	; 0x5d
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ae8:	f7fe fb0a 	bl	8001100 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	18d3      	adds	r3, r2, r3
 8002af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002af8:	f7fe fb02 	bl	8001100 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b00:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	015b      	lsls	r3, r3, #5
 8002b06:	0d1b      	lsrs	r3, r3, #20
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	4353      	muls	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b0e:	e058      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	d055      	beq.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b16:	f7fe faf3 	bl	8001100 <HAL_GetTick>
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d902      	bls.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d142      	bne.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	21e0      	movs	r1, #224	; 0xe0
 8002b38:	438a      	bics	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	2382      	movs	r3, #130	; 0x82
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d113      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d005      	beq.n	8002b60 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d107      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2140      	movs	r1, #64	; 0x40
 8002b6c:	438a      	bics	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	019b      	lsls	r3, r3, #6
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d110      	bne.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	491a      	ldr	r1, [pc, #104]	; (8002bf0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0189      	lsls	r1, r1, #6
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	225d      	movs	r2, #93	; 0x5d
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	225c      	movs	r2, #92	; 0x5c
 8002baa:	2100      	movs	r1, #0
 8002bac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e017      	b.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	425a      	negs	r2, r3
 8002bd2:	4153      	adcs	r3, r2
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	1dfb      	adds	r3, r7, #7
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d197      	bne.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b008      	add	sp, #32
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	ffffdfff 	.word	0xffffdfff

08002bf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c02:	2317      	movs	r3, #23
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c0a:	f7fe fa79 	bl	8001100 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002c1a:	f7fe fa71 	bl	8001100 <HAL_GetTick>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	0013      	movs	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	00da      	lsls	r2, r3, #3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	0d1b      	lsrs	r3, r3, #20
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	4353      	muls	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c40:	e068      	b.n	8002d14 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d10a      	bne.n	8002c62 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	2117      	movs	r1, #23
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3301      	adds	r3, #1
 8002c66:	d055      	beq.n	8002d14 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c68:	f7fe fa4a 	bl	8001100 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d902      	bls.n	8002c7e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d142      	bne.n	8002d04 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	21e0      	movs	r1, #224	; 0xe0
 8002c8a:	438a      	bics	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	2382      	movs	r3, #130	; 0x82
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d113      	bne.n	8002cc2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d005      	beq.n	8002cb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d107      	bne.n	8002cc2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	438a      	bics	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d110      	bne.n	8002cf0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4916      	ldr	r1, [pc, #88]	; (8002d34 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002cda:	400a      	ands	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0189      	lsls	r1, r1, #6
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	225d      	movs	r2, #93	; 0x5d
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	225c      	movs	r2, #92	; 0x5c
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e010      	b.n	8002d26 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d18e      	bne.n	8002c42 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b00a      	add	sp, #40	; 0x28
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	20000000 	.word	0x20000000
 8002d34:	ffffdfff 	.word	0xffffdfff

08002d38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	2382      	movs	r3, #130	; 0x82
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d113      	bne.n	8002d78 <SPI_EndRxTransaction+0x40>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d005      	beq.n	8002d68 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	438a      	bics	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	0013      	movs	r3, r2
 8002d82:	2200      	movs	r2, #0
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	f7ff fea7 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d007      	beq.n	8002d9e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	2220      	movs	r2, #32
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e026      	b.n	8002dec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	2382      	movs	r3, #130	; 0x82
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d11f      	bne.n	8002dea <SPI_EndRxTransaction+0xb2>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d005      	beq.n	8002dc2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d113      	bne.n	8002dea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	23c0      	movs	r3, #192	; 0xc0
 8002dc6:	00d9      	lsls	r1, r3, #3
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	0013      	movs	r3, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f7ff ff0f 	bl	8002bf4 <SPI_WaitFifoStateUntilTimeout>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d007      	beq.n	8002dea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	2220      	movs	r2, #32
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e000      	b.n	8002dec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b004      	add	sp, #16
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	23c0      	movs	r3, #192	; 0xc0
 8002e04:	0159      	lsls	r1, r3, #5
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	0013      	movs	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f7ff fef0 	bl	8002bf4 <SPI_WaitFifoStateUntilTimeout>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d007      	beq.n	8002e28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e027      	b.n	8002e78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	0013      	movs	r3, r2
 8002e32:	2200      	movs	r2, #0
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	f7ff fe4f 	bl	8002ad8 <SPI_WaitFlagStateUntilTimeout>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d007      	beq.n	8002e4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	2220      	movs	r2, #32
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e014      	b.n	8002e78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	23c0      	movs	r3, #192	; 0xc0
 8002e52:	00d9      	lsls	r1, r3, #3
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f7ff fec9 	bl	8002bf4 <SPI_WaitFifoStateUntilTimeout>
 8002e62:	1e03      	subs	r3, r0, #0
 8002e64:	d007      	beq.n	8002e76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e000      	b.n	8002e78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b004      	add	sp, #16
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	2600      	movs	r6, #0
 8002e84:	4d0c      	ldr	r5, [pc, #48]	; (8002eb8 <__libc_init_array+0x38>)
 8002e86:	4c0d      	ldr	r4, [pc, #52]	; (8002ebc <__libc_init_array+0x3c>)
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	42a6      	cmp	r6, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	2600      	movs	r6, #0
 8002e92:	f000 f821 	bl	8002ed8 <_init>
 8002e96:	4d0a      	ldr	r5, [pc, #40]	; (8002ec0 <__libc_init_array+0x40>)
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <__libc_init_array+0x44>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	42a6      	cmp	r6, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	00b3      	lsls	r3, r6, #2
 8002ea6:	58eb      	ldr	r3, [r5, r3]
 8002ea8:	4798      	blx	r3
 8002eaa:	3601      	adds	r6, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	00b3      	lsls	r3, r6, #2
 8002eb0:	58eb      	ldr	r3, [r5, r3]
 8002eb2:	4798      	blx	r3
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	08002f30 	.word	0x08002f30
 8002ebc:	08002f30 	.word	0x08002f30
 8002ec0:	08002f30 	.word	0x08002f30
 8002ec4:	08002f34 	.word	0x08002f34

08002ec8 <memset>:
 8002ec8:	0003      	movs	r3, r0
 8002eca:	1882      	adds	r2, r0, r2
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	7019      	strb	r1, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
