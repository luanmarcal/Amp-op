
prototipo-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f9c  08002f9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f9c  08002f9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f9c  08002f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08002fb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002fb0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fbb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016bc  00000000  00000000  00027fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  000296b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00029e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fb5  00000000  00000000  0002a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000811d  00000000  00000000  0004451d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7b99  00000000  00000000  0004c63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f41d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a78  00000000  00000000  000f4228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002f44 	.word	0x08002f44

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002f44 	.word	0x08002f44

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b08f      	sub	sp, #60	; 0x3c
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80003f8:	200c      	movs	r0, #12
 80003fa:	183b      	adds	r3, r7, r0
 80003fc:	22b2      	movs	r2, #178	; 0xb2
 80003fe:	32ff      	adds	r2, #255	; 0xff
 8000400:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 8000402:	183b      	adds	r3, r7, r0
 8000404:	2224      	movs	r2, #36	; 0x24
 8000406:	2107      	movs	r1, #7
 8000408:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 800040a:	183b      	adds	r3, r7, r0
 800040c:	2225      	movs	r2, #37	; 0x25
 800040e:	2107      	movs	r1, #7
 8000410:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 8000412:	183b      	adds	r3, r7, r0
 8000414:	2226      	movs	r2, #38	; 0x26
 8000416:	2101      	movs	r1, #1
 8000418:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 800041a:	183b      	adds	r3, r7, r0
 800041c:	222a      	movs	r2, #42	; 0x2a
 800041e:	21ff      	movs	r1, #255	; 0xff
 8000420:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 8000422:	183b      	adds	r3, r7, r0
 8000424:	222b      	movs	r2, #43	; 0x2b
 8000426:	2164      	movs	r1, #100	; 0x64
 8000428:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 800042a:	0001      	movs	r1, r0
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2208      	movs	r2, #8
 8000430:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	187a      	adds	r2, r7, r1
 8000436:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000438:	c313      	stmia	r3!, {r0, r1, r4}
 800043a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800043c:	c313      	stmia	r3!, {r0, r1, r4}
 800043e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000440:	c313      	stmia	r3!, {r0, r1, r4}
 8000442:	ca03      	ldmia	r2!, {r0, r1}
 8000444:	c303      	stmia	r3!, {r0, r1}
}
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	46bd      	mov	sp, r7
 800044a:	b00f      	add	sp, #60	; 0x3c
 800044c:	bd90      	pop	{r4, r7, pc}

0800044e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800044e:	b5b0      	push	{r4, r5, r7, lr}
 8000450:	b084      	sub	sp, #16
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000458:	250e      	movs	r5, #14
 800045a:	197c      	adds	r4, r7, r5
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2101      	movs	r1, #1
 8000460:	0018      	movs	r0, r3
 8000462:	f000 f9e8 	bl	8000836 <LoRa_read>
 8000466:	0003      	movs	r3, r0
 8000468:	7023      	strb	r3, [r4, #0]
	data = read;
 800046a:	200f      	movs	r0, #15
 800046c:	183b      	adds	r3, r7, r0
 800046e:	0029      	movs	r1, r5
 8000470:	187a      	adds	r2, r7, r1
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d109      	bne.n	8000490 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 800047c:	183b      	adds	r3, r7, r0
 800047e:	187a      	adds	r2, r7, r1
 8000480:	7812      	ldrb	r2, [r2, #0]
 8000482:	2107      	movs	r1, #7
 8000484:	438a      	bics	r2, r1
 8000486:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
 800048e:	e04e      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d110      	bne.n	80004b8 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000496:	230e      	movs	r3, #14
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b25b      	sxtb	r3, r3
 800049e:	2207      	movs	r2, #7
 80004a0:	4393      	bics	r3, r2
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	2201      	movs	r2, #1
 80004a6:	4313      	orrs	r3, r2
 80004a8:	b25a      	sxtb	r2, r3
 80004aa:	230f      	movs	r3, #15
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	61da      	str	r2, [r3, #28]
 80004b6:	e03a      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	d110      	bne.n	80004e0 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 80004be:	230e      	movs	r3, #14
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	2207      	movs	r2, #7
 80004c8:	4393      	bics	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	2203      	movs	r2, #3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	230f      	movs	r3, #15
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2203      	movs	r2, #3
 80004dc:	61da      	str	r2, [r3, #28]
 80004de:	e026      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b05      	cmp	r3, #5
 80004e4:	d110      	bne.n	8000508 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 80004e6:	230e      	movs	r3, #14
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	2207      	movs	r2, #7
 80004f0:	4393      	bics	r3, r2
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	2205      	movs	r2, #5
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b25a      	sxtb	r2, r3
 80004fa:	230f      	movs	r3, #15
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2205      	movs	r2, #5
 8000504:	61da      	str	r2, [r3, #28]
 8000506:	e012      	b.n	800052e <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b06      	cmp	r3, #6
 800050c:	d10f      	bne.n	800052e <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 800050e:	230e      	movs	r3, #14
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	2207      	movs	r2, #7
 8000518:	4393      	bics	r3, r2
 800051a:	b25b      	sxtb	r3, r3
 800051c:	2206      	movs	r2, #6
 800051e:	4313      	orrs	r3, r2
 8000520:	b25a      	sxtb	r2, r3
 8000522:	230f      	movs	r3, #15
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2206      	movs	r2, #6
 800052c:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800052e:	230f      	movs	r3, #15
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2101      	movs	r1, #1
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f99a 	bl	8000872 <LoRa_write>
	//HAL_Delay(10);
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b004      	add	sp, #16
 8000544:	bdb0      	pop	{r4, r5, r7, pc}

08000546 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000546:	b590      	push	{r4, r7, lr}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	889b      	ldrh	r3, [r3, #4]
 800055e:	2200      	movs	r2, #0
 8000560:	0019      	movs	r1, r3
 8000562:	f001 f867 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6998      	ldr	r0, [r3, #24]
 800056a:	23fa      	movs	r3, #250	; 0xfa
 800056c:	00dc      	lsls	r4, r3, #3
 800056e:	1dbb      	adds	r3, r7, #6
 8000570:	881a      	ldrh	r2, [r3, #0]
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	0023      	movs	r3, r4
 8000576:	f001 fe63 	bl	8002240 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fad3 	bl	8002b2c <HAL_SPI_GetState>
 8000586:	0003      	movs	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d1f7      	bne.n	800057c <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	6998      	ldr	r0, [r3, #24]
 8000590:	23fa      	movs	r3, #250	; 0xfa
 8000592:	00dc      	lsls	r4, r3, #3
 8000594:	2320      	movs	r3, #32
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	881a      	ldrh	r2, [r3, #0]
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	0023      	movs	r3, r4
 800059e:	f001 ffa7 	bl	80024f0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fabf 	bl	8002b2c <HAL_SPI_GetState>
 80005ae:	0003      	movs	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d1f7      	bne.n	80005a4 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	0019      	movs	r1, r3
 80005c0:	f001 f838 	bl	8001634 <HAL_GPIO_WritePin>
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b005      	add	sp, #20
 80005ca:	bd90      	pop	{r4, r7, pc}

080005cc <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	889b      	ldrh	r3, [r3, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	0019      	movs	r1, r3
 80005e8:	f001 f824 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6998      	ldr	r0, [r3, #24]
 80005f0:	23fa      	movs	r3, #250	; 0xfa
 80005f2:	00dc      	lsls	r4, r3, #3
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	0023      	movs	r3, r4
 80005fc:	f001 fe20 	bl	8002240 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	0018      	movs	r0, r3
 8000608:	f002 fa90 	bl	8002b2c <HAL_SPI_GetState>
 800060c:	0003      	movs	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d1f7      	bne.n	8000602 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6998      	ldr	r0, [r3, #24]
 8000616:	23fa      	movs	r3, #250	; 0xfa
 8000618:	00dc      	lsls	r4, r3, #3
 800061a:	2320      	movs	r3, #32
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	881a      	ldrh	r2, [r3, #0]
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	0023      	movs	r3, r4
 8000624:	f001 fe0c 	bl	8002240 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	0018      	movs	r0, r3
 8000630:	f002 fa7c 	bl	8002b2c <HAL_SPI_GetState>
 8000634:	0003      	movs	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d1f7      	bne.n	800062a <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	0019      	movs	r1, r3
 8000646:	f000 fff5 	bl	8001634 <HAL_GPIO_WritePin>
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b005      	add	sp, #20
 8000650:	bd90      	pop	{r4, r7, pc}

08000652 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000652:	b590      	push	{r4, r7, lr}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	115b      	asrs	r3, r3, #5
 8000662:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	0c1a      	lsrs	r2, r3, #16
 8000668:	240b      	movs	r4, #11
 800066a:	193b      	adds	r3, r7, r4
 800066c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 800066e:	193b      	adds	r3, r7, r4
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2106      	movs	r1, #6
 8000676:	0018      	movs	r0, r3
 8000678:	f000 f8fb 	bl	8000872 <LoRa_write>
	HAL_Delay(5);
 800067c:	2005      	movs	r0, #5
 800067e:	f000 fd7f 	bl	8001180 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	0a1a      	lsrs	r2, r3, #8
 8000686:	193b      	adds	r3, r7, r4
 8000688:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 800068a:	193b      	adds	r3, r7, r4
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2107      	movs	r1, #7
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f8ed 	bl	8000872 <LoRa_write>
	HAL_Delay(5);
 8000698:	2005      	movs	r0, #5
 800069a:	f000 fd71 	bl	8001180 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2108      	movs	r1, #8
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f8e0 	bl	8000872 <LoRa_write>
	HAL_Delay(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f000 fd64 	bl	8001180 <HAL_Delay>
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b005      	add	sp, #20
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2b0c      	cmp	r3, #12
 80006ce:	dd01      	ble.n	80006d4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80006d0:	230c      	movs	r3, #12
 80006d2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	dc01      	bgt.n	80006de <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80006de:	250f      	movs	r5, #15
 80006e0:	197c      	adds	r4, r7, r5
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	211e      	movs	r1, #30
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f8a5 	bl	8000836 <LoRa_read>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 80006f0:	200a      	movs	r0, #10
 80006f2:	f000 fd45 	bl	8001180 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	197b      	adds	r3, r7, r5
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	220f      	movs	r2, #15
 8000704:	4013      	ands	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	200e      	movs	r0, #14
 800070a:	183b      	adds	r3, r7, r0
 800070c:	188a      	adds	r2, r1, r2
 800070e:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000710:	183b      	adds	r3, r7, r0
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	211e      	movs	r1, #30
 8000718:	0018      	movs	r0, r3
 800071a:	f000 f8aa 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f000 fd2e 	bl	8001180 <HAL_Delay>
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bdb0      	pop	{r4, r5, r7, pc}

0800072c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	000a      	movs	r2, r1
 8000736:	1cfb      	adds	r3, r7, #3
 8000738:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 800073a:	1cfb      	adds	r3, r7, #3
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2109      	movs	r1, #9
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f895 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fd19 	bl	8001180 <HAL_Delay>
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}

08000756 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	000a      	movs	r2, r1
 8000760:	1cfb      	adds	r3, r7, #3
 8000762:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]

	if(current<45)
 800076c:	1cfb      	adds	r3, r7, #3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b2c      	cmp	r3, #44	; 0x2c
 8000772:	d802      	bhi.n	800077a <LoRa_setOCP+0x24>
		current = 45;
 8000774:	1cfb      	adds	r3, r7, #3
 8000776:	222d      	movs	r2, #45	; 0x2d
 8000778:	701a      	strb	r2, [r3, #0]
	if(current>240)
 800077a:	1cfb      	adds	r3, r7, #3
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2bf0      	cmp	r3, #240	; 0xf0
 8000780:	d902      	bls.n	8000788 <LoRa_setOCP+0x32>
		current = 240;
 8000782:	1cfb      	adds	r3, r7, #3
 8000784:	22f0      	movs	r2, #240	; 0xf0
 8000786:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000788:	1cfb      	adds	r3, r7, #3
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b78      	cmp	r3, #120	; 0x78
 800078e:	d80c      	bhi.n	80007aa <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8000790:	1cfb      	adds	r3, r7, #3
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3b2d      	subs	r3, #45	; 0x2d
 8000796:	2105      	movs	r1, #5
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fd3d 	bl	8000218 <__divsi3>
 800079e:	0003      	movs	r3, r0
 80007a0:	001a      	movs	r2, r3
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e00f      	b.n	80007ca <LoRa_setOCP+0x74>
	else if(current <= 240)
 80007aa:	1cfb      	adds	r3, r7, #3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2bf0      	cmp	r3, #240	; 0xf0
 80007b0:	d80b      	bhi.n	80007ca <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 80007b2:	1cfb      	adds	r3, r7, #3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	331e      	adds	r3, #30
 80007b8:	210a      	movs	r1, #10
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fd2c 	bl	8000218 <__divsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	001a      	movs	r2, r3
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 80007ca:	210f      	movs	r1, #15
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	3220      	adds	r2, #32
 80007d4:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	210b      	movs	r1, #11
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f847 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 fccb 	bl	8001180 <HAL_Delay>
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80007f2:	b5b0      	push	{r4, r5, r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007fa:	250f      	movs	r5, #15
 80007fc:	197c      	adds	r4, r7, r5
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	211e      	movs	r1, #30
 8000802:	0018      	movs	r0, r3
 8000804:	f000 f817 	bl	8000836 <LoRa_read>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 800080c:	200e      	movs	r0, #14
 800080e:	183b      	adds	r3, r7, r0
 8000810:	197a      	adds	r2, r7, r5
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	2107      	movs	r1, #7
 8000816:	430a      	orrs	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800081a:	183b      	adds	r3, r7, r0
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	211e      	movs	r1, #30
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f825 	bl	8000872 <LoRa_write>
	HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f000 fca9 	bl	8001180 <HAL_Delay>
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bdb0      	pop	{r4, r5, r7, pc}

08000836 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b087      	sub	sp, #28
 800083a:	af02      	add	r7, sp, #8
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	000a      	movs	r2, r1
 8000840:	1cfb      	adds	r3, r7, #3
 8000842:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000844:	1cfb      	adds	r3, r7, #3
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	227f      	movs	r2, #127	; 0x7f
 800084a:	4013      	ands	r3, r2
 800084c:	b2da      	uxtb	r2, r3
 800084e:	210e      	movs	r1, #14
 8000850:	187b      	adds	r3, r7, r1
 8000852:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000854:	240f      	movs	r4, #15
 8000856:	193b      	adds	r3, r7, r4
 8000858:	1879      	adds	r1, r7, r1
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	2201      	movs	r2, #1
 800085e:	9200      	str	r2, [sp, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	f7ff fe70 	bl	8000546 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	781b      	ldrb	r3, [r3, #0]
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b005      	add	sp, #20
 8000870:	bd90      	pop	{r4, r7, pc}

08000872 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af02      	add	r7, sp, #8
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	0008      	movs	r0, r1
 800087c:	0011      	movs	r1, r2
 800087e:	1cfb      	adds	r3, r7, #3
 8000880:	1c02      	adds	r2, r0, #0
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	1cbb      	adds	r3, r7, #2
 8000886:	1c0a      	adds	r2, r1, #0
 8000888:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800088a:	1cfb      	adds	r3, r7, #3
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	4252      	negs	r2, r2
 8000892:	4313      	orrs	r3, r2
 8000894:	b2da      	uxtb	r2, r3
 8000896:	210e      	movs	r1, #14
 8000898:	187b      	adds	r3, r7, r1
 800089a:	701a      	strb	r2, [r3, #0]
	data = value;
 800089c:	200f      	movs	r0, #15
 800089e:	183b      	adds	r3, r7, r0
 80008a0:	1cba      	adds	r2, r7, #2
 80008a2:	7812      	ldrb	r2, [r2, #0]
 80008a4:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008a6:	183b      	adds	r3, r7, r0
 80008a8:	1879      	adds	r1, r7, r1
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	9200      	str	r2, [sp, #0]
 80008b0:	2201      	movs	r2, #1
 80008b2:	f7ff fe8b 	bl	80005cc <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}

080008be <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80008be:	b590      	push	{r4, r7, lr}
 80008c0:	b087      	sub	sp, #28
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	0008      	movs	r0, r1
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	0019      	movs	r1, r3
 80008cc:	240b      	movs	r4, #11
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	1c02      	adds	r2, r0, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	230a      	movs	r3, #10
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	1c0a      	adds	r2, r1, #0
 80008da:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	4252      	negs	r2, r2
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	2417      	movs	r4, #23
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	0019      	movs	r1, r3
 80008fa:	f000 fe9b 	bl	8001634 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	6998      	ldr	r0, [r3, #24]
 8000902:	23fa      	movs	r3, #250	; 0xfa
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	1939      	adds	r1, r7, r4
 8000908:	2201      	movs	r2, #1
 800090a:	f001 fc99 	bl	8002240 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	0018      	movs	r0, r3
 8000916:	f002 f909 	bl	8002b2c <HAL_SPI_GetState>
 800091a:	0003      	movs	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	d1f7      	bne.n	8000910 <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6998      	ldr	r0, [r3, #24]
 8000924:	230a      	movs	r3, #10
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b29a      	uxth	r2, r3
 800092c:	23fa      	movs	r3, #250	; 0xfa
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	f001 fc85 	bl	8002240 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	0018      	movs	r0, r3
 800093e:	f002 f8f5 	bl	8002b2c <HAL_SPI_GetState>
 8000942:	0003      	movs	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d1f7      	bne.n	8000938 <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	889b      	ldrh	r3, [r3, #4]
 8000950:	2201      	movs	r2, #1
 8000952:	0019      	movs	r1, r3
 8000954:	f000 fe6e 	bl	8001634 <HAL_GPIO_WritePin>
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b007      	add	sp, #28
 800095e:	bd90      	pop	{r4, r7, pc}

08000960 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

	return 1;
 8000968:	2301      	movs	r3, #1
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}

08000972 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000972:	b5b0      	push	{r4, r5, r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	0019      	movs	r1, r3
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	1c0a      	adds	r2, r1, #0
 8000986:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2101      	movs	r1, #1
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fd5b 	bl	800044e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000998:	2513      	movs	r5, #19
 800099a:	197c      	adds	r4, r7, r5
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	210e      	movs	r1, #14
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ff48 	bl	8000836 <LoRa_read>
 80009a6:	0003      	movs	r3, r0
 80009a8:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009aa:	197b      	adds	r3, r7, r5
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	210d      	movs	r1, #13
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff ff5d 	bl	8000872 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2122      	movs	r1, #34	; 0x22
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff56 	bl	8000872 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	2100      	movs	r1, #0
 80009d0:	f7ff ff75 	bl	80008be <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2103      	movs	r1, #3
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fd38 	bl	800044e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80009de:	2513      	movs	r5, #19
 80009e0:	197c      	adds	r4, r7, r5
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2112      	movs	r1, #18
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff ff25 	bl	8000836 <LoRa_read>
 80009ec:	0003      	movs	r3, r0
 80009ee:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 80009f0:	197b      	adds	r3, r7, r5
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2208      	movs	r2, #8
 80009f6:	4013      	ands	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	2112      	movs	r1, #18
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ff36 	bl	8000872 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fd1e 	bl	800044e <LoRa_gotoMode>
			return 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e014      	b.n	8000a40 <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	1d3a      	adds	r2, r7, #4
 8000a1a:	8812      	ldrh	r2, [r2, #0]
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	801a      	strh	r2, [r3, #0]
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fd0d 	bl	800044e <LoRa_gotoMode>
				return 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	e003      	b.n	8000a40 <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f000 fba1 	bl	8001180 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a3e:	e7ce      	b.n	80009de <LoRa_transmit+0x6c>
	}

}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b006      	add	sp, #24
 8000a46:	bdb0      	pop	{r4, r5, r7, pc}

08000a48 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff ff84 	bl	8000960 <LoRa_isvalid>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d100      	bne.n	8000a5e <LoRa_init+0x16>
 8000a5c:	e0b3      	b.n	8000bc6 <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2100      	movs	r1, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fcf3 	bl	800044e <LoRa_gotoMode>
			HAL_Delay(10);
 8000a68:	200a      	movs	r0, #10
 8000a6a:	f000 fb89 	bl	8001180 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a6e:	260f      	movs	r6, #15
 8000a70:	19bc      	adds	r4, r7, r6
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2101      	movs	r1, #1
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fedd 	bl	8000836 <LoRa_read>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8000a80:	200a      	movs	r0, #10
 8000a82:	f000 fb7d 	bl	8001180 <HAL_Delay>
			data = read | 0x80;
 8000a86:	250e      	movs	r5, #14
 8000a88:	197b      	adds	r3, r7, r5
 8000a8a:	0034      	movs	r4, r6
 8000a8c:	193a      	adds	r2, r7, r4
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	4249      	negs	r1, r1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a98:	197b      	adds	r3, r7, r5
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fee6 	bl	8000872 <LoRa_write>
			HAL_Delay(100);
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f000 fb6a 	bl	8001180 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a1a      	ldr	r2, [r3, #32]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fdcc 	bl	8000652 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	222a      	movs	r2, #42	; 0x2a
 8000abe:	5c9a      	ldrb	r2, [r3, r2]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fe31 	bl	800072c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	222b      	movs	r2, #43	; 0x2b
 8000ace:	5c9a      	ldrb	r2, [r3, r2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fe3e 	bl	8000756 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2223      	movs	r2, #35	; 0x23
 8000ade:	210c      	movs	r1, #12
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fec6 	bl	8000872 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fe82 	bl	80007f2 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2224      	movs	r2, #36	; 0x24
 8000af2:	5c9b      	ldrb	r3, [r3, r2]
 8000af4:	001a      	movs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fde0 	bl	80006c0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	22ff      	movs	r2, #255	; 0xff
 8000b04:	211f      	movs	r1, #31
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff feb3 	bl	8000872 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000b0c:	197b      	adds	r3, r7, r5
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2225      	movs	r2, #37	; 0x25
 8000b16:	5c9b      	ldrb	r3, [r3, r2]
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	b2d9      	uxtb	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2226      	movs	r2, #38	; 0x26
 8000b20:	5c9b      	ldrb	r3, [r3, r2]
 8000b22:	18db      	adds	r3, r3, r3
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	197b      	adds	r3, r7, r5
 8000b28:	188a      	adds	r2, r1, r2
 8000b2a:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	211d      	movs	r1, #29
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fe9c 	bl	8000872 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2120      	movs	r1, #32
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff fe92 	bl	8000872 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2121      	movs	r1, #33	; 0x21
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff fe8a 	bl	8000872 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000b5e:	0026      	movs	r6, r4
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff fe65 	bl	8000836 <LoRa_read>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	0034      	movs	r4, r6
 8000b74:	193a      	adds	r2, r7, r4
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	213f      	movs	r1, #63	; 0x3f
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b7e:	197b      	adds	r3, r7, r5
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2140      	movs	r1, #64	; 0x40
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fe73 	bl	8000872 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fc5c 	bl	800044e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f000 faef 	bl	8001180 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000ba2:	0025      	movs	r5, r4
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2142      	movs	r1, #66	; 0x42
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fe43 	bl	8000836 <LoRa_read>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 8000bb4:	197b      	adds	r3, r7, r5
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b12      	cmp	r3, #18
 8000bba:	d101      	bne.n	8000bc0 <LoRa_init+0x178>
				return LORA_OK;
 8000bbc:	23c8      	movs	r3, #200	; 0xc8
 8000bbe:	e004      	b.n	8000bca <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 8000bc0:	23ca      	movs	r3, #202	; 0xca
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	e001      	b.n	8000bca <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8000bc6:	23f8      	movs	r3, #248	; 0xf8
 8000bc8:	33ff      	adds	r3, #255	; 0xff
	}
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b005      	add	sp, #20
 8000bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b08f      	sub	sp, #60	; 0x3c
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bda:	f000 fa4b 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bde:	f000 f877 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f000 f911 	bl	8000e08 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000be6:	f000 f8d1 	bl	8000d8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 8000bea:	4c35      	ldr	r4, [pc, #212]	; (8000cc0 <main+0xec>)
 8000bec:	003b      	movs	r3, r7
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fbfe 	bl	80003f0 <newLoRa>
 8000bf4:	003a      	movs	r2, r7
 8000bf6:	0023      	movs	r3, r4
 8000bf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bfa:	c313      	stmia	r3!, {r0, r1, r4}
 8000bfc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bfe:	c313      	stmia	r3!, {r0, r1, r4}
 8000c00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c02:	c313      	stmia	r3!, {r0, r1, r4}
 8000c04:	ca03      	ldmia	r2!, {r0, r1}
 8000c06:	c303      	stmia	r3!, {r0, r1}

  	myLoRa.hSPIx                 = &hspi1;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <main+0xec>)
 8000c0a:	4a2e      	ldr	r2, [pc, #184]	; (8000cc4 <main+0xf0>)
 8000c0c:	619a      	str	r2, [r3, #24]
  	myLoRa.CS_port               = NSS_GPIO_Port;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <main+0xec>)
 8000c10:	22a0      	movs	r2, #160	; 0xa0
 8000c12:	05d2      	lsls	r2, r2, #23
 8000c14:	601a      	str	r2, [r3, #0]
  	myLoRa.CS_pin                = NSS_Pin;
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <main+0xec>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	809a      	strh	r2, [r3, #4]
  	myLoRa.reset_port            = RESET_GPIO_Port;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <main+0xec>)
 8000c1e:	4a2a      	ldr	r2, [pc, #168]	; (8000cc8 <main+0xf4>)
 8000c20:	609a      	str	r2, [r3, #8]
  	myLoRa.reset_pin             = RESET_Pin;
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <main+0xec>)
 8000c24:	2210      	movs	r2, #16
 8000c26:	819a      	strh	r2, [r3, #12]
  	myLoRa.DIO0_port						 = DIO0_GPIO_Port;
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <main+0xec>)
 8000c2a:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <main+0xf4>)
 8000c2c:	611a      	str	r2, [r3, #16]
  	myLoRa.DIO0_pin							 = DIO0_Pin;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <main+0xec>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	829a      	strh	r2, [r3, #20]

  	myLoRa.frequency             = 433;							  // default = 433 MHz
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <main+0xec>)
 8000c36:	22b2      	movs	r2, #178	; 0xb2
 8000c38:	32ff      	adds	r2, #255	; 0xff
 8000c3a:	621a      	str	r2, [r3, #32]
  	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <main+0xec>)
 8000c3e:	2224      	movs	r2, #36	; 0x24
 8000c40:	2107      	movs	r1, #7
 8000c42:	5499      	strb	r1, [r3, r2]
  	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <main+0xec>)
 8000c46:	2225      	movs	r2, #37	; 0x25
 8000c48:	2107      	movs	r1, #7
 8000c4a:	5499      	strb	r1, [r3, r2]
  	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <main+0xec>)
 8000c4e:	2226      	movs	r2, #38	; 0x26
 8000c50:	2101      	movs	r1, #1
 8000c52:	5499      	strb	r1, [r3, r2]
  	myLoRa.power					       = POWER_20db;				// default = 20db
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <main+0xec>)
 8000c56:	222a      	movs	r2, #42	; 0x2a
 8000c58:	21ff      	movs	r1, #255	; 0xff
 8000c5a:	5499      	strb	r1, [r3, r2]
  	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <main+0xec>)
 8000c5e:	222b      	movs	r2, #43	; 0x2b
 8000c60:	2178      	movs	r1, #120	; 0x78
 8000c62:	5499      	strb	r1, [r3, r2]
  	myLoRa.preamble				       = 10;		  					// default = 8;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <main+0xec>)
 8000c66:	220a      	movs	r2, #10
 8000c68:	851a      	strh	r2, [r3, #40]	; 0x28


  	teste=LoRa_init(&myLoRa);
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <main+0xec>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff feeb 	bl	8000a48 <LoRa_init>
 8000c72:	0003      	movs	r3, r0
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <main+0xf8>)
 8000c78:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000c7a:	23fa      	movs	r3, #250	; 0xfa
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fa7e 	bl	8001180 <HAL_Delay>
	  uint8_t send_data;
	  send_data = 5 ;
 8000c84:	2137      	movs	r1, #55	; 0x37
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2205      	movs	r2, #5
 8000c8a:	701a      	strb	r2, [r3, #0]
	  if (LoRa_transmit(&myLoRa, &send_data, 1 , 100 ) == 1 ){
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <main+0xec>)
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	2201      	movs	r2, #1
 8000c94:	f7ff fe6d 	bl	8000972 <LoRa_transmit>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d107      	bne.n	8000cae <main+0xda>
	      HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fcc4 	bl	8001634 <HAL_GPIO_WritePin>
 8000cac:	e7e5      	b.n	8000c7a <main+0xa6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cae:	23a0      	movs	r3, #160	; 0xa0
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fcbc 	bl	8001634 <HAL_GPIO_WritePin>
  {
 8000cbc:	e7dd      	b.n	8000c7a <main+0xa6>
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000194 	.word	0x20000194
 8000cc4:	20000130 	.word	0x20000130
 8000cc8:	50000800 	.word	0x50000800
 8000ccc:	200000ac 	.word	0x200000ac

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b095      	sub	sp, #84	; 0x54
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	2414      	movs	r4, #20
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	0018      	movs	r0, r3
 8000cdc:	233c      	movs	r3, #60	; 0x3c
 8000cde:	001a      	movs	r2, r3
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f002 f927 	bl	8002f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2310      	movs	r3, #16
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f002 f920 	bl	8002f34 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fcb9 	bl	8001670 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2202      	movs	r2, #2
 8000d02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	0052      	lsls	r2, r2, #1
 8000d0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2240      	movs	r2, #64	; 0x40
 8000d18:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2202      	movs	r2, #2
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2208      	movs	r2, #8
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	0292      	lsls	r2, r2, #10
 8000d38:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0492      	lsls	r2, r2, #18
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	0592      	lsls	r2, r2, #22
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fccf 	bl	80016f0 <HAL_RCC_OscConfig>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d56:	f000 f8cf 	bl	8000ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2202      	movs	r2, #2
 8000d64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2102      	movs	r1, #2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 f820 	bl	8001dbc <HAL_RCC_ClockConfig>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d80:	f000 f8ba 	bl	8000ef8 <Error_Handler>
  }
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b015      	add	sp, #84	; 0x54
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_SPI1_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000d98:	2282      	movs	r2, #130	; 0x82
 8000d9a:	0052      	lsls	r2, r2, #1
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000da6:	22e0      	movs	r2, #224	; 0xe0
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dda:	2207      	movs	r2, #7
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000de6:	2208      	movs	r2, #8
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <MX_SPI1_Init+0x74>)
 8000dec:	0018      	movs	r0, r3
 8000dee:	f001 f96f 	bl	80020d0 <HAL_SPI_Init>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d001      	beq.n	8000dfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 f87f 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000130 	.word	0x20000130
 8000e04:	40013000 	.word	0x40013000

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	240c      	movs	r4, #12
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	0018      	movs	r0, r3
 8000e14:	2314      	movs	r3, #20
 8000e16:	001a      	movs	r2, r3
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f002 f88b 	bl	8002f34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <MX_GPIO_Init+0xe8>)
 8000e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <MX_GPIO_Init+0xe8>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <MX_GPIO_Init+0xe8>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <MX_GPIO_Init+0xe8>)
 8000e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <MX_GPIO_Init+0xe8>)
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_GPIO_Init+0xe8>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	2204      	movs	r2, #4
 8000e48:	4013      	ands	r3, r2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e4e:	23a0      	movs	r3, #160	; 0xa0
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	2200      	movs	r2, #0
 8000e54:	2120      	movs	r1, #32
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fbec 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	2201      	movs	r2, #1
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fbe5 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_Pin|DIO0_Pin, GPIO_PIN_RESET);
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2130      	movs	r1, #48	; 0x30
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 fbdf 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2220      	movs	r2, #32
 8000e7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2201      	movs	r2, #1
 8000e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	193a      	adds	r2, r7, r4
 8000e90:	23a0      	movs	r3, #160	; 0xa0
 8000e92:	05db      	lsls	r3, r3, #23
 8000e94:	0011      	movs	r1, r2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 fa60 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	193a      	adds	r2, r7, r4
 8000eb6:	23a0      	movs	r3, #160	; 0xa0
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f000 fa4d 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|DIO0_Pin;
 8000ec2:	0021      	movs	r1, r4
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2230      	movs	r2, #48	; 0x30
 8000ec8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2201      	movs	r2, #1
 8000ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <MX_GPIO_Init+0xec>)
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	0010      	movs	r0, r2
 8000ee4:	f000 fa3a 	bl	800135c <HAL_GPIO_Init>

}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b009      	add	sp, #36	; 0x24
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	50000800 	.word	0x50000800

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <Error_Handler+0x8>
	...

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0549      	lsls	r1, r1, #21
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	055b      	lsls	r3, r3, #21
 8000f38:	4013      	ands	r3, r2
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f3e:	23c0      	movs	r3, #192	; 0xc0
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f940 	bl	80011c8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b08b      	sub	sp, #44	; 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	2414      	movs	r4, #20
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	0018      	movs	r0, r3
 8000f62:	2314      	movs	r3, #20
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f001 ffe4 	bl	8002f34 <memset>
  if(hspi->Instance==SPI1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_SPI_MspInit+0x8c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d130      	bne.n	8000fd8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	0149      	lsls	r1, r1, #5
 8000f80:	430a      	orrs	r2, r1
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	015b      	lsls	r3, r3, #5
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_SPI_MspInit+0x90>)
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8000faa:	0021      	movs	r1, r4
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2246      	movs	r2, #70	; 0x46
 8000fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	187a      	adds	r2, r7, r1
 8000fcc:	23a0      	movs	r3, #160	; 0xa0
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 f9c2 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b00b      	add	sp, #44	; 0x2c
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	40013000 	.word	0x40013000
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f89c 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001022:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001024:	f7ff fff7 	bl	8001016 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800104e:	f001 ff4d 	bl	8002eec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001052:	f7ff fdbf 	bl	8000bd4 <main>

08001056 <LoopForever>:

LoopForever:
  b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   r0, =_estack
 8001058:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001064:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 8001068:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800106c:	200001c4 	.word	0x200001c4

08001070 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_COMP_IRQHandler>
	...

08001074 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x3c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Init+0x3c>)
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0049      	lsls	r1, r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108e:	2003      	movs	r0, #3
 8001090:	f000 f810 	bl	80010b4 <HAL_InitTick>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d003      	beq.n	80010a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e001      	b.n	80010a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff ff30 	bl	8000f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_InitTick+0x88>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d02b      	beq.n	8001124 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_InitTick+0x8c>)
 80010ce:	681c      	ldr	r4, [r3, #0]
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_InitTick+0x88>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	0019      	movs	r1, r3
 80010d6:	23fa      	movs	r3, #250	; 0xfa
 80010d8:	0098      	lsls	r0, r3, #2
 80010da:	f7ff f813 	bl	8000104 <__udivsi3>
 80010de:	0003      	movs	r3, r0
 80010e0:	0019      	movs	r1, r3
 80010e2:	0020      	movs	r0, r4
 80010e4:	f7ff f80e 	bl	8000104 <__udivsi3>
 80010e8:	0003      	movs	r3, r0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 f929 	bl	8001342 <HAL_SYSTICK_Config>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d112      	bne.n	800111a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d80a      	bhi.n	8001110 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	2301      	movs	r3, #1
 80010fe:	425b      	negs	r3, r3
 8001100:	2200      	movs	r2, #0
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f908 	bl	8001318 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_InitTick+0x90>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e00d      	b.n	800112c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001110:	230f      	movs	r3, #15
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e008      	b.n	800112c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800111a:	230f      	movs	r3, #15
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e003      	b.n	800112c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001124:	230f      	movs	r3, #15
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b005      	add	sp, #20
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	20000008 	.word	0x20000008
 8001140:	20000000 	.word	0x20000000
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x1c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	001a      	movs	r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x20>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	18d2      	adds	r2, r2, r3
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_IncTick+0x20>)
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000008 	.word	0x20000008
 8001168:	200001c0 	.word	0x200001c0

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b02      	ldr	r3, [pc, #8]	; (800117c <HAL_GetTick+0x10>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	200001c0 	.word	0x200001c0

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff fff0 	bl	800116c <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	001a      	movs	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	189b      	adds	r3, r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	f7ff ffe0 	bl	800116c <HAL_GetTick>
 80011ac:	0002      	movs	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b004      	add	sp, #16
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	20000008 	.word	0x20000008

080011c8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	0019      	movs	r1, r3
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	40010000 	.word	0x40010000
 80011f0:	fffff9ff 	.word	0xfffff9ff

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b7f      	cmp	r3, #127	; 0x7f
 8001208:	d828      	bhi.n	800125c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <__NVIC_SetPriority+0xd4>)
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b25b      	sxtb	r3, r3
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	33c0      	adds	r3, #192	; 0xc0
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	589b      	ldr	r3, [r3, r2]
 800121a:	1dfa      	adds	r2, r7, #7
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	0011      	movs	r1, r2
 8001220:	2203      	movs	r2, #3
 8001222:	400a      	ands	r2, r1
 8001224:	00d2      	lsls	r2, r2, #3
 8001226:	21ff      	movs	r1, #255	; 0xff
 8001228:	4091      	lsls	r1, r2
 800122a:	000a      	movs	r2, r1
 800122c:	43d2      	mvns	r2, r2
 800122e:	401a      	ands	r2, r3
 8001230:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	401a      	ands	r2, r3
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	0018      	movs	r0, r3
 8001240:	2303      	movs	r3, #3
 8001242:	4003      	ands	r3, r0
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001248:	481f      	ldr	r0, [pc, #124]	; (80012c8 <__NVIC_SetPriority+0xd4>)
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	430a      	orrs	r2, r1
 8001254:	33c0      	adds	r3, #192	; 0xc0
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800125a:	e031      	b.n	80012c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <__NVIC_SetPriority+0xd8>)
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0019      	movs	r1, r3
 8001264:	230f      	movs	r3, #15
 8001266:	400b      	ands	r3, r1
 8001268:	3b08      	subs	r3, #8
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3306      	adds	r3, #6
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	18d3      	adds	r3, r2, r3
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1dfa      	adds	r2, r7, #7
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	0011      	movs	r1, r2
 800127c:	2203      	movs	r2, #3
 800127e:	400a      	ands	r2, r1
 8001280:	00d2      	lsls	r2, r2, #3
 8001282:	21ff      	movs	r1, #255	; 0xff
 8001284:	4091      	lsls	r1, r2
 8001286:	000a      	movs	r2, r1
 8001288:	43d2      	mvns	r2, r2
 800128a:	401a      	ands	r2, r3
 800128c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	019b      	lsls	r3, r3, #6
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	401a      	ands	r2, r3
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	0018      	movs	r0, r3
 800129c:	2303      	movs	r3, #3
 800129e:	4003      	ands	r3, r0
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <__NVIC_SetPriority+0xd8>)
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	001c      	movs	r4, r3
 80012ac:	230f      	movs	r3, #15
 80012ae:	4023      	ands	r3, r4
 80012b0:	3b08      	subs	r3, #8
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	430a      	orrs	r2, r1
 80012b6:	3306      	adds	r3, #6
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	18c3      	adds	r3, r0, r3
 80012bc:	3304      	adds	r3, #4
 80012be:	601a      	str	r2, [r3, #0]
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b003      	add	sp, #12
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	1e5a      	subs	r2, r3, #1
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	045b      	lsls	r3, r3, #17
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d301      	bcc.n	80012e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e4:	2301      	movs	r3, #1
 80012e6:	e010      	b.n	800130a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <SysTick_Config+0x44>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	3a01      	subs	r2, #1
 80012ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f0:	2301      	movs	r3, #1
 80012f2:	425b      	negs	r3, r3
 80012f4:	2103      	movs	r1, #3
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff ff7c 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x44>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x44>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	210f      	movs	r1, #15
 8001324:	187b      	adds	r3, r7, r1
 8001326:	1c02      	adds	r2, r0, #0
 8001328:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	187b      	adds	r3, r7, r1
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b25b      	sxtb	r3, r3
 8001332:	0011      	movs	r1, r2
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff ffbf 	bl	80012d0 <SysTick_Config>
 8001352:	0003      	movs	r3, r0
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e14d      	b.n	8001608 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x28>
 8001382:	e13e      	b.n	8001602 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_GPIO_Init+0x40>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	2b02      	cmp	r3, #2
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	2201      	movs	r2, #1
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	4013      	ands	r3, r2
 8001406:	2b03      	cmp	r3, #3
 8001408:	d017      	beq.n	800143a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	4013      	ands	r3, r2
 8001442:	2b02      	cmp	r3, #2
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	58d3      	ldr	r3, [r2, r3]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2207      	movs	r2, #7
 8001458:	4013      	ands	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2107      	movs	r1, #7
 8001472:	400b      	ands	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	6939      	ldr	r1, [r7, #16]
 800148c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2203      	movs	r2, #3
 80014ac:	401a      	ands	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	d100      	bne.n	80014d0 <HAL_GPIO_Init+0x174>
 80014ce:	e098      	b.n	8001602 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014d0:	4a53      	ldr	r2, [pc, #332]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3318      	adds	r3, #24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	589b      	ldr	r3, [r3, r2]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2203      	movs	r2, #3
 80014e2:	4013      	ands	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	220f      	movs	r2, #15
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	43da      	mvns	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	23a0      	movs	r3, #160	; 0xa0
 80014f8:	05db      	lsls	r3, r3, #23
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0x1d6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x1d2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a47      	ldr	r2, [pc, #284]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x1ce>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a46      	ldr	r2, [pc, #280]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x1ca>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_GPIO_Init+0x2d4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x1c6>
 800151e:	2304      	movs	r3, #4
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 8001522:	2305      	movs	r3, #5
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x1d8>
 8001532:	2300      	movs	r3, #0
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	2103      	movs	r1, #3
 8001538:	400a      	ands	r2, r1
 800153a:	00d2      	lsls	r2, r2, #3
 800153c:	4093      	lsls	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001544:	4936      	ldr	r1, [pc, #216]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3318      	adds	r3, #24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001552:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	58d3      	ldr	r3, [r2, r3]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43da      	mvns	r2, r3
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	4013      	ands	r3, r2
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001578:	4929      	ldr	r1, [pc, #164]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001582:	2384      	movs	r3, #132	; 0x84
 8001584:	58d3      	ldr	r3, [r2, r3]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43da      	mvns	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a6:	491e      	ldr	r1, [pc, #120]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015a8:	2284      	movs	r2, #132	; 0x84
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	035b      	lsls	r3, r3, #13
 80015c6:	4013      	ands	r3, r2
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	039b      	lsls	r3, r3, #14
 80015f0:	4013      	ands	r3, r2
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	40da      	lsrs	r2, r3
 8001610:	1e13      	subs	r3, r2, #0
 8001612:	d000      	beq.n	8001616 <HAL_GPIO_Init+0x2ba>
 8001614:	e6aa      	b.n	800136c <HAL_GPIO_Init+0x10>
  }
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b006      	add	sp, #24
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021800 	.word	0x40021800
 8001624:	50000400 	.word	0x50000400
 8001628:	50000800 	.word	0x50000800
 800162c:	50000c00 	.word	0x50000c00
 8001630:	50001000 	.word	0x50001000

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	0008      	movs	r0, r1
 800163e:	0011      	movs	r1, r2
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	1c02      	adds	r2, r0, #0
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	1c7b      	adds	r3, r7, #1
 8001648:	1c0a      	adds	r2, r1, #0
 800164a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800164c:	1c7b      	adds	r3, r7, #1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001654:	1cbb      	adds	r3, r7, #2
 8001656:	881a      	ldrh	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165e:	1cbb      	adds	r3, r7, #2
 8001660:	881a      	ldrh	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800167e:	4013      	ands	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d11f      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	0013      	movs	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	189b      	adds	r3, r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4912      	ldr	r1, [pc, #72]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fd2e 	bl	8000104 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ae:	e008      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e001      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e009      	b.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	401a      	ands	r2, r3
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d0ed      	beq.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	40007000 	.word	0x40007000
 80016e4:	fffff9ff 	.word	0xfffff9ff
 80016e8:	20000000 	.word	0x20000000
 80016ec:	000f4240 	.word	0x000f4240

080016f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	f000 fb56 	bl	8001db0 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	d100      	bne.n	8001710 <HAL_RCC_OscConfig+0x20>
 800170e:	e07d      	b.n	800180c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001710:	4bc3      	ldr	r3, [pc, #780]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2238      	movs	r2, #56	; 0x38
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171a:	4bc1      	ldr	r3, [pc, #772]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2203      	movs	r2, #3
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d102      	bne.n	8001730 <HAL_RCC_OscConfig+0x40>
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d002      	beq.n	8001736 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001736:	4bba      	ldr	r3, [pc, #744]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d063      	beq.n	800180a <HAL_RCC_OscConfig+0x11a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d15f      	bne.n	800180a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 fb30 	bl	8001db0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x7c>
 800175c:	4bb0      	ldr	r3, [pc, #704]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4baf      	ldr	r3, [pc, #700]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	0249      	lsls	r1, r1, #9
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e020      	b.n	80017ae <HAL_RCC_OscConfig+0xbe>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	23a0      	movs	r3, #160	; 0xa0
 8001772:	02db      	lsls	r3, r3, #11
 8001774:	429a      	cmp	r2, r3
 8001776:	d10e      	bne.n	8001796 <HAL_RCC_OscConfig+0xa6>
 8001778:	4ba9      	ldr	r3, [pc, #676]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4ba8      	ldr	r3, [pc, #672]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	02c9      	lsls	r1, r1, #11
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	4ba6      	ldr	r3, [pc, #664]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4ba5      	ldr	r3, [pc, #660]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0249      	lsls	r1, r1, #9
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e00b      	b.n	80017ae <HAL_RCC_OscConfig+0xbe>
 8001796:	4ba2      	ldr	r3, [pc, #648]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4ba1      	ldr	r3, [pc, #644]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800179c:	49a1      	ldr	r1, [pc, #644]	; (8001a24 <HAL_RCC_OscConfig+0x334>)
 800179e:	400a      	ands	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b9e      	ldr	r3, [pc, #632]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80017a8:	499f      	ldr	r1, [pc, #636]	; (8001a28 <HAL_RCC_OscConfig+0x338>)
 80017aa:	400a      	ands	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d014      	beq.n	80017e0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff fcd9 	bl	800116c <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fcd4 	bl	800116c <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e2ee      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	4b93      	ldr	r3, [pc, #588]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	029b      	lsls	r3, r3, #10
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xd0>
 80017de:	e015      	b.n	800180c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcc4 	bl	800116c <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ea:	f7ff fcbf 	bl	800116c <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e2d9      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fc:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	029b      	lsls	r3, r3, #10
 8001804:	4013      	ands	r3, r2
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0xfa>
 8001808:	e000      	b.n	800180c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d100      	bne.n	8001818 <HAL_RCC_OscConfig+0x128>
 8001816:	e099      	b.n	800194c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001818:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2238      	movs	r2, #56	; 0x38
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2203      	movs	r2, #3
 8001828:	4013      	ands	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b10      	cmp	r3, #16
 8001830:	d102      	bne.n	8001838 <HAL_RCC_OscConfig+0x148>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d002      	beq.n	800183e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d135      	bne.n	80018aa <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183e:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4013      	ands	r3, r2
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x166>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e2ac      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b72      	ldr	r3, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a74      	ldr	r2, [pc, #464]	; (8001a2c <HAL_RCC_OscConfig+0x33c>)
 800185c:	4013      	ands	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	021a      	lsls	r2, r3, #8
 8001866:	4b6e      	ldr	r3, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d112      	bne.n	8001898 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001872:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x340>)
 8001878:	4013      	ands	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001886:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0adb      	lsrs	r3, r3, #11
 800188c:	2207      	movs	r2, #7
 800188e:	4013      	ands	r3, r2
 8001890:	4a68      	ldr	r2, [pc, #416]	; (8001a34 <HAL_RCC_OscConfig+0x344>)
 8001892:	40da      	lsrs	r2, r3
 8001894:	4b68      	ldr	r3, [pc, #416]	; (8001a38 <HAL_RCC_OscConfig+0x348>)
 8001896:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <HAL_RCC_OscConfig+0x34c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0018      	movs	r0, r3
 800189e:	f7ff fc09 	bl	80010b4 <HAL_InitTick>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d051      	beq.n	800194a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e282      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d030      	beq.n	8001914 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_RCC_OscConfig+0x340>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018c6:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	0049      	lsls	r1, r1, #1
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fc4a 	bl	800116c <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fc45 	bl	800116c <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e25f      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f0:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x33c>)
 8001902:	4013      	ands	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	021a      	lsls	r2, r3, #8
 800190c:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	e01b      	b.n	800194c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800191a:	4949      	ldr	r1, [pc, #292]	; (8001a40 <HAL_RCC_OscConfig+0x350>)
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fc24 	bl	800116c <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fc1f 	bl	800116c <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e239      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4013      	ands	r3, r2
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x23a>
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2208      	movs	r2, #8
 8001952:	4013      	ands	r3, r2
 8001954:	d047      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	; 0x38
 800195c:	4013      	ands	r3, r2
 800195e:	2b18      	cmp	r3, #24
 8001960:	d10a      	bne.n	8001978 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001962:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d03c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2f6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d138      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e21b      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001982:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fbee 	bl	800116c <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff fbe9 	bl	800116c <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e203      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	2202      	movs	r2, #2
 80019ae:	4013      	ands	r3, r2
 80019b0:	d0f1      	beq.n	8001996 <HAL_RCC_OscConfig+0x2a6>
 80019b2:	e018      	b.n	80019e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80019b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	438a      	bics	r2, r1
 80019be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fbd4 	bl	800116c <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff fbcf 	bl	800116c <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1e9      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d1f1      	bne.n	80019ca <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2204      	movs	r2, #4
 80019ec:	4013      	ands	r3, r2
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x302>
 80019f0:	e0c6      	b.n	8001b80 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	231f      	movs	r3, #31
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2238      	movs	r2, #56	; 0x38
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d11e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x330>)
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x322>
 8001a10:	e0b6      	b.n	8001b80 <HAL_RCC_OscConfig+0x490>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d000      	beq.n	8001a1c <HAL_RCC_OscConfig+0x32c>
 8001a1a:	e0b1      	b.n	8001b80 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e1c7      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
 8001a20:	40021000 	.word	0x40021000
 8001a24:	fffeffff 	.word	0xfffeffff
 8001a28:	fffbffff 	.word	0xfffbffff
 8001a2c:	ffff80ff 	.word	0xffff80ff
 8001a30:	ffffc7ff 	.word	0xffffc7ff
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a44:	4bb8      	ldr	r3, [pc, #736]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	055b      	lsls	r3, r3, #21
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x364>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x366>
 8001a54:	2300      	movs	r3, #0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d011      	beq.n	8001a7e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4bb3      	ldr	r3, [pc, #716]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5e:	4bb2      	ldr	r3, [pc, #712]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0549      	lsls	r1, r1, #21
 8001a64:	430a      	orrs	r2, r1
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a68:	4baf      	ldr	r3, [pc, #700]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a76:	231f      	movs	r3, #31
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7e:	4bab      	ldr	r3, [pc, #684]	; (8001d2c <HAL_RCC_OscConfig+0x63c>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4013      	ands	r3, r2
 8001a88:	d11a      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a8a:	4ba8      	ldr	r3, [pc, #672]	; (8001d2c <HAL_RCC_OscConfig+0x63c>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4ba7      	ldr	r3, [pc, #668]	; (8001d2c <HAL_RCC_OscConfig+0x63c>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0049      	lsls	r1, r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fb68 	bl	800116c <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7ff fb63 	bl	800116c <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e17d      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab4:	4b9d      	ldr	r3, [pc, #628]	; (8001d2c <HAL_RCC_OscConfig+0x63c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4013      	ands	r3, r2
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3e6>
 8001ac8:	4b97      	ldr	r3, [pc, #604]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001acc:	4b96      	ldr	r3, [pc, #600]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x420>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x408>
 8001ade:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001ae0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae2:	4b91      	ldr	r3, [pc, #580]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aea:	4b8f      	ldr	r3, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aee:	4b8e      	ldr	r3, [pc, #568]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0x420>
 8001af8:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001afa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001afc:	4b8a      	ldr	r3, [pc, #552]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	438a      	bics	r2, r1
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b04:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b08:	4b87      	ldr	r3, [pc, #540]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d014      	beq.n	8001b42 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fb28 	bl	800116c <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b20:	e009      	b.n	8001b36 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff fb23 	bl	800116c <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4a80      	ldr	r2, [pc, #512]	; (8001d30 <HAL_RCC_OscConfig+0x640>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e13c      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b36:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x432>
 8001b40:	e013      	b.n	8001b6a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb13 	bl	800116c <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b4a:	e009      	b.n	8001b60 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fb0e 	bl	800116c <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	4a76      	ldr	r2, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x640>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e127      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b60:	4b71      	ldr	r3, [pc, #452]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b6a:	231f      	movs	r3, #31
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b78:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b7a:	496e      	ldr	r1, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x644>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	4013      	ands	r3, r2
 8001b88:	d039      	beq.n	8001bfe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01b      	beq.n	8001bca <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	03c9      	lsls	r1, r1, #15
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fae4 	bl	800116c <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001baa:	f7ff fadf 	bl	800116c <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0f9      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001bbc:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	041b      	lsls	r3, r3, #16
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x4ba>
 8001bc8:	e019      	b.n	8001bfe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bca:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001bd0:	4959      	ldr	r1, [pc, #356]	; (8001d38 <HAL_RCC_OscConfig+0x648>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fac9 	bl	800116c <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be0:	f7ff fac4 	bl	800116c <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0de      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d100      	bne.n	8001c08 <HAL_RCC_OscConfig+0x518>
 8001c06:	e0d2      	b.n	8001dae <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2238      	movs	r2, #56	; 0x38
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	d100      	bne.n	8001c16 <HAL_RCC_OscConfig+0x526>
 8001c14:	e081      	b.n	8001d1a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d156      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c24:	4945      	ldr	r1, [pc, #276]	; (8001d3c <HAL_RCC_OscConfig+0x64c>)
 8001c26:	400a      	ands	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fa9f 	bl	800116c <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff fa9a 	bl	800116c <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0b4      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	049b      	lsls	r3, r3, #18
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_RCC_OscConfig+0x650>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	0449      	lsls	r1, r1, #17
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0549      	lsls	r1, r1, #21
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fa63 	bl	800116c <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fa5e 	bl	800116c <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e078      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	049b      	lsls	r3, r3, #18
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x5bc>
 8001cca:	e070      	b.n	8001dae <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001cd2:	491a      	ldr	r1, [pc, #104]	; (8001d3c <HAL_RCC_OscConfig+0x64c>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001cde:	2103      	movs	r1, #3
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001cea:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_RCC_OscConfig+0x654>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fa3c 	bl	800116c <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff fa37 	bl	800116c <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e051      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x638>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	049b      	lsls	r3, r3, #18
 8001d14:	4013      	ands	r3, r2
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x60a>
 8001d18:	e049      	b.n	8001dae <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e044      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	00001388 	.word	0x00001388
 8001d34:	efffffff 	.word	0xefffffff
 8001d38:	ffbfffff 	.word	0xffbfffff
 8001d3c:	feffffff 	.word	0xfeffffff
 8001d40:	11c1808c 	.word	0x11c1808c
 8001d44:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x6c8>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2203      	movs	r2, #3
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d126      	bne.n	8001daa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2270      	movs	r2, #112	; 0x70
 8001d60:	401a      	ands	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d11f      	bne.n	8001daa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	23fe      	movs	r3, #254	; 0xfe
 8001d6e:	01db      	lsls	r3, r3, #7
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d116      	bne.n	8001daa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	23f8      	movs	r3, #248	; 0xf8
 8001d80:	039b      	lsls	r3, r3, #14
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d10e      	bne.n	8001daa <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	23e0      	movs	r3, #224	; 0xe0
 8001d90:	051b      	lsls	r3, r3, #20
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	0f5b      	lsrs	r3, r3, #29
 8001da0:	075a      	lsls	r2, r3, #29
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b008      	add	sp, #32
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0e9      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d91e      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b73      	ldr	r3, [pc, #460]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2207      	movs	r2, #7
 8001de4:	4393      	bics	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b70      	ldr	r3, [pc, #448]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001df0:	f7ff f9bc 	bl	800116c <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfa:	f7ff f9b7 	bl	800116c <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a6a      	ldr	r2, [pc, #424]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0ca      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2207      	movs	r2, #7
 8001e14:	4013      	ands	r3, r2
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d015      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d006      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e30:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	21e0      	movs	r1, #224	; 0xe0
 8001e38:	01c9      	lsls	r1, r1, #7
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4a5d      	ldr	r2, [pc, #372]	; (8001fb8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d057      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d12b      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e097      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	049b      	lsls	r3, r3, #18
 8001e84:	4013      	ands	r3, r2
 8001e86:	d11f      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e08b      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d113      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e07f      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d108      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e074      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e06d      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec8:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2207      	movs	r2, #7
 8001ece:	4393      	bics	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001edc:	f7ff f946 	bl	800116c <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7ff f941 	bl	800116c <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e054      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2238      	movs	r2, #56	; 0x38
 8001f00:	401a      	ands	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1ec      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2207      	movs	r2, #7
 8001f12:	4013      	ands	r3, r2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d21e      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	4393      	bics	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f2c:	f7ff f91e 	bl	800116c <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f34:	e009      	b.n	8001f4a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f36:	f7ff f919 	bl	800116c <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e02c      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4013      	ands	r3, r2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1ee      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_RCC_ClockConfig+0x200>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f76:	f000 f829 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f7a:	0001      	movs	r1, r0
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	220f      	movs	r2, #15
 8001f84:	401a      	ands	r2, r3
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_RCC_ClockConfig+0x204>)
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	58d3      	ldr	r3, [r2, r3]
 8001f8c:	221f      	movs	r2, #31
 8001f8e:	4013      	ands	r3, r2
 8001f90:	000a      	movs	r2, r1
 8001f92:	40da      	lsrs	r2, r3
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x208>)
 8001f96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x20c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff f889 	bl	80010b4 <HAL_InitTick>
 8001fa2:	0003      	movs	r3, r0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	00001388 	.word	0x00001388
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	fffff0ff 	.word	0xfffff0ff
 8001fbc:	ffff8fff 	.word	0xffff8fff
 8001fc0:	08002f5c 	.word	0x08002f5c
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2238      	movs	r2, #56	; 0x38
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d10f      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0adb      	lsrs	r3, r3, #11
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	0013      	movs	r3, r2
 8001fec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	4835      	ldr	r0, [pc, #212]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ff2:	f7fe f887 	bl	8000104 <__udivsi3>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e05d      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2238      	movs	r2, #56	; 0x38
 8002002:	4013      	ands	r3, r2
 8002004:	2b08      	cmp	r3, #8
 8002006:	d102      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCC_GetSysClockFreq+0x100>)
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e054      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2238      	movs	r2, #56	; 0x38
 8002014:	4013      	ands	r3, r2
 8002016:	2b10      	cmp	r3, #16
 8002018:	d138      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800201a:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2203      	movs	r2, #3
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	2207      	movs	r2, #7
 800202c:	4013      	ands	r3, r2
 800202e:	3301      	adds	r3, #1
 8002030:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d10d      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	4824      	ldr	r0, [pc, #144]	; (80020cc <HAL_RCC_GetSysClockFreq+0x100>)
 800203c:	f7fe f862 	bl	8000104 <__udivsi3>
 8002040:	0003      	movs	r3, r0
 8002042:	0019      	movs	r1, r3
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	227f      	movs	r2, #127	; 0x7f
 800204c:	4013      	ands	r3, r2
 800204e:	434b      	muls	r3, r1
 8002050:	617b      	str	r3, [r7, #20]
        break;
 8002052:	e00d      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	481c      	ldr	r0, [pc, #112]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002058:	f7fe f854 	bl	8000104 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	0019      	movs	r1, r3
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	227f      	movs	r2, #127	; 0x7f
 8002068:	4013      	ands	r3, r2
 800206a:	434b      	muls	r3, r1
 800206c:	617b      	str	r3, [r7, #20]
        break;
 800206e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0f5b      	lsrs	r3, r3, #29
 8002076:	2207      	movs	r2, #7
 8002078:	4013      	ands	r3, r2
 800207a:	3301      	adds	r3, #1
 800207c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	6978      	ldr	r0, [r7, #20]
 8002082:	f7fe f83f 	bl	8000104 <__udivsi3>
 8002086:	0003      	movs	r3, r0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e015      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2238      	movs	r2, #56	; 0x38
 8002092:	4013      	ands	r3, r2
 8002094:	2b20      	cmp	r3, #32
 8002096:	d103      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2238      	movs	r2, #56	; 0x38
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b18      	cmp	r3, #24
 80020aa:	d103      	bne.n	80020b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020ac:	23fa      	movs	r3, #250	; 0xfa
 80020ae:	01db      	lsls	r3, r3, #7
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e001      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020b8:	693b      	ldr	r3, [r7, #16]
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b006      	add	sp, #24
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40021000 	.word	0x40021000
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	007a1200 	.word	0x007a1200

080020d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0a8      	b.n	8002234 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	2382      	movs	r3, #130	; 0x82
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d009      	beq.n	800210a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	61da      	str	r2, [r3, #28]
 80020fc:	e005      	b.n	800210a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	225d      	movs	r2, #93	; 0x5d
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	225c      	movs	r2, #92	; 0x5c
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f7fe ff14 	bl	8000f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	225d      	movs	r2, #93	; 0x5d
 8002130:	2102      	movs	r1, #2
 8002132:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	438a      	bics	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	23e0      	movs	r3, #224	; 0xe0
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	429a      	cmp	r2, r3
 800214e:	d902      	bls.n	8002156 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e002      	b.n	800215c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	015b      	lsls	r3, r3, #5
 800215a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	23f0      	movs	r3, #240	; 0xf0
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	429a      	cmp	r2, r3
 8002166:	d008      	beq.n	800217a <HAL_SPI_Init+0xaa>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	23e0      	movs	r3, #224	; 0xe0
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	429a      	cmp	r2, r3
 8002172:	d002      	beq.n	800217a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	2382      	movs	r3, #130	; 0x82
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	2384      	movs	r3, #132	; 0x84
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	400b      	ands	r3, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2102      	movs	r1, #2
 8002196:	400b      	ands	r3, r1
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2101      	movs	r1, #1
 80021a0:	400b      	ands	r3, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6999      	ldr	r1, [r3, #24]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	400b      	ands	r3, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2138      	movs	r1, #56	; 0x38
 80021b6:	400b      	ands	r3, r1
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2180      	movs	r1, #128	; 0x80
 80021c0:	400b      	ands	r3, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	0011      	movs	r1, r2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	2204      	movs	r2, #4
 80021e0:	401a      	ands	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2110      	movs	r1, #16
 80021e8:	400b      	ands	r3, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	2108      	movs	r1, #8
 80021f2:	400b      	ands	r3, r1
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	23f0      	movs	r3, #240	; 0xf0
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	400b      	ands	r3, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	0011      	movs	r1, r2
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	015b      	lsls	r3, r3, #5
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4907      	ldr	r1, [pc, #28]	; (800223c <HAL_SPI_Init+0x16c>)
 8002220:	400a      	ands	r2, r1
 8002222:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	225d      	movs	r2, #93	; 0x5d
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b004      	add	sp, #16
 800223a:	bd80      	pop	{r7, pc}
 800223c:	fffff7ff 	.word	0xfffff7ff

08002240 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	1dbb      	adds	r3, r7, #6
 800224e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002250:	231f      	movs	r3, #31
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	225c      	movs	r2, #92	; 0x5c
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_SPI_Transmit+0x26>
 8002262:	2302      	movs	r3, #2
 8002264:	e140      	b.n	80024e8 <HAL_SPI_Transmit+0x2a8>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	225c      	movs	r2, #92	; 0x5c
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800226e:	f7fe ff7d 	bl	800116c <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002276:	2316      	movs	r3, #22
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	1dba      	adds	r2, r7, #6
 800227c:	8812      	ldrh	r2, [r2, #0]
 800227e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	225d      	movs	r2, #93	; 0x5d
 8002284:	5c9b      	ldrb	r3, [r3, r2]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d004      	beq.n	8002296 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800228c:	231f      	movs	r3, #31
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2202      	movs	r2, #2
 8002292:	701a      	strb	r2, [r3, #0]
    goto error;
 8002294:	e11d      	b.n	80024d2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_SPI_Transmit+0x64>
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80022a4:	231f      	movs	r3, #31
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80022ac:	e111      	b.n	80024d2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	225d      	movs	r2, #93	; 0x5d
 80022b2:	2103      	movs	r1, #3
 80022b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1dba      	adds	r2, r7, #6
 80022c6:	8812      	ldrh	r2, [r2, #0]
 80022c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1dba      	adds	r2, r7, #6
 80022ce:	8812      	ldrh	r2, [r2, #0]
 80022d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2244      	movs	r2, #68	; 0x44
 80022dc:	2100      	movs	r1, #0
 80022de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2246      	movs	r2, #70	; 0x46
 80022e4:	2100      	movs	r1, #0
 80022e6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d110      	bne.n	8002322 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	438a      	bics	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	01c9      	lsls	r1, r1, #7
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	4013      	ands	r3, r2
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d007      	beq.n	8002340 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2140      	movs	r1, #64	; 0x40
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	23e0      	movs	r3, #224	; 0xe0
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	429a      	cmp	r2, r3
 800234a:	d94e      	bls.n	80023ea <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_SPI_Transmit+0x11e>
 8002354:	2316      	movs	r3, #22
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d13f      	bne.n	80023de <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	1c9a      	adds	r2, r3, #2
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002382:	e02c      	b.n	80023de <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2202      	movs	r2, #2
 800238c:	4013      	ands	r3, r2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d112      	bne.n	80023b8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	1c9a      	adds	r2, r3, #2
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023b6:	e012      	b.n	80023de <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b8:	f7fe fed8 	bl	800116c <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d802      	bhi.n	80023ce <HAL_SPI_Transmit+0x18e>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_Transmit+0x194>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80023d4:	231f      	movs	r3, #31
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2203      	movs	r2, #3
 80023da:	701a      	strb	r2, [r3, #0]
          goto error;
 80023dc:	e079      	b.n	80024d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1cd      	bne.n	8002384 <HAL_SPI_Transmit+0x144>
 80023e8:	e04f      	b.n	800248a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_SPI_Transmit+0x1bc>
 80023f2:	2316      	movs	r3, #22
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d141      	bne.n	8002480 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002422:	e02d      	b.n	8002480 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d113      	bne.n	800245a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	330c      	adds	r3, #12
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002458:	e012      	b.n	8002480 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245a:	f7fe fe87 	bl	800116c <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d802      	bhi.n	8002470 <HAL_SPI_Transmit+0x230>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	d102      	bne.n	8002476 <HAL_SPI_Transmit+0x236>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002476:	231f      	movs	r3, #31
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2203      	movs	r2, #3
 800247c:	701a      	strb	r2, [r3, #0]
          goto error;
 800247e:	e028      	b.n	80024d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1cc      	bne.n	8002424 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	0018      	movs	r0, r3
 8002492:	f000 fce5 	bl	8002e60 <SPI_EndRxTxTransaction>
 8002496:	1e03      	subs	r3, r0, #0
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e000      	b.n	80024d2 <HAL_SPI_Transmit+0x292>
  }

error:
 80024d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	225d      	movs	r2, #93	; 0x5d
 80024d6:	2101      	movs	r1, #1
 80024d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	225c      	movs	r2, #92	; 0x5c
 80024de:	2100      	movs	r1, #0
 80024e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024e2:	231f      	movs	r3, #31
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b008      	add	sp, #32
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	1dbb      	adds	r3, r7, #6
 80024fe:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002500:	2317      	movs	r3, #23
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	2382      	movs	r3, #130	; 0x82
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	429a      	cmp	r2, r3
 8002512:	d113      	bne.n	800253c <HAL_SPI_Receive+0x4c>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10f      	bne.n	800253c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	225d      	movs	r2, #93	; 0x5d
 8002520:	2104      	movs	r1, #4
 8002522:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002524:	1dbb      	adds	r3, r7, #6
 8002526:	881c      	ldrh	r4, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	0023      	movs	r3, r4
 8002534:	f000 f928 	bl	8002788 <HAL_SPI_TransmitReceive>
 8002538:	0003      	movs	r3, r0
 800253a:	e11c      	b.n	8002776 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	225c      	movs	r2, #92	; 0x5c
 8002540:	5c9b      	ldrb	r3, [r3, r2]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_SPI_Receive+0x5a>
 8002546:	2302      	movs	r3, #2
 8002548:	e115      	b.n	8002776 <HAL_SPI_Receive+0x286>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	225c      	movs	r2, #92	; 0x5c
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002552:	f7fe fe0b 	bl	800116c <HAL_GetTick>
 8002556:	0003      	movs	r3, r0
 8002558:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	225d      	movs	r2, #93	; 0x5d
 800255e:	5c9b      	ldrb	r3, [r3, r2]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d004      	beq.n	8002570 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002566:	2317      	movs	r3, #23
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2202      	movs	r2, #2
 800256c:	701a      	strb	r2, [r3, #0]
    goto error;
 800256e:	e0f7      	b.n	8002760 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_SPI_Receive+0x8e>
 8002576:	1dbb      	adds	r3, r7, #6
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800257e:	2317      	movs	r3, #23
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
    goto error;
 8002586:	e0eb      	b.n	8002760 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	225d      	movs	r2, #93	; 0x5d
 800258c:	2104      	movs	r1, #4
 800258e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1dba      	adds	r2, r7, #6
 80025a0:	2144      	movs	r1, #68	; 0x44
 80025a2:	8812      	ldrh	r2, [r2, #0]
 80025a4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1dba      	adds	r2, r7, #6
 80025aa:	2146      	movs	r1, #70	; 0x46
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	23e0      	movs	r3, #224	; 0xe0
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d908      	bls.n	80025ec <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4966      	ldr	r1, [pc, #408]	; (8002780 <HAL_SPI_Receive+0x290>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	e008      	b.n	80025fe <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2180      	movs	r1, #128	; 0x80
 80025f8:	0149      	lsls	r1, r1, #5
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	429a      	cmp	r2, r3
 8002608:	d10f      	bne.n	800262a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2140      	movs	r1, #64	; 0x40
 8002616:	438a      	bics	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4957      	ldr	r1, [pc, #348]	; (8002784 <HAL_SPI_Receive+0x294>)
 8002626:	400a      	ands	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	4013      	ands	r3, r2
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d007      	beq.n	8002648 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2140      	movs	r1, #64	; 0x40
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	23e0      	movs	r3, #224	; 0xe0
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	429a      	cmp	r2, r3
 8002652:	d900      	bls.n	8002656 <HAL_SPI_Receive+0x166>
 8002654:	e069      	b.n	800272a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002656:	e031      	b.n	80026bc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2201      	movs	r2, #1
 8002660:	4013      	ands	r3, r2
 8002662:	2b01      	cmp	r3, #1
 8002664:	d117      	bne.n	8002696 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	001a      	movs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2246      	movs	r2, #70	; 0x46
 8002686:	5a9b      	ldrh	r3, [r3, r2]
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b299      	uxth	r1, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2246      	movs	r2, #70	; 0x46
 8002692:	5299      	strh	r1, [r3, r2]
 8002694:	e012      	b.n	80026bc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002696:	f7fe fd69 	bl	800116c <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d802      	bhi.n	80026ac <HAL_SPI_Receive+0x1bc>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_Receive+0x1c2>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d104      	bne.n	80026bc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80026b2:	2317      	movs	r3, #23
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2203      	movs	r2, #3
 80026b8:	701a      	strb	r2, [r3, #0]
          goto error;
 80026ba:	e051      	b.n	8002760 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2246      	movs	r2, #70	; 0x46
 80026c0:	5a9b      	ldrh	r3, [r3, r2]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1c7      	bne.n	8002658 <HAL_SPI_Receive+0x168>
 80026c8:	e035      	b.n	8002736 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d115      	bne.n	8002704 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	b292      	uxth	r2, r2
 80026e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	1c9a      	adds	r2, r3, #2
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2246      	movs	r2, #70	; 0x46
 80026f4:	5a9b      	ldrh	r3, [r3, r2]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b299      	uxth	r1, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2246      	movs	r2, #70	; 0x46
 8002700:	5299      	strh	r1, [r3, r2]
 8002702:	e012      	b.n	800272a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002704:	f7fe fd32 	bl	800116c <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d802      	bhi.n	800271a <HAL_SPI_Receive+0x22a>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	d102      	bne.n	8002720 <HAL_SPI_Receive+0x230>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002720:	2317      	movs	r3, #23
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2203      	movs	r2, #3
 8002726:	701a      	strb	r2, [r3, #0]
          goto error;
 8002728:	e01a      	b.n	8002760 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2246      	movs	r2, #70	; 0x46
 800272e:	5a9b      	ldrh	r3, [r3, r2]
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1c9      	bne.n	80026ca <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fb31 	bl	8002da4 <SPI_EndRxTransaction>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002754:	2317      	movs	r3, #23
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e000      	b.n	8002760 <HAL_SPI_Receive+0x270>
  }

error :
 800275e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	225d      	movs	r2, #93	; 0x5d
 8002764:	2101      	movs	r1, #1
 8002766:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	225c      	movs	r2, #92	; 0x5c
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002770:	2317      	movs	r3, #23
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b007      	add	sp, #28
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	ffffefff 	.word	0xffffefff
 8002784:	ffffbfff 	.word	0xffffbfff

08002788 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	001a      	movs	r2, r3
 8002796:	1cbb      	adds	r3, r7, #2
 8002798:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800279a:	2301      	movs	r3, #1
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800279e:	2323      	movs	r3, #35	; 0x23
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	225c      	movs	r2, #92	; 0x5c
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x2c>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e1b5      	b.n	8002b20 <HAL_SPI_TransmitReceive+0x398>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	225c      	movs	r2, #92	; 0x5c
 80027b8:	2101      	movs	r1, #1
 80027ba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027bc:	f7fe fcd6 	bl	800116c <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c4:	201b      	movs	r0, #27
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	215d      	movs	r1, #93	; 0x5d
 80027cc:	5c52      	ldrb	r2, [r2, r1]
 80027ce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80027d6:	2312      	movs	r3, #18
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	1cba      	adds	r2, r7, #2
 80027dc:	8812      	ldrh	r2, [r2, #0]
 80027de:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027e0:	183b      	adds	r3, r7, r0
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d011      	beq.n	800280c <HAL_SPI_TransmitReceive+0x84>
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	2382      	movs	r3, #130	; 0x82
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d107      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x7a>
 80027fa:	183b      	adds	r3, r7, r0
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d004      	beq.n	800280c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002802:	2323      	movs	r3, #35	; 0x23
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
    goto error;
 800280a:	e17e      	b.n	8002b0a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_SPI_TransmitReceive+0x98>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_SPI_TransmitReceive+0x98>
 8002818:	1cbb      	adds	r3, r7, #2
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002820:	2323      	movs	r3, #35	; 0x23
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
    goto error;
 8002828:	e16f      	b.n	8002b0a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	225d      	movs	r2, #93	; 0x5d
 800282e:	5c9b      	ldrb	r3, [r3, r2]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b04      	cmp	r3, #4
 8002834:	d003      	beq.n	800283e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	225d      	movs	r2, #93	; 0x5d
 800283a:	2105      	movs	r1, #5
 800283c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1cba      	adds	r2, r7, #2
 800284e:	2146      	movs	r1, #70	; 0x46
 8002850:	8812      	ldrh	r2, [r2, #0]
 8002852:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1cba      	adds	r2, r7, #2
 8002858:	2144      	movs	r1, #68	; 0x44
 800285a:	8812      	ldrh	r2, [r2, #0]
 800285c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1cba      	adds	r2, r7, #2
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1cba      	adds	r2, r7, #2
 8002870:	8812      	ldrh	r2, [r2, #0]
 8002872:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	23e0      	movs	r3, #224	; 0xe0
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	429a      	cmp	r2, r3
 800288a:	d908      	bls.n	800289e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	49a4      	ldr	r1, [pc, #656]	; (8002b28 <HAL_SPI_TransmitReceive+0x3a0>)
 8002898:	400a      	ands	r2, r1
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	e008      	b.n	80028b0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	0149      	lsls	r1, r1, #5
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d007      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	23e0      	movs	r3, #224	; 0xe0
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d800      	bhi.n	80028dc <HAL_SPI_TransmitReceive+0x154>
 80028da:	e07f      	b.n	80029dc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x168>
 80028e4:	2312      	movs	r3, #18
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d000      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x168>
 80028ee:	e069      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	881a      	ldrh	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002914:	e056      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d11b      	bne.n	800295c <HAL_SPI_TransmitReceive+0x1d4>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_SPI_TransmitReceive+0x1d4>
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	d113      	bne.n	800295c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	2b01      	cmp	r3, #1
 8002968:	d11c      	bne.n	80029a4 <HAL_SPI_TransmitReceive+0x21c>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2246      	movs	r2, #70	; 0x46
 800296e:	5a9b      	ldrh	r3, [r3, r2]
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	b292      	uxth	r2, r2
 8002982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	1c9a      	adds	r2, r3, #2
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2246      	movs	r2, #70	; 0x46
 8002992:	5a9b      	ldrh	r3, [r3, r2]
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b299      	uxth	r1, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2246      	movs	r2, #70	; 0x46
 800299e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a0:	2301      	movs	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029a4:	f7fe fbe2 	bl	800116c <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d807      	bhi.n	80029c4 <HAL_SPI_TransmitReceive+0x23c>
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	3301      	adds	r3, #1
 80029b8:	d004      	beq.n	80029c4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80029ba:	2323      	movs	r3, #35	; 0x23
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2203      	movs	r2, #3
 80029c0:	701a      	strb	r2, [r3, #0]
        goto error;
 80029c2:	e0a2      	b.n	8002b0a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1a3      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x18e>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2246      	movs	r2, #70	; 0x46
 80029d2:	5a9b      	ldrh	r3, [r3, r2]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d19d      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x18e>
 80029da:	e085      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x268>
 80029e4:	2312      	movs	r3, #18
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d000      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x268>
 80029ee:	e070      	b.n	8002ad2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a16:	e05c      	b.n	8002ad2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d11c      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x2d8>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_SPI_TransmitReceive+0x2d8>
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d114      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2201      	movs	r2, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d11e      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x324>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2246      	movs	r2, #70	; 0x46
 8002a72:	5a9b      	ldrh	r3, [r3, r2]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d018      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	001a      	movs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2246      	movs	r2, #70	; 0x46
 8002a9a:	5a9b      	ldrh	r3, [r3, r2]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b299      	uxth	r1, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2246      	movs	r2, #70	; 0x46
 8002aa6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aac:	f7fe fb5e 	bl	800116c <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d802      	bhi.n	8002ac2 <HAL_SPI_TransmitReceive+0x33a>
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	3301      	adds	r3, #1
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x340>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002ac8:	2323      	movs	r3, #35	; 0x23
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	2203      	movs	r2, #3
 8002ace:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ad0:	e01b      	b.n	8002b0a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d19d      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x290>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2246      	movs	r2, #70	; 0x46
 8002ae0:	5a9b      	ldrh	r3, [r3, r2]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d197      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f9b6 	bl	8002e60 <SPI_EndRxTxTransaction>
 8002af4:	1e03      	subs	r3, r0, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002af8:	2323      	movs	r3, #35	; 0x23
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	661a      	str	r2, [r3, #96]	; 0x60
 8002b06:	e000      	b.n	8002b0a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002b08:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	225d      	movs	r2, #93	; 0x5d
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	225c      	movs	r2, #92	; 0x5c
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b1a:	2323      	movs	r3, #35	; 0x23
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	781b      	ldrb	r3, [r3, #0]
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b00a      	add	sp, #40	; 0x28
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	ffffefff 	.word	0xffffefff

08002b2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	225d      	movs	r2, #93	; 0x5d
 8002b38:	5c9b      	ldrb	r3, [r3, r2]
 8002b3a:	b2db      	uxtb	r3, r3
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b54:	f7fe fb0a 	bl	800116c <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	18d3      	adds	r3, r2, r3
 8002b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b64:	f7fe fb02 	bl	800116c <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	015b      	lsls	r3, r3, #5
 8002b72:	0d1b      	lsrs	r3, r3, #20
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	4353      	muls	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7a:	e058      	b.n	8002c2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	d055      	beq.n	8002c2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b82:	f7fe faf3 	bl	800116c <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d902      	bls.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d142      	bne.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	21e0      	movs	r1, #224	; 0xe0
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	2382      	movs	r3, #130	; 0x82
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d113      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0x98>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d005      	beq.n	8002bcc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d107      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2140      	movs	r1, #64	; 0x40
 8002bd8:	438a      	bics	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	019b      	lsls	r3, r3, #6
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d110      	bne.n	8002c0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	491a      	ldr	r1, [pc, #104]	; (8002c5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	0189      	lsls	r1, r1, #6
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	225d      	movs	r2, #93	; 0x5d
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	225c      	movs	r2, #92	; 0x5c
 8002c16:	2100      	movs	r1, #0
 8002c18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e017      	b.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	425a      	negs	r2, r3
 8002c3e:	4153      	adcs	r3, r2
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	001a      	movs	r2, r3
 8002c44:	1dfb      	adds	r3, r7, #7
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d197      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b008      	add	sp, #32
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	ffffdfff 	.word	0xffffdfff

08002c60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c6e:	2317      	movs	r3, #23
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c76:	f7fe fa79 	bl	800116c <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	18d3      	adds	r3, r2, r3
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002c86:	f7fe fa71 	bl	800116c <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	330c      	adds	r3, #12
 8002c94:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	00da      	lsls	r2, r3, #3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	0d1b      	lsrs	r3, r3, #20
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca8:	4353      	muls	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cac:	e068      	b.n	8002d80 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	23c0      	movs	r3, #192	; 0xc0
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10a      	bne.n	8002cce <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	2117      	movs	r1, #23
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	d055      	beq.n	8002d80 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cd4:	f7fe fa4a 	bl	800116c <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d902      	bls.n	8002cea <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d142      	bne.n	8002d70 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	21e0      	movs	r1, #224	; 0xe0
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2382      	movs	r3, #130	; 0x82
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d113      	bne.n	8002d2e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d005      	beq.n	8002d1e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d107      	bne.n	8002d2e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2140      	movs	r1, #64	; 0x40
 8002d2a:	438a      	bics	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d110      	bne.n	8002d5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4916      	ldr	r1, [pc, #88]	; (8002da0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0189      	lsls	r1, r1, #6
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	225d      	movs	r2, #93	; 0x5d
 8002d60:	2101      	movs	r1, #1
 8002d62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	225c      	movs	r2, #92	; 0x5c
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e010      	b.n	8002d92 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d18e      	bne.n	8002cae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b00a      	add	sp, #40	; 0x28
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	ffffdfff 	.word	0xffffdfff

08002da4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	2382      	movs	r3, #130	; 0x82
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d113      	bne.n	8002de4 <SPI_EndRxTransaction+0x40>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d005      	beq.n	8002dd4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2140      	movs	r1, #64	; 0x40
 8002de0:	438a      	bics	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	0013      	movs	r3, r2
 8002dee:	2200      	movs	r2, #0
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	f7ff fea7 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d007      	beq.n	8002e0a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	2220      	movs	r2, #32
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e026      	b.n	8002e58 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	2382      	movs	r3, #130	; 0x82
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d11f      	bne.n	8002e56 <SPI_EndRxTransaction+0xb2>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d005      	beq.n	8002e2e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d113      	bne.n	8002e56 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	23c0      	movs	r3, #192	; 0xc0
 8002e32:	00d9      	lsls	r1, r3, #3
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f7ff ff0f 	bl	8002c60 <SPI_WaitFifoStateUntilTimeout>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d007      	beq.n	8002e56 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e000      	b.n	8002e58 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	23c0      	movs	r3, #192	; 0xc0
 8002e70:	0159      	lsls	r1, r3, #5
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	0013      	movs	r3, r2
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f7ff fef0 	bl	8002c60 <SPI_WaitFifoStateUntilTimeout>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d007      	beq.n	8002e94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	2220      	movs	r2, #32
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e027      	b.n	8002ee4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	0013      	movs	r3, r2
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	f7ff fe4f 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d007      	beq.n	8002eba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eae:	2220      	movs	r2, #32
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e014      	b.n	8002ee4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	23c0      	movs	r3, #192	; 0xc0
 8002ebe:	00d9      	lsls	r1, r3, #3
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f7ff fec9 	bl	8002c60 <SPI_WaitFifoStateUntilTimeout>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d007      	beq.n	8002ee2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e000      	b.n	8002ee4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	2600      	movs	r6, #0
 8002ef0:	4d0c      	ldr	r5, [pc, #48]	; (8002f24 <__libc_init_array+0x38>)
 8002ef2:	4c0d      	ldr	r4, [pc, #52]	; (8002f28 <__libc_init_array+0x3c>)
 8002ef4:	1b64      	subs	r4, r4, r5
 8002ef6:	10a4      	asrs	r4, r4, #2
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	2600      	movs	r6, #0
 8002efe:	f000 f821 	bl	8002f44 <_init>
 8002f02:	4d0a      	ldr	r5, [pc, #40]	; (8002f2c <__libc_init_array+0x40>)
 8002f04:	4c0a      	ldr	r4, [pc, #40]	; (8002f30 <__libc_init_array+0x44>)
 8002f06:	1b64      	subs	r4, r4, r5
 8002f08:	10a4      	asrs	r4, r4, #2
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	00b3      	lsls	r3, r6, #2
 8002f12:	58eb      	ldr	r3, [r5, r3]
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	00b3      	lsls	r3, r6, #2
 8002f1c:	58eb      	ldr	r3, [r5, r3]
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08002f9c 	.word	0x08002f9c
 8002f28:	08002f9c 	.word	0x08002f9c
 8002f2c:	08002f9c 	.word	0x08002f9c
 8002f30:	08002fa0 	.word	0x08002fa0

08002f34 <memset>:
 8002f34:	0003      	movs	r3, r0
 8002f36:	1882      	adds	r2, r0, r2
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <memset+0xa>
 8002f3c:	4770      	bx	lr
 8002f3e:	7019      	strb	r1, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	e7f9      	b.n	8002f38 <memset+0x4>

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
