
motor-cc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004948  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08004b04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08004b04  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e23b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb6  00000000  00000000  0002e26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00030f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be67  00000000  00000000  00031bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6bf  00000000  00000000  0004da57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba63e  00000000  00000000  0005c116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116754  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000327c  00000000  00000000  001167a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080049ec 	.word	0x080049ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080049ec 	.word	0x080049ec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_dmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	4698      	mov	r8, r3
 800022a:	030c      	lsls	r4, r1, #12
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	0006      	movs	r6, r0
 8000230:	4692      	mov	sl, r2
 8000232:	b087      	sub	sp, #28
 8000234:	0b24      	lsrs	r4, r4, #12
 8000236:	0d5b      	lsrs	r3, r3, #21
 8000238:	0fcf      	lsrs	r7, r1, #31
 800023a:	2b00      	cmp	r3, #0
 800023c:	d06c      	beq.n	8000318 <__aeabi_dmul+0xfc>
 800023e:	4add      	ldr	r2, [pc, #884]	; (80005b4 <__aeabi_dmul+0x398>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d100      	bne.n	8000246 <__aeabi_dmul+0x2a>
 8000244:	e086      	b.n	8000354 <__aeabi_dmul+0x138>
 8000246:	0f42      	lsrs	r2, r0, #29
 8000248:	00e4      	lsls	r4, r4, #3
 800024a:	4314      	orrs	r4, r2
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	0412      	lsls	r2, r2, #16
 8000250:	4314      	orrs	r4, r2
 8000252:	4ad9      	ldr	r2, [pc, #868]	; (80005b8 <__aeabi_dmul+0x39c>)
 8000254:	00c5      	lsls	r5, r0, #3
 8000256:	4694      	mov	ip, r2
 8000258:	4463      	add	r3, ip
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	4699      	mov	r9, r3
 8000260:	469b      	mov	fp, r3
 8000262:	4643      	mov	r3, r8
 8000264:	4642      	mov	r2, r8
 8000266:	031e      	lsls	r6, r3, #12
 8000268:	0fd2      	lsrs	r2, r2, #31
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4650      	mov	r0, sl
 800026e:	4690      	mov	r8, r2
 8000270:	0b36      	lsrs	r6, r6, #12
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	d100      	bne.n	8000278 <__aeabi_dmul+0x5c>
 8000276:	e078      	b.n	800036a <__aeabi_dmul+0x14e>
 8000278:	4ace      	ldr	r2, [pc, #824]	; (80005b4 <__aeabi_dmul+0x398>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d01d      	beq.n	80002ba <__aeabi_dmul+0x9e>
 800027e:	49ce      	ldr	r1, [pc, #824]	; (80005b8 <__aeabi_dmul+0x39c>)
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	468c      	mov	ip, r1
 8000284:	9900      	ldr	r1, [sp, #0]
 8000286:	4463      	add	r3, ip
 8000288:	00f6      	lsls	r6, r6, #3
 800028a:	468c      	mov	ip, r1
 800028c:	4316      	orrs	r6, r2
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	449c      	add	ip, r3
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4663      	mov	r3, ip
 8000296:	4316      	orrs	r6, r2
 8000298:	00c2      	lsls	r2, r0, #3
 800029a:	2000      	movs	r0, #0
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	9900      	ldr	r1, [sp, #0]
 80002a0:	4643      	mov	r3, r8
 80002a2:	3101      	adds	r1, #1
 80002a4:	468c      	mov	ip, r1
 80002a6:	4649      	mov	r1, r9
 80002a8:	407b      	eors	r3, r7
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	290f      	cmp	r1, #15
 80002ae:	d900      	bls.n	80002b2 <__aeabi_dmul+0x96>
 80002b0:	e07e      	b.n	80003b0 <__aeabi_dmul+0x194>
 80002b2:	4bc2      	ldr	r3, [pc, #776]	; (80005bc <__aeabi_dmul+0x3a0>)
 80002b4:	0089      	lsls	r1, r1, #2
 80002b6:	5859      	ldr	r1, [r3, r1]
 80002b8:	468f      	mov	pc, r1
 80002ba:	4652      	mov	r2, sl
 80002bc:	9b00      	ldr	r3, [sp, #0]
 80002be:	4332      	orrs	r2, r6
 80002c0:	d000      	beq.n	80002c4 <__aeabi_dmul+0xa8>
 80002c2:	e156      	b.n	8000572 <__aeabi_dmul+0x356>
 80002c4:	49bb      	ldr	r1, [pc, #748]	; (80005b4 <__aeabi_dmul+0x398>)
 80002c6:	2600      	movs	r6, #0
 80002c8:	468c      	mov	ip, r1
 80002ca:	4463      	add	r3, ip
 80002cc:	4649      	mov	r1, r9
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2302      	movs	r3, #2
 80002d2:	4319      	orrs	r1, r3
 80002d4:	4689      	mov	r9, r1
 80002d6:	2002      	movs	r0, #2
 80002d8:	e7e1      	b.n	800029e <__aeabi_dmul+0x82>
 80002da:	4643      	mov	r3, r8
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	0034      	movs	r4, r6
 80002e0:	0015      	movs	r5, r2
 80002e2:	4683      	mov	fp, r0
 80002e4:	465b      	mov	r3, fp
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d05e      	beq.n	80003a8 <__aeabi_dmul+0x18c>
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	d100      	bne.n	80002f0 <__aeabi_dmul+0xd4>
 80002ee:	e1f3      	b.n	80006d8 <__aeabi_dmul+0x4bc>
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d000      	beq.n	80002f6 <__aeabi_dmul+0xda>
 80002f4:	e118      	b.n	8000528 <__aeabi_dmul+0x30c>
 80002f6:	2200      	movs	r2, #0
 80002f8:	2400      	movs	r4, #0
 80002fa:	2500      	movs	r5, #0
 80002fc:	9b01      	ldr	r3, [sp, #4]
 80002fe:	0512      	lsls	r2, r2, #20
 8000300:	4322      	orrs	r2, r4
 8000302:	07db      	lsls	r3, r3, #31
 8000304:	431a      	orrs	r2, r3
 8000306:	0028      	movs	r0, r5
 8000308:	0011      	movs	r1, r2
 800030a:	b007      	add	sp, #28
 800030c:	bcf0      	pop	{r4, r5, r6, r7}
 800030e:	46bb      	mov	fp, r7
 8000310:	46b2      	mov	sl, r6
 8000312:	46a9      	mov	r9, r5
 8000314:	46a0      	mov	r8, r4
 8000316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000318:	0025      	movs	r5, r4
 800031a:	4305      	orrs	r5, r0
 800031c:	d100      	bne.n	8000320 <__aeabi_dmul+0x104>
 800031e:	e141      	b.n	80005a4 <__aeabi_dmul+0x388>
 8000320:	2c00      	cmp	r4, #0
 8000322:	d100      	bne.n	8000326 <__aeabi_dmul+0x10a>
 8000324:	e1ad      	b.n	8000682 <__aeabi_dmul+0x466>
 8000326:	0020      	movs	r0, r4
 8000328:	f000 fa9c 	bl	8000864 <__clzsi2>
 800032c:	0001      	movs	r1, r0
 800032e:	0002      	movs	r2, r0
 8000330:	390b      	subs	r1, #11
 8000332:	231d      	movs	r3, #29
 8000334:	0010      	movs	r0, r2
 8000336:	1a5b      	subs	r3, r3, r1
 8000338:	0031      	movs	r1, r6
 800033a:	0035      	movs	r5, r6
 800033c:	3808      	subs	r0, #8
 800033e:	4084      	lsls	r4, r0
 8000340:	40d9      	lsrs	r1, r3
 8000342:	4085      	lsls	r5, r0
 8000344:	430c      	orrs	r4, r1
 8000346:	489e      	ldr	r0, [pc, #632]	; (80005c0 <__aeabi_dmul+0x3a4>)
 8000348:	1a83      	subs	r3, r0, r2
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	4699      	mov	r9, r3
 8000350:	469b      	mov	fp, r3
 8000352:	e786      	b.n	8000262 <__aeabi_dmul+0x46>
 8000354:	0005      	movs	r5, r0
 8000356:	4325      	orrs	r5, r4
 8000358:	d000      	beq.n	800035c <__aeabi_dmul+0x140>
 800035a:	e11c      	b.n	8000596 <__aeabi_dmul+0x37a>
 800035c:	2208      	movs	r2, #8
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2302      	movs	r3, #2
 8000362:	2400      	movs	r4, #0
 8000364:	4691      	mov	r9, r2
 8000366:	469b      	mov	fp, r3
 8000368:	e77b      	b.n	8000262 <__aeabi_dmul+0x46>
 800036a:	4652      	mov	r2, sl
 800036c:	4332      	orrs	r2, r6
 800036e:	d100      	bne.n	8000372 <__aeabi_dmul+0x156>
 8000370:	e10a      	b.n	8000588 <__aeabi_dmul+0x36c>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_dmul+0x15c>
 8000376:	e176      	b.n	8000666 <__aeabi_dmul+0x44a>
 8000378:	0030      	movs	r0, r6
 800037a:	f000 fa73 	bl	8000864 <__clzsi2>
 800037e:	0002      	movs	r2, r0
 8000380:	3a0b      	subs	r2, #11
 8000382:	231d      	movs	r3, #29
 8000384:	0001      	movs	r1, r0
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	3908      	subs	r1, #8
 800038c:	40da      	lsrs	r2, r3
 800038e:	408e      	lsls	r6, r1
 8000390:	4316      	orrs	r6, r2
 8000392:	4652      	mov	r2, sl
 8000394:	408a      	lsls	r2, r1
 8000396:	9b00      	ldr	r3, [sp, #0]
 8000398:	4989      	ldr	r1, [pc, #548]	; (80005c0 <__aeabi_dmul+0x3a4>)
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	0003      	movs	r3, r0
 800039e:	468c      	mov	ip, r1
 80003a0:	4463      	add	r3, ip
 80003a2:	2000      	movs	r0, #0
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e77a      	b.n	800029e <__aeabi_dmul+0x82>
 80003a8:	2400      	movs	r4, #0
 80003aa:	2500      	movs	r5, #0
 80003ac:	4a81      	ldr	r2, [pc, #516]	; (80005b4 <__aeabi_dmul+0x398>)
 80003ae:	e7a5      	b.n	80002fc <__aeabi_dmul+0xe0>
 80003b0:	0c2f      	lsrs	r7, r5, #16
 80003b2:	042d      	lsls	r5, r5, #16
 80003b4:	0c2d      	lsrs	r5, r5, #16
 80003b6:	002b      	movs	r3, r5
 80003b8:	0c11      	lsrs	r1, r2, #16
 80003ba:	0412      	lsls	r2, r2, #16
 80003bc:	0c12      	lsrs	r2, r2, #16
 80003be:	4353      	muls	r3, r2
 80003c0:	4698      	mov	r8, r3
 80003c2:	0013      	movs	r3, r2
 80003c4:	0028      	movs	r0, r5
 80003c6:	437b      	muls	r3, r7
 80003c8:	4699      	mov	r9, r3
 80003ca:	4348      	muls	r0, r1
 80003cc:	4448      	add	r0, r9
 80003ce:	4683      	mov	fp, r0
 80003d0:	4640      	mov	r0, r8
 80003d2:	000b      	movs	r3, r1
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4682      	mov	sl, r0
 80003d8:	4658      	mov	r0, fp
 80003da:	437b      	muls	r3, r7
 80003dc:	4450      	add	r0, sl
 80003de:	9302      	str	r3, [sp, #8]
 80003e0:	4581      	cmp	r9, r0
 80003e2:	d906      	bls.n	80003f2 <__aeabi_dmul+0x1d6>
 80003e4:	469a      	mov	sl, r3
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	025b      	lsls	r3, r3, #9
 80003ea:	4699      	mov	r9, r3
 80003ec:	44ca      	add	sl, r9
 80003ee:	4653      	mov	r3, sl
 80003f0:	9302      	str	r3, [sp, #8]
 80003f2:	0c03      	lsrs	r3, r0, #16
 80003f4:	469b      	mov	fp, r3
 80003f6:	4643      	mov	r3, r8
 80003f8:	041b      	lsls	r3, r3, #16
 80003fa:	0400      	lsls	r0, r0, #16
 80003fc:	0c1b      	lsrs	r3, r3, #16
 80003fe:	4698      	mov	r8, r3
 8000400:	0003      	movs	r3, r0
 8000402:	4443      	add	r3, r8
 8000404:	9304      	str	r3, [sp, #16]
 8000406:	0c33      	lsrs	r3, r6, #16
 8000408:	4699      	mov	r9, r3
 800040a:	002b      	movs	r3, r5
 800040c:	0436      	lsls	r6, r6, #16
 800040e:	0c36      	lsrs	r6, r6, #16
 8000410:	4373      	muls	r3, r6
 8000412:	4698      	mov	r8, r3
 8000414:	0033      	movs	r3, r6
 8000416:	437b      	muls	r3, r7
 8000418:	469a      	mov	sl, r3
 800041a:	464b      	mov	r3, r9
 800041c:	435d      	muls	r5, r3
 800041e:	435f      	muls	r7, r3
 8000420:	4643      	mov	r3, r8
 8000422:	4455      	add	r5, sl
 8000424:	0c18      	lsrs	r0, r3, #16
 8000426:	1940      	adds	r0, r0, r5
 8000428:	4582      	cmp	sl, r0
 800042a:	d903      	bls.n	8000434 <__aeabi_dmul+0x218>
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	025b      	lsls	r3, r3, #9
 8000430:	469a      	mov	sl, r3
 8000432:	4457      	add	r7, sl
 8000434:	0c05      	lsrs	r5, r0, #16
 8000436:	19eb      	adds	r3, r5, r7
 8000438:	9305      	str	r3, [sp, #20]
 800043a:	4643      	mov	r3, r8
 800043c:	041d      	lsls	r5, r3, #16
 800043e:	0c2d      	lsrs	r5, r5, #16
 8000440:	0400      	lsls	r0, r0, #16
 8000442:	1940      	adds	r0, r0, r5
 8000444:	0c25      	lsrs	r5, r4, #16
 8000446:	0424      	lsls	r4, r4, #16
 8000448:	0c24      	lsrs	r4, r4, #16
 800044a:	0027      	movs	r7, r4
 800044c:	4357      	muls	r7, r2
 800044e:	436a      	muls	r2, r5
 8000450:	4690      	mov	r8, r2
 8000452:	002a      	movs	r2, r5
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469a      	mov	sl, r3
 8000458:	434a      	muls	r2, r1
 800045a:	4361      	muls	r1, r4
 800045c:	4441      	add	r1, r8
 800045e:	4451      	add	r1, sl
 8000460:	4483      	add	fp, r0
 8000462:	4588      	cmp	r8, r1
 8000464:	d903      	bls.n	800046e <__aeabi_dmul+0x252>
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	025b      	lsls	r3, r3, #9
 800046a:	4698      	mov	r8, r3
 800046c:	4442      	add	r2, r8
 800046e:	043f      	lsls	r7, r7, #16
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	0c3f      	lsrs	r7, r7, #16
 8000474:	0409      	lsls	r1, r1, #16
 8000476:	19c9      	adds	r1, r1, r7
 8000478:	0027      	movs	r7, r4
 800047a:	4698      	mov	r8, r3
 800047c:	464b      	mov	r3, r9
 800047e:	4377      	muls	r7, r6
 8000480:	435c      	muls	r4, r3
 8000482:	436e      	muls	r6, r5
 8000484:	435d      	muls	r5, r3
 8000486:	0c3b      	lsrs	r3, r7, #16
 8000488:	4699      	mov	r9, r3
 800048a:	19a4      	adds	r4, r4, r6
 800048c:	444c      	add	r4, r9
 800048e:	4442      	add	r2, r8
 8000490:	9503      	str	r5, [sp, #12]
 8000492:	42a6      	cmp	r6, r4
 8000494:	d904      	bls.n	80004a0 <__aeabi_dmul+0x284>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	025b      	lsls	r3, r3, #9
 800049a:	4698      	mov	r8, r3
 800049c:	4445      	add	r5, r8
 800049e:	9503      	str	r5, [sp, #12]
 80004a0:	9b02      	ldr	r3, [sp, #8]
 80004a2:	043f      	lsls	r7, r7, #16
 80004a4:	445b      	add	r3, fp
 80004a6:	001e      	movs	r6, r3
 80004a8:	4283      	cmp	r3, r0
 80004aa:	4180      	sbcs	r0, r0
 80004ac:	0423      	lsls	r3, r4, #16
 80004ae:	4698      	mov	r8, r3
 80004b0:	9b05      	ldr	r3, [sp, #20]
 80004b2:	0c3f      	lsrs	r7, r7, #16
 80004b4:	4447      	add	r7, r8
 80004b6:	4698      	mov	r8, r3
 80004b8:	1876      	adds	r6, r6, r1
 80004ba:	428e      	cmp	r6, r1
 80004bc:	4189      	sbcs	r1, r1
 80004be:	4447      	add	r7, r8
 80004c0:	4240      	negs	r0, r0
 80004c2:	183d      	adds	r5, r7, r0
 80004c4:	46a8      	mov	r8, r5
 80004c6:	4693      	mov	fp, r2
 80004c8:	4249      	negs	r1, r1
 80004ca:	468a      	mov	sl, r1
 80004cc:	44c3      	add	fp, r8
 80004ce:	429f      	cmp	r7, r3
 80004d0:	41bf      	sbcs	r7, r7
 80004d2:	4580      	cmp	r8, r0
 80004d4:	4180      	sbcs	r0, r0
 80004d6:	9b03      	ldr	r3, [sp, #12]
 80004d8:	44da      	add	sl, fp
 80004da:	4698      	mov	r8, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	4240      	negs	r0, r0
 80004e0:	427f      	negs	r7, r7
 80004e2:	4307      	orrs	r7, r0
 80004e4:	0c24      	lsrs	r4, r4, #16
 80004e6:	4593      	cmp	fp, r2
 80004e8:	4192      	sbcs	r2, r2
 80004ea:	458a      	cmp	sl, r1
 80004ec:	4189      	sbcs	r1, r1
 80004ee:	193f      	adds	r7, r7, r4
 80004f0:	0ddc      	lsrs	r4, r3, #23
 80004f2:	9b04      	ldr	r3, [sp, #16]
 80004f4:	0275      	lsls	r5, r6, #9
 80004f6:	431d      	orrs	r5, r3
 80004f8:	1e68      	subs	r0, r5, #1
 80004fa:	4185      	sbcs	r5, r0
 80004fc:	4653      	mov	r3, sl
 80004fe:	4252      	negs	r2, r2
 8000500:	4249      	negs	r1, r1
 8000502:	430a      	orrs	r2, r1
 8000504:	18bf      	adds	r7, r7, r2
 8000506:	4447      	add	r7, r8
 8000508:	0df6      	lsrs	r6, r6, #23
 800050a:	027f      	lsls	r7, r7, #9
 800050c:	4335      	orrs	r5, r6
 800050e:	025a      	lsls	r2, r3, #9
 8000510:	433c      	orrs	r4, r7
 8000512:	4315      	orrs	r5, r2
 8000514:	01fb      	lsls	r3, r7, #7
 8000516:	d400      	bmi.n	800051a <__aeabi_dmul+0x2fe>
 8000518:	e0c1      	b.n	800069e <__aeabi_dmul+0x482>
 800051a:	2101      	movs	r1, #1
 800051c:	086a      	lsrs	r2, r5, #1
 800051e:	400d      	ands	r5, r1
 8000520:	4315      	orrs	r5, r2
 8000522:	07e2      	lsls	r2, r4, #31
 8000524:	4315      	orrs	r5, r2
 8000526:	0864      	lsrs	r4, r4, #1
 8000528:	4926      	ldr	r1, [pc, #152]	; (80005c4 <__aeabi_dmul+0x3a8>)
 800052a:	4461      	add	r1, ip
 800052c:	2900      	cmp	r1, #0
 800052e:	dd56      	ble.n	80005de <__aeabi_dmul+0x3c2>
 8000530:	076b      	lsls	r3, r5, #29
 8000532:	d009      	beq.n	8000548 <__aeabi_dmul+0x32c>
 8000534:	220f      	movs	r2, #15
 8000536:	402a      	ands	r2, r5
 8000538:	2a04      	cmp	r2, #4
 800053a:	d005      	beq.n	8000548 <__aeabi_dmul+0x32c>
 800053c:	1d2a      	adds	r2, r5, #4
 800053e:	42aa      	cmp	r2, r5
 8000540:	41ad      	sbcs	r5, r5
 8000542:	426d      	negs	r5, r5
 8000544:	1964      	adds	r4, r4, r5
 8000546:	0015      	movs	r5, r2
 8000548:	01e3      	lsls	r3, r4, #7
 800054a:	d504      	bpl.n	8000556 <__aeabi_dmul+0x33a>
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <__aeabi_dmul+0x3ac>)
 8000550:	00c9      	lsls	r1, r1, #3
 8000552:	4014      	ands	r4, r2
 8000554:	4461      	add	r1, ip
 8000556:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <__aeabi_dmul+0x3b0>)
 8000558:	4291      	cmp	r1, r2
 800055a:	dd00      	ble.n	800055e <__aeabi_dmul+0x342>
 800055c:	e724      	b.n	80003a8 <__aeabi_dmul+0x18c>
 800055e:	0762      	lsls	r2, r4, #29
 8000560:	08ed      	lsrs	r5, r5, #3
 8000562:	0264      	lsls	r4, r4, #9
 8000564:	0549      	lsls	r1, r1, #21
 8000566:	4315      	orrs	r5, r2
 8000568:	0b24      	lsrs	r4, r4, #12
 800056a:	0d4a      	lsrs	r2, r1, #21
 800056c:	e6c6      	b.n	80002fc <__aeabi_dmul+0xe0>
 800056e:	9701      	str	r7, [sp, #4]
 8000570:	e6b8      	b.n	80002e4 <__aeabi_dmul+0xc8>
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <__aeabi_dmul+0x398>)
 8000574:	2003      	movs	r0, #3
 8000576:	4694      	mov	ip, r2
 8000578:	4463      	add	r3, ip
 800057a:	464a      	mov	r2, r9
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2303      	movs	r3, #3
 8000580:	431a      	orrs	r2, r3
 8000582:	4691      	mov	r9, r2
 8000584:	4652      	mov	r2, sl
 8000586:	e68a      	b.n	800029e <__aeabi_dmul+0x82>
 8000588:	4649      	mov	r1, r9
 800058a:	2301      	movs	r3, #1
 800058c:	4319      	orrs	r1, r3
 800058e:	4689      	mov	r9, r1
 8000590:	2600      	movs	r6, #0
 8000592:	2001      	movs	r0, #1
 8000594:	e683      	b.n	800029e <__aeabi_dmul+0x82>
 8000596:	220c      	movs	r2, #12
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2303      	movs	r3, #3
 800059c:	0005      	movs	r5, r0
 800059e:	4691      	mov	r9, r2
 80005a0:	469b      	mov	fp, r3
 80005a2:	e65e      	b.n	8000262 <__aeabi_dmul+0x46>
 80005a4:	2304      	movs	r3, #4
 80005a6:	4699      	mov	r9, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	2400      	movs	r4, #0
 80005b0:	469b      	mov	fp, r3
 80005b2:	e656      	b.n	8000262 <__aeabi_dmul+0x46>
 80005b4:	000007ff 	.word	0x000007ff
 80005b8:	fffffc01 	.word	0xfffffc01
 80005bc:	08004a04 	.word	0x08004a04
 80005c0:	fffffc0d 	.word	0xfffffc0d
 80005c4:	000003ff 	.word	0x000003ff
 80005c8:	feffffff 	.word	0xfeffffff
 80005cc:	000007fe 	.word	0x000007fe
 80005d0:	2300      	movs	r3, #0
 80005d2:	2480      	movs	r4, #128	; 0x80
 80005d4:	2500      	movs	r5, #0
 80005d6:	4a44      	ldr	r2, [pc, #272]	; (80006e8 <__aeabi_dmul+0x4cc>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	0324      	lsls	r4, r4, #12
 80005dc:	e68e      	b.n	80002fc <__aeabi_dmul+0xe0>
 80005de:	2001      	movs	r0, #1
 80005e0:	1a40      	subs	r0, r0, r1
 80005e2:	2838      	cmp	r0, #56	; 0x38
 80005e4:	dd00      	ble.n	80005e8 <__aeabi_dmul+0x3cc>
 80005e6:	e686      	b.n	80002f6 <__aeabi_dmul+0xda>
 80005e8:	281f      	cmp	r0, #31
 80005ea:	dd5b      	ble.n	80006a4 <__aeabi_dmul+0x488>
 80005ec:	221f      	movs	r2, #31
 80005ee:	0023      	movs	r3, r4
 80005f0:	4252      	negs	r2, r2
 80005f2:	1a51      	subs	r1, r2, r1
 80005f4:	40cb      	lsrs	r3, r1
 80005f6:	0019      	movs	r1, r3
 80005f8:	2820      	cmp	r0, #32
 80005fa:	d003      	beq.n	8000604 <__aeabi_dmul+0x3e8>
 80005fc:	4a3b      	ldr	r2, [pc, #236]	; (80006ec <__aeabi_dmul+0x4d0>)
 80005fe:	4462      	add	r2, ip
 8000600:	4094      	lsls	r4, r2
 8000602:	4325      	orrs	r5, r4
 8000604:	1e6a      	subs	r2, r5, #1
 8000606:	4195      	sbcs	r5, r2
 8000608:	002a      	movs	r2, r5
 800060a:	430a      	orrs	r2, r1
 800060c:	2107      	movs	r1, #7
 800060e:	000d      	movs	r5, r1
 8000610:	2400      	movs	r4, #0
 8000612:	4015      	ands	r5, r2
 8000614:	4211      	tst	r1, r2
 8000616:	d05b      	beq.n	80006d0 <__aeabi_dmul+0x4b4>
 8000618:	210f      	movs	r1, #15
 800061a:	2400      	movs	r4, #0
 800061c:	4011      	ands	r1, r2
 800061e:	2904      	cmp	r1, #4
 8000620:	d053      	beq.n	80006ca <__aeabi_dmul+0x4ae>
 8000622:	1d11      	adds	r1, r2, #4
 8000624:	4291      	cmp	r1, r2
 8000626:	4192      	sbcs	r2, r2
 8000628:	4252      	negs	r2, r2
 800062a:	18a4      	adds	r4, r4, r2
 800062c:	000a      	movs	r2, r1
 800062e:	0223      	lsls	r3, r4, #8
 8000630:	d54b      	bpl.n	80006ca <__aeabi_dmul+0x4ae>
 8000632:	2201      	movs	r2, #1
 8000634:	2400      	movs	r4, #0
 8000636:	2500      	movs	r5, #0
 8000638:	e660      	b.n	80002fc <__aeabi_dmul+0xe0>
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	031b      	lsls	r3, r3, #12
 800063e:	421c      	tst	r4, r3
 8000640:	d009      	beq.n	8000656 <__aeabi_dmul+0x43a>
 8000642:	421e      	tst	r6, r3
 8000644:	d107      	bne.n	8000656 <__aeabi_dmul+0x43a>
 8000646:	4333      	orrs	r3, r6
 8000648:	031c      	lsls	r4, r3, #12
 800064a:	4643      	mov	r3, r8
 800064c:	0015      	movs	r5, r2
 800064e:	0b24      	lsrs	r4, r4, #12
 8000650:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <__aeabi_dmul+0x4cc>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	e652      	b.n	80002fc <__aeabi_dmul+0xe0>
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0312      	lsls	r2, r2, #12
 800065a:	4314      	orrs	r4, r2
 800065c:	0324      	lsls	r4, r4, #12
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <__aeabi_dmul+0x4cc>)
 8000660:	0b24      	lsrs	r4, r4, #12
 8000662:	9701      	str	r7, [sp, #4]
 8000664:	e64a      	b.n	80002fc <__aeabi_dmul+0xe0>
 8000666:	f000 f8fd 	bl	8000864 <__clzsi2>
 800066a:	0003      	movs	r3, r0
 800066c:	001a      	movs	r2, r3
 800066e:	3215      	adds	r2, #21
 8000670:	3020      	adds	r0, #32
 8000672:	2a1c      	cmp	r2, #28
 8000674:	dc00      	bgt.n	8000678 <__aeabi_dmul+0x45c>
 8000676:	e684      	b.n	8000382 <__aeabi_dmul+0x166>
 8000678:	4656      	mov	r6, sl
 800067a:	3b08      	subs	r3, #8
 800067c:	2200      	movs	r2, #0
 800067e:	409e      	lsls	r6, r3
 8000680:	e689      	b.n	8000396 <__aeabi_dmul+0x17a>
 8000682:	f000 f8ef 	bl	8000864 <__clzsi2>
 8000686:	0001      	movs	r1, r0
 8000688:	0002      	movs	r2, r0
 800068a:	3115      	adds	r1, #21
 800068c:	3220      	adds	r2, #32
 800068e:	291c      	cmp	r1, #28
 8000690:	dc00      	bgt.n	8000694 <__aeabi_dmul+0x478>
 8000692:	e64e      	b.n	8000332 <__aeabi_dmul+0x116>
 8000694:	0034      	movs	r4, r6
 8000696:	3808      	subs	r0, #8
 8000698:	2500      	movs	r5, #0
 800069a:	4084      	lsls	r4, r0
 800069c:	e653      	b.n	8000346 <__aeabi_dmul+0x12a>
 800069e:	9b00      	ldr	r3, [sp, #0]
 80006a0:	469c      	mov	ip, r3
 80006a2:	e741      	b.n	8000528 <__aeabi_dmul+0x30c>
 80006a4:	4912      	ldr	r1, [pc, #72]	; (80006f0 <__aeabi_dmul+0x4d4>)
 80006a6:	0022      	movs	r2, r4
 80006a8:	4461      	add	r1, ip
 80006aa:	002e      	movs	r6, r5
 80006ac:	408d      	lsls	r5, r1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	40c6      	lsrs	r6, r0
 80006b2:	1e69      	subs	r1, r5, #1
 80006b4:	418d      	sbcs	r5, r1
 80006b6:	4332      	orrs	r2, r6
 80006b8:	432a      	orrs	r2, r5
 80006ba:	40c4      	lsrs	r4, r0
 80006bc:	0753      	lsls	r3, r2, #29
 80006be:	d0b6      	beq.n	800062e <__aeabi_dmul+0x412>
 80006c0:	210f      	movs	r1, #15
 80006c2:	4011      	ands	r1, r2
 80006c4:	2904      	cmp	r1, #4
 80006c6:	d1ac      	bne.n	8000622 <__aeabi_dmul+0x406>
 80006c8:	e7b1      	b.n	800062e <__aeabi_dmul+0x412>
 80006ca:	0765      	lsls	r5, r4, #29
 80006cc:	0264      	lsls	r4, r4, #9
 80006ce:	0b24      	lsrs	r4, r4, #12
 80006d0:	08d2      	lsrs	r2, r2, #3
 80006d2:	4315      	orrs	r5, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	e611      	b.n	80002fc <__aeabi_dmul+0xe0>
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0312      	lsls	r2, r2, #12
 80006dc:	4314      	orrs	r4, r2
 80006de:	0324      	lsls	r4, r4, #12
 80006e0:	4a01      	ldr	r2, [pc, #4]	; (80006e8 <__aeabi_dmul+0x4cc>)
 80006e2:	0b24      	lsrs	r4, r4, #12
 80006e4:	e60a      	b.n	80002fc <__aeabi_dmul+0xe0>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	000007ff 	.word	0x000007ff
 80006ec:	0000043e 	.word	0x0000043e
 80006f0:	0000041e 	.word	0x0000041e

080006f4 <__aeabi_i2d>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d016      	beq.n	8000728 <__aeabi_i2d+0x34>
 80006fa:	17c3      	asrs	r3, r0, #31
 80006fc:	18c5      	adds	r5, r0, r3
 80006fe:	405d      	eors	r5, r3
 8000700:	0fc4      	lsrs	r4, r0, #31
 8000702:	0028      	movs	r0, r5
 8000704:	f000 f8ae 	bl	8000864 <__clzsi2>
 8000708:	4a11      	ldr	r2, [pc, #68]	; (8000750 <__aeabi_i2d+0x5c>)
 800070a:	1a12      	subs	r2, r2, r0
 800070c:	280a      	cmp	r0, #10
 800070e:	dc16      	bgt.n	800073e <__aeabi_i2d+0x4a>
 8000710:	0003      	movs	r3, r0
 8000712:	002e      	movs	r6, r5
 8000714:	3315      	adds	r3, #21
 8000716:	409e      	lsls	r6, r3
 8000718:	230b      	movs	r3, #11
 800071a:	1a18      	subs	r0, r3, r0
 800071c:	40c5      	lsrs	r5, r0
 800071e:	0553      	lsls	r3, r2, #21
 8000720:	032d      	lsls	r5, r5, #12
 8000722:	0b2d      	lsrs	r5, r5, #12
 8000724:	0d5b      	lsrs	r3, r3, #21
 8000726:	e003      	b.n	8000730 <__aeabi_i2d+0x3c>
 8000728:	2400      	movs	r4, #0
 800072a:	2300      	movs	r3, #0
 800072c:	2500      	movs	r5, #0
 800072e:	2600      	movs	r6, #0
 8000730:	051b      	lsls	r3, r3, #20
 8000732:	432b      	orrs	r3, r5
 8000734:	07e4      	lsls	r4, r4, #31
 8000736:	4323      	orrs	r3, r4
 8000738:	0030      	movs	r0, r6
 800073a:	0019      	movs	r1, r3
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	380b      	subs	r0, #11
 8000740:	4085      	lsls	r5, r0
 8000742:	0553      	lsls	r3, r2, #21
 8000744:	032d      	lsls	r5, r5, #12
 8000746:	2600      	movs	r6, #0
 8000748:	0b2d      	lsrs	r5, r5, #12
 800074a:	0d5b      	lsrs	r3, r3, #21
 800074c:	e7f0      	b.n	8000730 <__aeabi_i2d+0x3c>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	0000041e 	.word	0x0000041e

08000754 <__aeabi_d2f>:
 8000754:	0002      	movs	r2, r0
 8000756:	004b      	lsls	r3, r1, #1
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	0308      	lsls	r0, r1, #12
 800075c:	0d5b      	lsrs	r3, r3, #21
 800075e:	4e3d      	ldr	r6, [pc, #244]	; (8000854 <__aeabi_d2f+0x100>)
 8000760:	0fcc      	lsrs	r4, r1, #31
 8000762:	0a40      	lsrs	r0, r0, #9
 8000764:	0f51      	lsrs	r1, r2, #29
 8000766:	1c5f      	adds	r7, r3, #1
 8000768:	4308      	orrs	r0, r1
 800076a:	00d5      	lsls	r5, r2, #3
 800076c:	4237      	tst	r7, r6
 800076e:	d00a      	beq.n	8000786 <__aeabi_d2f+0x32>
 8000770:	4939      	ldr	r1, [pc, #228]	; (8000858 <__aeabi_d2f+0x104>)
 8000772:	185e      	adds	r6, r3, r1
 8000774:	2efe      	cmp	r6, #254	; 0xfe
 8000776:	dd16      	ble.n	80007a6 <__aeabi_d2f+0x52>
 8000778:	23ff      	movs	r3, #255	; 0xff
 800077a:	2100      	movs	r1, #0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	430b      	orrs	r3, r1
 8000780:	07e0      	lsls	r0, r4, #31
 8000782:	4318      	orrs	r0, r3
 8000784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000786:	2b00      	cmp	r3, #0
 8000788:	d106      	bne.n	8000798 <__aeabi_d2f+0x44>
 800078a:	4328      	orrs	r0, r5
 800078c:	d027      	beq.n	80007de <__aeabi_d2f+0x8a>
 800078e:	2105      	movs	r1, #5
 8000790:	0189      	lsls	r1, r1, #6
 8000792:	0a49      	lsrs	r1, r1, #9
 8000794:	b2db      	uxtb	r3, r3
 8000796:	e7f1      	b.n	800077c <__aeabi_d2f+0x28>
 8000798:	4305      	orrs	r5, r0
 800079a:	d0ed      	beq.n	8000778 <__aeabi_d2f+0x24>
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	03c9      	lsls	r1, r1, #15
 80007a0:	23ff      	movs	r3, #255	; 0xff
 80007a2:	4301      	orrs	r1, r0
 80007a4:	e7ea      	b.n	800077c <__aeabi_d2f+0x28>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	dd1c      	ble.n	80007e4 <__aeabi_d2f+0x90>
 80007aa:	0192      	lsls	r2, r2, #6
 80007ac:	0011      	movs	r1, r2
 80007ae:	1e4a      	subs	r2, r1, #1
 80007b0:	4191      	sbcs	r1, r2
 80007b2:	00c0      	lsls	r0, r0, #3
 80007b4:	0f6d      	lsrs	r5, r5, #29
 80007b6:	4301      	orrs	r1, r0
 80007b8:	4329      	orrs	r1, r5
 80007ba:	074b      	lsls	r3, r1, #29
 80007bc:	d048      	beq.n	8000850 <__aeabi_d2f+0xfc>
 80007be:	230f      	movs	r3, #15
 80007c0:	400b      	ands	r3, r1
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d000      	beq.n	80007c8 <__aeabi_d2f+0x74>
 80007c6:	3104      	adds	r1, #4
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	04db      	lsls	r3, r3, #19
 80007cc:	400b      	ands	r3, r1
 80007ce:	d03f      	beq.n	8000850 <__aeabi_d2f+0xfc>
 80007d0:	1c72      	adds	r2, r6, #1
 80007d2:	2efe      	cmp	r6, #254	; 0xfe
 80007d4:	d0d0      	beq.n	8000778 <__aeabi_d2f+0x24>
 80007d6:	0189      	lsls	r1, r1, #6
 80007d8:	0a49      	lsrs	r1, r1, #9
 80007da:	b2d3      	uxtb	r3, r2
 80007dc:	e7ce      	b.n	800077c <__aeabi_d2f+0x28>
 80007de:	2300      	movs	r3, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	e7cb      	b.n	800077c <__aeabi_d2f+0x28>
 80007e4:	0032      	movs	r2, r6
 80007e6:	3217      	adds	r2, #23
 80007e8:	db22      	blt.n	8000830 <__aeabi_d2f+0xdc>
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	221e      	movs	r2, #30
 80007ee:	0409      	lsls	r1, r1, #16
 80007f0:	4308      	orrs	r0, r1
 80007f2:	1b92      	subs	r2, r2, r6
 80007f4:	2a1f      	cmp	r2, #31
 80007f6:	dd1d      	ble.n	8000834 <__aeabi_d2f+0xe0>
 80007f8:	2102      	movs	r1, #2
 80007fa:	4249      	negs	r1, r1
 80007fc:	1b8e      	subs	r6, r1, r6
 80007fe:	0001      	movs	r1, r0
 8000800:	40f1      	lsrs	r1, r6
 8000802:	000e      	movs	r6, r1
 8000804:	2a20      	cmp	r2, #32
 8000806:	d004      	beq.n	8000812 <__aeabi_d2f+0xbe>
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <__aeabi_d2f+0x108>)
 800080a:	4694      	mov	ip, r2
 800080c:	4463      	add	r3, ip
 800080e:	4098      	lsls	r0, r3
 8000810:	4305      	orrs	r5, r0
 8000812:	0029      	movs	r1, r5
 8000814:	1e4d      	subs	r5, r1, #1
 8000816:	41a9      	sbcs	r1, r5
 8000818:	4331      	orrs	r1, r6
 800081a:	2600      	movs	r6, #0
 800081c:	074b      	lsls	r3, r1, #29
 800081e:	d1ce      	bne.n	80007be <__aeabi_d2f+0x6a>
 8000820:	2080      	movs	r0, #128	; 0x80
 8000822:	000b      	movs	r3, r1
 8000824:	04c0      	lsls	r0, r0, #19
 8000826:	2201      	movs	r2, #1
 8000828:	4003      	ands	r3, r0
 800082a:	4201      	tst	r1, r0
 800082c:	d1d3      	bne.n	80007d6 <__aeabi_d2f+0x82>
 800082e:	e7af      	b.n	8000790 <__aeabi_d2f+0x3c>
 8000830:	2300      	movs	r3, #0
 8000832:	e7ac      	b.n	800078e <__aeabi_d2f+0x3a>
 8000834:	490a      	ldr	r1, [pc, #40]	; (8000860 <__aeabi_d2f+0x10c>)
 8000836:	468c      	mov	ip, r1
 8000838:	0029      	movs	r1, r5
 800083a:	4463      	add	r3, ip
 800083c:	40d1      	lsrs	r1, r2
 800083e:	409d      	lsls	r5, r3
 8000840:	000a      	movs	r2, r1
 8000842:	0029      	movs	r1, r5
 8000844:	4098      	lsls	r0, r3
 8000846:	1e4d      	subs	r5, r1, #1
 8000848:	41a9      	sbcs	r1, r5
 800084a:	4301      	orrs	r1, r0
 800084c:	4311      	orrs	r1, r2
 800084e:	e7e4      	b.n	800081a <__aeabi_d2f+0xc6>
 8000850:	0033      	movs	r3, r6
 8000852:	e79d      	b.n	8000790 <__aeabi_d2f+0x3c>
 8000854:	000007fe 	.word	0x000007fe
 8000858:	fffffc80 	.word	0xfffffc80
 800085c:	fffffca2 	.word	0xfffffca2
 8000860:	fffffc82 	.word	0xfffffc82

08000864 <__clzsi2>:
 8000864:	211c      	movs	r1, #28
 8000866:	2301      	movs	r3, #1
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	4298      	cmp	r0, r3
 800086c:	d301      	bcc.n	8000872 <__clzsi2+0xe>
 800086e:	0c00      	lsrs	r0, r0, #16
 8000870:	3910      	subs	r1, #16
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	4298      	cmp	r0, r3
 8000876:	d301      	bcc.n	800087c <__clzsi2+0x18>
 8000878:	0a00      	lsrs	r0, r0, #8
 800087a:	3908      	subs	r1, #8
 800087c:	091b      	lsrs	r3, r3, #4
 800087e:	4298      	cmp	r0, r3
 8000880:	d301      	bcc.n	8000886 <__clzsi2+0x22>
 8000882:	0900      	lsrs	r0, r0, #4
 8000884:	3904      	subs	r1, #4
 8000886:	a202      	add	r2, pc, #8	; (adr r2, 8000890 <__clzsi2+0x2c>)
 8000888:	5c10      	ldrb	r0, [r2, r0]
 800088a:	1840      	adds	r0, r0, r1
 800088c:	4770      	bx	lr
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	02020304 	.word	0x02020304
 8000894:	01010101 	.word	0x01010101
	...

080008a0 <PWM_Set_DC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Set_DC(TIM_HandleTypeDef *timer, uint32_t channel, uint8_t dc){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	701a      	strb	r2, [r3, #0]
	uint32_t arr, ccrx;

	arr = __HAL_TIM_GET_AUTORELOAD(timer);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	617b      	str	r3, [r7, #20]
	if (dc <= 100){
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b64      	cmp	r3, #100	; 0x64
 80008bc:	d835      	bhi.n	800092a <PWM_Set_DC+0x8a>
		ccrx = arr*dc/100;
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4353      	muls	r3, r2
 80008c6:	2164      	movs	r1, #100	; 0x64
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff fc1b 	bl	8000104 <__udivsi3>
 80008ce:	0003      	movs	r3, r0
 80008d0:	613b      	str	r3, [r7, #16]

		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d104      	bne.n	80008e2 <PWM_Set_DC+0x42>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80008e0:	e023      	b.n	800092a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d104      	bne.n	80008f2 <PWM_Set_DC+0x52>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80008f0:	e01b      	b.n	800092a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	d104      	bne.n	8000902 <PWM_Set_DC+0x62>
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000900:	e013      	b.n	800092a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2b0c      	cmp	r3, #12
 8000906:	d104      	bne.n	8000912 <PWM_Set_DC+0x72>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000910:	e00b      	b.n	800092a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	2b10      	cmp	r3, #16
 8000916:	d104      	bne.n	8000922 <PWM_Set_DC+0x82>
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000920:	e003      	b.n	800092a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b006      	add	sp, #24
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	0002      	movs	r2, r0
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	801a      	strh	r2, [r3, #0]
	contador++;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 800094a:	701a      	strb	r2, [r3, #0]

	  if(contador > 5){
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b05      	cmp	r3, #5
 8000952:	d902      	bls.n	800095a <HAL_GPIO_EXTI_Falling_Callback+0x26>
		  contador = 1;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
	  }
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000094 	.word	0x20000094

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fb62 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f876 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f000 f9be 	bl	8000cf4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000978:	f000 f93c 	bl	8000bf4 <MX_TIM2_Init>
  MX_ADC1_Init();
 800097c:	f000 f8ce 	bl	8000b1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <main+0xd8>)
 8000982:	2100      	movs	r1, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f002 ff5d 	bl	8003844 <HAL_TIM_PWM_Start>

  PWM_Set_DC(&htim2, TIM_CHANNEL_1, 0);
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <main+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ff85 	bl	80008a0 <PWM_Set_DC>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <main+0xdc>)
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fc0f 	bl	80021bc <HAL_ADCEx_Calibration_Start>

  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <main+0xdc>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 ff0d 	bl	80017c0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <main+0xdc>)
 80009a8:	2164      	movs	r1, #100	; 0x64
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 ff56 	bl	800185c <HAL_ADC_PollForConversion>
	  e_analogica = HAL_ADC_GetValue(&hadc1);
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <main+0xdc>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 ffe6 	bl	8001984 <HAL_ADC_GetValue>
 80009b8:	0003      	movs	r3, r0
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <main+0xe0>)
 80009be:	701a      	strb	r2, [r3, #0]

	  tensao = e_analogica * (3.3/4095.0);
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <main+0xe0>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fe95 	bl	80006f4 <__aeabi_i2d>
 80009ca:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <main+0xe4>)
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <main+0xe8>)
 80009ce:	f7ff fc25 	bl	800021c <__aeabi_dmul>
 80009d2:	0002      	movs	r2, r0
 80009d4:	000b      	movs	r3, r1
 80009d6:	0010      	movs	r0, r2
 80009d8:	0019      	movs	r1, r3
 80009da:	f7ff febb 	bl	8000754 <__aeabi_d2f>
 80009de:	1c02      	adds	r2, r0, #0
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <main+0xec>)
 80009e2:	601a      	str	r2, [r3, #0]

	  switch(contador){
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <main+0xf0>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b05      	cmp	r3, #5
 80009ea:	d8d8      	bhi.n	800099e <main+0x36>
 80009ec:	009a      	lsls	r2, r3, #2
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <main+0xf4>)
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	469f      	mov	pc, r3
	  	case 1:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 10);
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <main+0xd8>)
 80009f8:	220a      	movs	r2, #10
 80009fa:	2100      	movs	r1, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ff4f 	bl	80008a0 <PWM_Set_DC>
	  		break;
 8000a02:	e01b      	b.n	8000a3c <main+0xd4>

	  	case 2:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 26);
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <main+0xd8>)
 8000a06:	221a      	movs	r2, #26
 8000a08:	2100      	movs	r1, #0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff ff48 	bl	80008a0 <PWM_Set_DC>
	  		break;
 8000a10:	e014      	b.n	8000a3c <main+0xd4>

	  	case 3:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 50);
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <main+0xd8>)
 8000a14:	2232      	movs	r2, #50	; 0x32
 8000a16:	2100      	movs	r1, #0
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff41 	bl	80008a0 <PWM_Set_DC>
	  		break;
 8000a1e:	e00d      	b.n	8000a3c <main+0xd4>

	  	case 4:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 75);
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <main+0xd8>)
 8000a22:	224b      	movs	r2, #75	; 0x4b
 8000a24:	2100      	movs	r1, #0
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff ff3a 	bl	80008a0 <PWM_Set_DC>
	  		break;
 8000a2c:	e006      	b.n	8000a3c <main+0xd4>

	  	case 5:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 100);
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <main+0xd8>)
 8000a30:	2264      	movs	r2, #100	; 0x64
 8000a32:	2100      	movs	r1, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ff33 	bl	80008a0 <PWM_Set_DC>
	  		break;
 8000a3a:	46c0      	nop			; (mov r8, r8)
	  HAL_ADC_Start(&hadc1);
 8000a3c:	e7af      	b.n	800099e <main+0x36>
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000098 	.word	0x20000098
 8000a44:	20000030 	.word	0x20000030
 8000a48:	20000028 	.word	0x20000028
 8000a4c:	e734d9b4 	.word	0xe734d9b4
 8000a50:	3f4a680c 	.word	0x3f4a680c
 8000a54:	2000002c 	.word	0x2000002c
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	08004a44 	.word	0x08004a44

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b095      	sub	sp, #84	; 0x54
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	2414      	movs	r4, #20
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	233c      	movs	r3, #60	; 0x3c
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f003 ffb3 	bl	80049dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f003 ffac 	bl	80049dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 feb7 	bl	80027fc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2202      	movs	r2, #2
 8000a92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0052      	lsls	r2, r2, #1
 8000a9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a9c:	0021      	movs	r1, r4
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2240      	movs	r2, #64	; 0x40
 8000aa8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2202      	movs	r2, #2
 8000aae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2208      	movs	r2, #8
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	0292      	lsls	r2, r2, #10
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	0492      	lsls	r2, r2, #18
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	0592      	lsls	r2, r2, #22
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	0018      	movs	r0, r3
 8000ade:	f001 fecd 	bl	800287c <HAL_RCC_OscConfig>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ae6:	f000 f949 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2202      	movs	r2, #2
 8000af4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2102      	movs	r1, #2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 fa1e 	bl	8002f48 <HAL_RCC_ClockConfig>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b10:	f000 f934 	bl	8000d7c <Error_Handler>
  }
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b015      	add	sp, #84	; 0x54
 8000b1a:	bd90      	pop	{r4, r7, pc}

08000b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	230c      	movs	r3, #12
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f003 ff56 	bl	80049dc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b32:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <MX_ADC1_Init+0xd0>)
 8000b34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	05d2      	lsls	r2, r2, #23
 8000b3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4a:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b70:	2220      	movs	r2, #32
 8000b72:	2100      	movs	r1, #0
 8000b74:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b84:	222c      	movs	r2, #44	; 0x2c
 8000b86:	2100      	movs	r1, #0
 8000b88:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b92:	2206      	movs	r2, #6
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b98:	2206      	movs	r2, #6
 8000b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000b9e:	223c      	movs	r2, #60	; 0x3c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fc29 	bl	8001404 <HAL_ADC_Init>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000bb6:	f000 f8e1 	bl	8000d7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <MX_ADC1_Init+0xd4>)
 8000bbe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	1d3a      	adds	r2, r7, #4
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_ADC1_Init+0xcc>)
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f001 f812 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000bdc:	f000 f8ce 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b004      	add	sp, #16
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000030 	.word	0x20000030
 8000bec:	40012400 	.word	0x40012400
 8000bf0:	04000002 	.word	0x04000002

08000bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	2328      	movs	r3, #40	; 0x28
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2310      	movs	r3, #16
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f003 fee9 	bl	80049dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	231c      	movs	r3, #28
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	230c      	movs	r3, #12
 8000c12:	001a      	movs	r2, r3
 8000c14:	2100      	movs	r1, #0
 8000c16:	f003 fee1 	bl	80049dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	231c      	movs	r3, #28
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f003 feda 	bl	80049dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	05d2      	lsls	r2, r2, #23
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000c30:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c32:	223f      	movs	r2, #63	; 0x3f
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c3c:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c3e:	4a2c      	ldr	r2, [pc, #176]	; (8000cf0 <MX_TIM2_Init+0xfc>)
 8000c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 fd3f 	bl	80036d4 <HAL_TIM_Base_Init>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 f88f 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	2128      	movs	r1, #40	; 0x28
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	0152      	lsls	r2, r2, #5
 8000c66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c68:	187a      	adds	r2, r7, r1
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 f900 	bl	8003e74 <HAL_TIM_ConfigClockSource>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000c78:	f000 f880 	bl	8000d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f002 fd80 	bl	8003784 <HAL_TIM_PWM_Init>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c88:	f000 f878 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	211c      	movs	r1, #28
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9a:	187a      	adds	r2, r7, r1
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f003 fde9 	bl	8004878 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000caa:	f000 f867 	bl	8000d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cae:	003b      	movs	r3, r7
 8000cb0:	2260      	movs	r2, #96	; 0x60
 8000cb2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cb4:	003b      	movs	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cba:	003b      	movs	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc6:	0039      	movs	r1, r7
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f002 ffdb 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000cd6:	f000 f851 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <MX_TIM2_Init+0xf8>)
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 f903 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b00e      	add	sp, #56	; 0x38
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	20000098 	.word	0x20000098
 8000cf0:	000003e7 	.word	0x000003e7

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	240c      	movs	r4, #12
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2314      	movs	r3, #20
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f003 fe69 	bl	80049dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_GPIO_Init+0x80>)
 8000d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_GPIO_Init+0x80>)
 8000d10:	2104      	movs	r1, #4
 8000d12:	430a      	orrs	r2, r1
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_GPIO_Init+0x80>)
 8000d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_GPIO_Init+0x80>)
 8000d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_GPIO_Init+0x80>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_GPIO_Init+0x80>)
 8000d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d32:	2201      	movs	r2, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0192      	lsls	r2, r2, #6
 8000d40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2284      	movs	r2, #132	; 0x84
 8000d46:	0392      	lsls	r2, r2, #14
 8000d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <MX_GPIO_Init+0x84>)
 8000d54:	0019      	movs	r1, r3
 8000d56:	0010      	movs	r0, r2
 8000d58:	f001 fbb0 	bl	80024bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2007      	movs	r0, #7
 8000d62:	f001 fb79 	bl	8002458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d66:	2007      	movs	r0, #7
 8000d68:	f001 fb8b 	bl	8002482 <HAL_NVIC_EnableIRQ>

}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b009      	add	sp, #36	; 0x24
 8000d72:	bd90      	pop	{r4, r7, pc}
 8000d74:	40021000 	.word	0x40021000
 8000d78:	50000800 	.word	0x50000800

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4013      	ands	r3, r2
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	0549      	lsls	r1, r1, #21
 8000db0:	430a      	orrs	r2, r1
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	055b      	lsls	r3, r3, #21
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000dc2:	23c0      	movs	r3, #192	; 0xc0
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f9ba 	bl	8001140 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b09d      	sub	sp, #116	; 0x74
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	235c      	movs	r3, #92	; 0x5c
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	0018      	movs	r0, r3
 8000de6:	2314      	movs	r3, #20
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f003 fdf6 	bl	80049dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	2410      	movs	r4, #16
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	0018      	movs	r0, r3
 8000df6:	234c      	movs	r3, #76	; 0x4c
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f003 fdee 	bl	80049dc <memset>
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <HAL_ADC_MspInit+0xc0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d141      	bne.n	8000e8e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	01d2      	lsls	r2, r2, #7
 8000e10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	2200      	movs	r2, #0
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f002 fa1e 	bl	800325c <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e24:	f7ff ffaa 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_ADC_MspInit+0xc4>)
 8000e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_ADC_MspInit+0xc4>)
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	0349      	lsls	r1, r1, #13
 8000e32:	430a      	orrs	r2, r1
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_ADC_MspInit+0xc4>)
 8000e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	035b      	lsls	r3, r3, #13
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_ADC_MspInit+0xc4>)
 8000e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_ADC_MspInit+0xc4>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_ADC_MspInit+0xc4>)
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e5c:	215c      	movs	r1, #92	; 0x5c
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2202      	movs	r2, #2
 8000e62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2203      	movs	r2, #3
 8000e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	187a      	adds	r2, r7, r1
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 fb1f 	bl	80024bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	200c      	movs	r0, #12
 8000e84:	f001 fae8 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000e88:	200c      	movs	r0, #12
 8000e8a:	f001 fafa 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b01d      	add	sp, #116	; 0x74
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40012400 	.word	0x40012400
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d113      	bne.n	8000edc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f001 fac1 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f001 fad3 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b004      	add	sp, #16
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	240c      	movs	r4, #12
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	2314      	movs	r3, #20
 8000ef8:	001a      	movs	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	f003 fd6e 	bl	80049dc <memset>
  if(htim->Instance==TIM2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d122      	bne.n	8000f52 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_TIM_MspPostInit+0x74>)
 8000f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_TIM_MspPostInit+0x74>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	430a      	orrs	r2, r1
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_TIM_MspPostInit+0x74>)
 8000f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f24:	0021      	movs	r1, r4
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2202      	movs	r2, #2
 8000f30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2202      	movs	r2, #2
 8000f42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	187a      	adds	r2, r7, r1
 8000f46:	23a0      	movs	r3, #160	; 0xa0
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 fab5 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b009      	add	sp, #36	; 0x24
 8000f58:	bd90      	pop	{r4, r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	40021000 	.word	0x40021000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f8c0 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	019b      	lsls	r3, r3, #6
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 fbfc 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <ADC1_COMP_IRQHandler+0x14>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 fcf6 	bl	800199c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000030 	.word	0x20000030

08000fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <TIM2_IRQHandler+0x14>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f002 fd2e 	bl	8003a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	20000098 	.word	0x20000098

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe4:	f7ff fff6 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	; (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	; (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100e:	f003 fcc1 	bl	8004994 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001012:	f7ff fca9 	bl	8000968 <main>

08001016 <LoopForever>:

LoopForever:
  b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   r0, =_estack
 8001018:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	200000e8 	.word	0x200000e8

08001030 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <CEC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_Init+0x3c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Init+0x3c>)
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	0049      	lsls	r1, r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f810 	bl	8001074 <HAL_InitTick>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d003      	beq.n	8001060 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e001      	b.n	8001064 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fe92 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781b      	ldrb	r3, [r3, #0]
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_InitTick+0x88>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d02b      	beq.n	80010e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_InitTick+0x8c>)
 800108e:	681c      	ldr	r4, [r3, #0]
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_InitTick+0x88>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	0019      	movs	r1, r3
 8001096:	23fa      	movs	r3, #250	; 0xfa
 8001098:	0098      	lsls	r0, r3, #2
 800109a:	f7ff f833 	bl	8000104 <__udivsi3>
 800109e:	0003      	movs	r3, r0
 80010a0:	0019      	movs	r1, r3
 80010a2:	0020      	movs	r0, r4
 80010a4:	f7ff f82e 	bl	8000104 <__udivsi3>
 80010a8:	0003      	movs	r3, r0
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 f9f9 	bl	80024a2 <HAL_SYSTICK_Config>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d112      	bne.n	80010da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d80a      	bhi.n	80010d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	2301      	movs	r3, #1
 80010be:	425b      	negs	r3, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	0018      	movs	r0, r3
 80010c4:	f001 f9c8 	bl	8002458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_InitTick+0x90>)
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e00d      	b.n	80010ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010d0:	230f      	movs	r3, #15
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e008      	b.n	80010ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010da:	230f      	movs	r3, #15
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e003      	b.n	80010ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b005      	add	sp, #20
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x20>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	18d2      	adds	r2, r2, r3
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_IncTick+0x20>)
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20000008 	.word	0x20000008
 8001128:	200000e4 	.word	0x200000e4

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <HAL_GetTick+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200000e4 	.word	0x200000e4

08001140 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800114e:	4013      	ands	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40010000 	.word	0x40010000
 8001168:	fffff9ff 	.word	0xfffff9ff

0800116c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800117c:	401a      	ands	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	fe3fffff 	.word	0xfe3fffff

08001194 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	23e0      	movs	r3, #224	; 0xe0
 80011a2:	045b      	lsls	r3, r3, #17
 80011a4:	4013      	ands	r3, r2
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b002      	add	sp, #8
 80011ac:	bd80      	pop	{r7, pc}

080011ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	2104      	movs	r1, #4
 80011c2:	400a      	ands	r2, r1
 80011c4:	2107      	movs	r1, #7
 80011c6:	4091      	lsls	r1, r2
 80011c8:	000a      	movs	r2, r1
 80011ca:	43d2      	mvns	r2, r2
 80011cc:	401a      	ands	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2104      	movs	r1, #4
 80011d2:	400b      	ands	r3, r1
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4099      	lsls	r1, r3
 80011d8:	000b      	movs	r3, r1
 80011da:	431a      	orrs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	23c0      	movs	r3, #192	; 0xc0
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4013      	ands	r3, r2
 80011fa:	d101      	bne.n	8001200 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}

0800120a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	211f      	movs	r1, #31
 800121e:	400a      	ands	r2, r1
 8001220:	210f      	movs	r1, #15
 8001222:	4091      	lsls	r1, r2
 8001224:	000a      	movs	r2, r1
 8001226:	43d2      	mvns	r2, r2
 8001228:	401a      	ands	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	0e9b      	lsrs	r3, r3, #26
 800122e:	210f      	movs	r1, #15
 8001230:	4019      	ands	r1, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	201f      	movs	r0, #31
 8001236:	4003      	ands	r3, r0
 8001238:	4099      	lsls	r1, r3
 800123a:	000b      	movs	r3, r1
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}

0800124a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	035b      	lsls	r3, r3, #13
 800125c:	0b5b      	lsrs	r3, r3, #13
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	0352      	lsls	r2, r2, #13
 800127e:	0b52      	lsrs	r2, r2, #13
 8001280:	43d2      	mvns	r2, r2
 8001282:	401a      	ands	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	0212      	lsls	r2, r2, #8
 80012bc:	43d2      	mvns	r2, r2
 80012be:	401a      	ands	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	400b      	ands	r3, r1
 80012c8:	4904      	ldr	r1, [pc, #16]	; (80012dc <LL_ADC_SetChannelSamplingTime+0x34>)
 80012ca:	400b      	ands	r3, r1
 80012cc:	431a      	orrs	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	07ffff00 	.word	0x07ffff00

080012e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <LL_ADC_EnableInternalRegulator+0x24>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	0552      	lsls	r2, r2, #21
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	6fffffe8 	.word	0x6fffffe8

08001308 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	055b      	lsls	r3, r3, #21
 8001318:	401a      	ands	r2, r3
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	055b      	lsls	r3, r3, #21
 800131e:	429a      	cmp	r2, r3
 8001320:	d101      	bne.n	8001326 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001326:	2300      	movs	r3, #0
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <LL_ADC_Enable+0x20>)
 800133e:	4013      	ands	r3, r2
 8001340:	2201      	movs	r2, #1
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}
 8001350:	7fffffe8 	.word	0x7fffffe8

08001354 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <LL_ADC_Disable+0x20>)
 8001362:	4013      	ands	r3, r2
 8001364:	2202      	movs	r2, #2
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}
 8001374:	7fffffe8 	.word	0x7fffffe8

08001378 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <LL_ADC_IsEnabled+0x18>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <LL_ADC_IsEnabled+0x1a>
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}

0800139a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d101      	bne.n	80013b2 <LL_ADC_IsDisableOngoing+0x18>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_ADC_IsDisableOngoing+0x1a>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <LL_ADC_REG_StartConversion+0x20>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	2204      	movs	r2, #4
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	7fffffe8 	.word	0x7fffffe8

080013e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2204      	movs	r2, #4
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d101      	bne.n	80013f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	231f      	movs	r3, #31
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e1b1      	b.n	800178e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10a      	bne.n	8001448 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff fccf 	bl	8000dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2254      	movs	r2, #84	; 0x54
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff ff5b 	bl	8001308 <LL_ADC_IsInternalRegulatorEnabled>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d115      	bne.n	8001482 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	0018      	movs	r0, r3
 800145c:	f7ff ff40 	bl	80012e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001460:	4bcd      	ldr	r3, [pc, #820]	; (8001798 <HAL_ADC_Init+0x394>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	49cd      	ldr	r1, [pc, #820]	; (800179c <HAL_ADC_Init+0x398>)
 8001466:	0018      	movs	r0, r3
 8001468:	f7fe fe4c 	bl	8000104 <__udivsi3>
 800146c:	0003      	movs	r3, r0
 800146e:	3301      	adds	r3, #1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001474:	e002      	b.n	800147c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff3e 	bl	8001308 <LL_ADC_IsInternalRegulatorEnabled>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d10f      	bne.n	80014b0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	2210      	movs	r2, #16
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2201      	movs	r2, #1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014a8:	231f      	movs	r3, #31
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff ff93 	bl	80013e0 <LL_ADC_REG_IsConversionOngoing>
 80014ba:	0003      	movs	r3, r0
 80014bc:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	2210      	movs	r2, #16
 80014c4:	4013      	ands	r3, r2
 80014c6:	d000      	beq.n	80014ca <HAL_ADC_Init+0xc6>
 80014c8:	e154      	b.n	8001774 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d000      	beq.n	80014d2 <HAL_ADC_Init+0xce>
 80014d0:	e150      	b.n	8001774 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	4ab2      	ldr	r2, [pc, #712]	; (80017a0 <HAL_ADC_Init+0x39c>)
 80014d8:	4013      	ands	r3, r2
 80014da:	2202      	movs	r2, #2
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff ff46 	bl	8001378 <LL_ADC_IsEnabled>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d156      	bne.n	800159e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2218      	movs	r2, #24
 80014f8:	4393      	bics	r3, r2
 80014fa:	0019      	movs	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	0f9b      	lsrs	r3, r3, #30
 800150e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001514:	4313      	orrs	r3, r2
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	223c      	movs	r2, #60	; 0x3c
 8001520:	5c9b      	ldrb	r3, [r3, r2]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d111      	bne.n	800154a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	0f9b      	lsrs	r3, r3, #30
 800152c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001532:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001538:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800153e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4313      	orrs	r3, r2
 8001544:	2201      	movs	r2, #1
 8001546:	4313      	orrs	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a94      	ldr	r2, [pc, #592]	; (80017a4 <HAL_ADC_Init+0x3a0>)
 8001552:	4013      	ands	r3, r2
 8001554:	0019      	movs	r1, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	430a      	orrs	r2, r1
 800155e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	061b      	lsls	r3, r3, #24
 8001568:	429a      	cmp	r2, r3
 800156a:	d018      	beq.n	800159e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	05db      	lsls	r3, r3, #23
 8001574:	429a      	cmp	r2, r3
 8001576:	d012      	beq.n	800159e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	429a      	cmp	r2, r3
 8001582:	d00c      	beq.n	800159e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001584:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_ADC_Init+0x3a4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a88      	ldr	r2, [pc, #544]	; (80017ac <HAL_ADC_Init+0x3a8>)
 800158a:	4013      	ands	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	23f0      	movs	r3, #240	; 0xf0
 8001594:	039b      	lsls	r3, r3, #14
 8001596:	401a      	ands	r2, r3
 8001598:	4b83      	ldr	r3, [pc, #524]	; (80017a8 <HAL_ADC_Init+0x3a4>)
 800159a:	430a      	orrs	r2, r1
 800159c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e1b      	ldrb	r3, [r3, #24]
 80015a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e5b      	ldrb	r3, [r3, #25]
 80015a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7e9b      	ldrb	r3, [r3, #26]
 80015b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HAL_ADC_Init+0x1be>
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	e000      	b.n	80015c4 <HAL_ADC_Init+0x1c0>
 80015c2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015ca:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da04      	bge.n	80015de <HAL_ADC_Init+0x1da>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	e001      	b.n	80015e2 <HAL_ADC_Init+0x1de>
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80015e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	212c      	movs	r1, #44	; 0x2c
 80015e8:	5c5b      	ldrb	r3, [r3, r1]
 80015ea:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2220      	movs	r2, #32
 80015f8:	5c9b      	ldrb	r3, [r3, r2]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d115      	bne.n	800162a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7e9b      	ldrb	r3, [r3, #26]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d105      	bne.n	8001612 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	0252      	lsls	r2, r2, #9
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	e00b      	b.n	800162a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	2220      	movs	r2, #32
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2201      	movs	r2, #1
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001636:	23e0      	movs	r3, #224	; 0xe0
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001640:	4313      	orrs	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <HAL_ADC_Init+0x3ac>)
 8001650:	4013      	ands	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	430a      	orrs	r2, r1
 800165c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	4a53      	ldr	r2, [pc, #332]	; (80017b4 <HAL_ADC_Init+0x3b0>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	430a      	orrs	r2, r1
 8001672:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f7ff fd95 	bl	80011ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168c:	494a      	ldr	r1, [pc, #296]	; (80017b8 <HAL_ADC_Init+0x3b4>)
 800168e:	001a      	movs	r2, r3
 8001690:	f7ff fd8d 	bl	80011ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2110      	movs	r1, #16
 80016a8:	4249      	negs	r1, r1
 80016aa:	430a      	orrs	r2, r1
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
 80016ae:	e03a      	b.n	8001726 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	039b      	lsls	r3, r3, #14
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d134      	bne.n	8001726 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	e00c      	b.n	80016dc <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	220f      	movs	r2, #15
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	d006      	beq.n	80016e4 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3301      	adds	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b07      	cmp	r3, #7
 80016e0:	d9ef      	bls.n	80016c2 <HAL_ADC_Init+0x2be>
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80016e4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2110      	movs	r1, #16
 80016f8:	4249      	negs	r1, r1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
 80016fe:	e012      	b.n	8001726 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	3b01      	subs	r3, #1
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	221c      	movs	r2, #28
 8001710:	4013      	ands	r3, r2
 8001712:	2210      	movs	r2, #16
 8001714:	4252      	negs	r2, r2
 8001716:	409a      	lsls	r2, r3
 8001718:	0011      	movs	r1, r2
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <HAL_ADC_Init+0x3b8>)
 800172e:	4013      	ands	r3, r2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	429a      	cmp	r2, r3
 8001734:	d10b      	bne.n	800174e <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	2203      	movs	r2, #3
 8001742:	4393      	bics	r3, r2
 8001744:	2201      	movs	r2, #1
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800174c:	e01c      	b.n	8001788 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	2212      	movs	r2, #18
 8001754:	4393      	bics	r3, r2
 8001756:	2210      	movs	r2, #16
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	2201      	movs	r2, #1
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800176a:	231f      	movs	r3, #31
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001772:	e009      	b.n	8001788 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	2210      	movs	r2, #16
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001780:	231f      	movs	r3, #31
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001788:	231f      	movs	r3, #31
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	781b      	ldrb	r3, [r3, #0]
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b008      	add	sp, #32
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	20000000 	.word	0x20000000
 800179c:	00030d40 	.word	0x00030d40
 80017a0:	fffffefd 	.word	0xfffffefd
 80017a4:	1ffffc02 	.word	0x1ffffc02
 80017a8:	40012708 	.word	0x40012708
 80017ac:	ffc3ffff 	.word	0xffc3ffff
 80017b0:	fffe0219 	.word	0xfffe0219
 80017b4:	dffffc02 	.word	0xdffffc02
 80017b8:	07ffff04 	.word	0x07ffff04
 80017bc:	833fffe7 	.word	0x833fffe7

080017c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fe07 	bl	80013e0 <LL_ADC_REG_IsConversionOngoing>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d135      	bne.n	8001842 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2254      	movs	r2, #84	; 0x54
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_Start+0x24>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e035      	b.n	8001850 <HAL_ADC_Start+0x90>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2254      	movs	r2, #84	; 0x54
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017ec:	250f      	movs	r5, #15
 80017ee:	197c      	adds	r4, r7, r5
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 fbda 	bl	8001fac <ADC_Enable>
 80017f8:	0003      	movs	r3, r0
 80017fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017fc:	197b      	adds	r3, r7, r5
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d119      	bne.n	8001838 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a13      	ldr	r2, [pc, #76]	; (8001858 <HAL_ADC_Start+0x98>)
 800180a:	4013      	ands	r3, r2
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	0052      	lsls	r2, r2, #1
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	221c      	movs	r2, #28
 8001822:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2254      	movs	r2, #84	; 0x54
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fdc3 	bl	80013bc <LL_ADC_REG_StartConversion>
 8001836:	e008      	b.n	800184a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2254      	movs	r2, #84	; 0x54
 800183c:	2100      	movs	r1, #0
 800183e:	5499      	strb	r1, [r3, r2]
 8001840:	e003      	b.n	800184a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800184a:	230f      	movs	r3, #15
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bdb0      	pop	{r4, r5, r7, pc}
 8001858:	fffff0fe 	.word	0xfffff0fe

0800185c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d102      	bne.n	8001874 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800186e:	2308      	movs	r3, #8
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e00f      	b.n	8001894 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	4013      	ands	r3, r2
 800187e:	d007      	beq.n	8001890 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	2220      	movs	r2, #32
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e072      	b.n	8001976 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001890:	2304      	movs	r3, #4
 8001892:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001894:	f7ff fc4a 	bl	800112c <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800189c:	e01f      	b.n	80018de <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	d01c      	beq.n	80018de <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018a4:	f7ff fc42 	bl	800112c <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d302      	bcc.n	80018ba <HAL_ADC_PollForConversion+0x5e>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d111      	bne.n	80018de <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	d10b      	bne.n	80018de <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	2204      	movs	r2, #4
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2254      	movs	r2, #84	; 0x54
 80018d6:	2100      	movs	r1, #0
 80018d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e04b      	b.n	8001976 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	d0d9      	beq.n	800189e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	0092      	lsls	r2, r2, #2
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff fc73 	bl	80011e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d02e      	beq.n	8001964 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7e9b      	ldrb	r3, [r3, #26]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d12a      	bne.n	8001964 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2208      	movs	r2, #8
 8001916:	4013      	ands	r3, r2
 8001918:	2b08      	cmp	r3, #8
 800191a:	d123      	bne.n	8001964 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fd5d 	bl	80013e0 <LL_ADC_REG_IsConversionOngoing>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d110      	bne.n	800194c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	210c      	movs	r1, #12
 8001936:	438a      	bics	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_ADC_PollForConversion+0x124>)
 8001940:	4013      	ands	r3, r2
 8001942:	2201      	movs	r2, #1
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	659a      	str	r2, [r3, #88]	; 0x58
 800194a:	e00b      	b.n	8001964 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	2220      	movs	r2, #32
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	2201      	movs	r2, #1
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e1b      	ldrb	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	220c      	movs	r2, #12
 8001972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b004      	add	sp, #16
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	fffffefe 	.word	0xfffffefe

08001984 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d017      	beq.n	80019f0 <HAL_ADC_IRQHandler+0x54>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	2210      	movs	r2, #16
 80019ce:	4013      	ands	r3, r2
 80019d0:	d106      	bne.n	80019e0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fc7c 	bl	80022e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2202      	movs	r2, #2
 80019ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2204      	movs	r2, #4
 80019f4:	4013      	ands	r3, r2
 80019f6:	d003      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x64>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2204      	movs	r2, #4
 80019fc:	4013      	ands	r3, r2
 80019fe:	d107      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2208      	movs	r2, #8
 8001a04:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a06:	d04d      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d049      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	2210      	movs	r2, #16
 8001a16:	4013      	ands	r3, r2
 8001a18:	d106      	bne.n	8001a28 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fbdb 	bl	80011e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d02e      	beq.n	8001a94 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7e9b      	ldrb	r3, [r3, #26]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d12a      	bne.n	8001a94 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2208      	movs	r2, #8
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d123      	bne.n	8001a94 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fcc5 	bl	80013e0 <LL_ADC_REG_IsConversionOngoing>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d110      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	210c      	movs	r1, #12
 8001a66:	438a      	bics	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a56      	ldr	r2, [pc, #344]	; (8001bc8 <HAL_ADC_IRQHandler+0x22c>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	2201      	movs	r2, #1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	659a      	str	r2, [r3, #88]	; 0x58
 8001a7a:	e00b      	b.n	8001a94 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	2220      	movs	r2, #32
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f898 	bl	8001bcc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d012      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x136>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	0252      	lsls	r2, r2, #9
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f000 f889 	bl	8001bdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d014      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x16a>
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d00f      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	0292      	lsls	r2, r2, #10
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 fbe2 	bl	80022c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0052      	lsls	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d014      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x19e>
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d00f      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	02d2      	lsls	r2, r2, #11
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fbd0 	bl	80022d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_ADC_IRQHandler+0x1fe>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2210      	movs	r2, #16
 8001b46:	4013      	ands	r3, r2
 8001b48:	d027      	beq.n	8001b9a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001b52:	2301      	movs	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e008      	b.n	8001b6a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff fb97 	bl	8001290 <LL_ADC_REG_GetDMATransfer>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001b66:	2301      	movs	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d110      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	00d2      	lsls	r2, r2, #3
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	2202      	movs	r2, #2
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 f82d 	bl	8001bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2210      	movs	r2, #16
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x224>
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	019b      	lsls	r3, r3, #6
 8001baa:	4013      	ands	r3, r2
 8001bac:	d008      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 fb9d 	bl	80022f0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	0192      	lsls	r2, r2, #6
 8001bbe:	601a      	str	r2, [r3, #0]
  }
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b006      	add	sp, #24
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	fffffefe 	.word	0xfffffefe

08001bcc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c06:	2317      	movs	r3, #23
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2254      	movs	r2, #84	; 0x54
 8001c16:	5c9b      	ldrb	r3, [r3, r2]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x24>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e1c0      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x3a6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2254      	movs	r2, #84	; 0x54
 8001c24:	2101      	movs	r1, #1
 8001c26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff fbd7 	bl	80013e0 <LL_ADC_REG_IsConversionOngoing>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d000      	beq.n	8001c38 <HAL_ADC_ConfigChannel+0x3c>
 8001c36:	e1a3      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d100      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x46>
 8001c40:	e143      	b.n	8001eca <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d004      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <HAL_ADC_ConfigChannel+0x35c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d108      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0019      	movs	r1, r3
 8001c62:	0010      	movs	r0, r2
 8001c64:	f7ff faf1 	bl	800124a <LL_ADC_REG_SetSequencerChAdd>
 8001c68:	e0c9      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	211f      	movs	r1, #31
 8001c74:	400b      	ands	r3, r1
 8001c76:	210f      	movs	r1, #15
 8001c78:	4099      	lsls	r1, r3
 8001c7a:	000b      	movs	r3, r1
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	035b      	lsls	r3, r3, #13
 8001c88:	0b5b      	lsrs	r3, r3, #13
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x9c>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	221f      	movs	r2, #31
 8001c94:	4013      	ands	r3, r2
 8001c96:	e098      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d000      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0xa8>
 8001ca2:	e091      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	4013      	ands	r3, r2
 8001cac:	d000      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0xb4>
 8001cae:	e089      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1c8>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d000      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0xc0>
 8001cba:	e081      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1c4>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d000      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0xcc>
 8001cc6:	e079      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1c0>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d000      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0xd8>
 8001cd2:	e071      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x1bc>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d000      	beq.n	8001ce0 <HAL_ADC_ConfigChannel+0xe4>
 8001cde:	e069      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1b8>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2240      	movs	r2, #64	; 0x40
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d000      	beq.n	8001cec <HAL_ADC_ConfigChannel+0xf0>
 8001cea:	e061      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x1b4>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d000      	beq.n	8001cf8 <HAL_ADC_ConfigChannel+0xfc>
 8001cf6:	e059      	b.n	8001dac <HAL_ADC_ConfigChannel+0x1b0>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d151      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1ac>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d149      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1a8>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d141      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1a4>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4013      	ands	r3, r2
 8001d26:	d139      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1a0>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	4013      	ands	r3, r2
 8001d32:	d131      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x19c>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	019b      	lsls	r3, r3, #6
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d129      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x198>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	01db      	lsls	r3, r3, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d121      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x194>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	4013      	ands	r3, r2
 8001d56:	d119      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x190>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	4013      	ands	r3, r2
 8001d62:	d111      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x18c>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d109      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x188>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	02db      	lsls	r3, r3, #11
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d001      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x184>
 8001d7c:	2312      	movs	r3, #18
 8001d7e:	e024      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d80:	2300      	movs	r3, #0
 8001d82:	e022      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d84:	2311      	movs	r3, #17
 8001d86:	e020      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	2310      	movs	r3, #16
 8001d8a:	e01e      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	e01c      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d90:	230e      	movs	r3, #14
 8001d92:	e01a      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	230d      	movs	r3, #13
 8001d96:	e018      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d98:	230c      	movs	r3, #12
 8001d9a:	e016      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	230b      	movs	r3, #11
 8001d9e:	e014      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001da0:	230a      	movs	r3, #10
 8001da2:	e012      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001da4:	2309      	movs	r3, #9
 8001da6:	e010      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001da8:	2308      	movs	r3, #8
 8001daa:	e00e      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001dac:	2307      	movs	r3, #7
 8001dae:	e00c      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001db0:	2306      	movs	r3, #6
 8001db2:	e00a      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001db4:	2305      	movs	r3, #5
 8001db6:	e008      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001db8:	2304      	movs	r3, #4
 8001dba:	e006      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e004      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e002      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ce>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	6852      	ldr	r2, [r2, #4]
 8001dce:	201f      	movs	r0, #31
 8001dd0:	4002      	ands	r2, r0
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d808      	bhi.n	8001dfe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	001a      	movs	r2, r3
 8001dfa:	f7ff fa06 	bl	800120a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	f7ff fa4c 	bl	80012a8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db00      	blt.n	8001e1a <HAL_ADC_ConfigChannel+0x21e>
 8001e18:	e0bc      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e1a:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff f9b9 	bl	8001194 <LL_ADC_GetCommonPathInternalCh>
 8001e22:	0003      	movs	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_ADC_ConfigChannel+0x364>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d122      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e38:	d11d      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	0412      	lsls	r2, r2, #16
 8001e40:	4313      	orrs	r3, r2
 8001e42:	4a46      	ldr	r2, [pc, #280]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001e44:	0019      	movs	r1, r3
 8001e46:	0010      	movs	r0, r2
 8001e48:	f7ff f990 	bl	800116c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e4c:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <HAL_ADC_ConfigChannel+0x368>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4945      	ldr	r1, [pc, #276]	; (8001f68 <HAL_ADC_ConfigChannel+0x36c>)
 8001e52:	0018      	movs	r0, r3
 8001e54:	f7fe f956 	bl	8000104 <__udivsi3>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	189b      	adds	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e66:	e002      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f9      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e74:	e08e      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a3c      	ldr	r2, [pc, #240]	; (8001f6c <HAL_ADC_ConfigChannel+0x370>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d10e      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x2a2>
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	045b      	lsls	r3, r3, #17
 8001e86:	4013      	ands	r3, r2
 8001e88:	d109      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	0452      	lsls	r2, r2, #17
 8001e90:	4313      	orrs	r3, r2
 8001e92:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001e94:	0019      	movs	r1, r3
 8001e96:	0010      	movs	r0, r2
 8001e98:	f7ff f968 	bl	800116c <LL_ADC_SetCommonPathInternalCh>
 8001e9c:	e07a      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <HAL_ADC_ConfigChannel+0x374>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d000      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0x2ae>
 8001ea8:	e074      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	03db      	lsls	r3, r3, #15
 8001eb0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001eb2:	d000      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x2ba>
 8001eb4:	e06e      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	03d2      	lsls	r2, r2, #15
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	0010      	movs	r0, r2
 8001ec4:	f7ff f952 	bl	800116c <LL_ADC_SetCommonPathInternalCh>
 8001ec8:	e064      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	061b      	lsls	r3, r3, #24
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d004      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_ADC_ConfigChannel+0x35c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d107      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0019      	movs	r1, r3
 8001eea:	0010      	movs	r0, r2
 8001eec:	f7ff f9be 	bl	800126c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da4d      	bge.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff f94a 	bl	8001194 <LL_ADC_GetCommonPathInternalCh>
 8001f00:	0003      	movs	r3, r0
 8001f02:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <HAL_ADC_ConfigChannel+0x364>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d108      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_ADC_ConfigChannel+0x378>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001f16:	0019      	movs	r1, r3
 8001f18:	0010      	movs	r0, r2
 8001f1a:	f7ff f927 	bl	800116c <LL_ADC_SetCommonPathInternalCh>
 8001f1e:	e039      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_ADC_ConfigChannel+0x370>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_ADC_ConfigChannel+0x37c>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001f32:	0019      	movs	r1, r3
 8001f34:	0010      	movs	r0, r2
 8001f36:	f7ff f919 	bl	800116c <LL_ADC_SetCommonPathInternalCh>
 8001f3a:	e02b      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_ADC_ConfigChannel+0x374>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d126      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_ADC_ConfigChannel+0x380>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_ADC_ConfigChannel+0x360>)
 8001f4e:	0019      	movs	r1, r3
 8001f50:	0010      	movs	r0, r2
 8001f52:	f7ff f90b 	bl	800116c <LL_ADC_SetCommonPathInternalCh>
 8001f56:	e01d      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x398>
 8001f58:	80000004 	.word	0x80000004
 8001f5c:	40012708 	.word	0x40012708
 8001f60:	b0001000 	.word	0xb0001000
 8001f64:	20000000 	.word	0x20000000
 8001f68:	00030d40 	.word	0x00030d40
 8001f6c:	b8004000 	.word	0xb8004000
 8001f70:	b4002000 	.word	0xb4002000
 8001f74:	ff7fffff 	.word	0xff7fffff
 8001f78:	feffffff 	.word	0xfeffffff
 8001f7c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	2220      	movs	r2, #32
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f8c:	2317      	movs	r3, #23
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2254      	movs	r2, #84	; 0x54
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f9c:	2317      	movs	r3, #23
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	781b      	ldrb	r3, [r3, #0]
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b006      	add	sp, #24
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)

08001fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff f9db 	bl	8001378 <LL_ADC_IsEnabled>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d000      	beq.n	8001fc8 <ADC_Enable+0x1c>
 8001fc6:	e069      	b.n	800209c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a36      	ldr	r2, [pc, #216]	; (80020a8 <ADC_Enable+0xfc>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d00d      	beq.n	8001ff0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	2210      	movs	r2, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e056      	b.n	800209e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff f99b 	bl	8001330 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <ADC_Enable+0x100>)
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff f8c9 	bl	8001194 <LL_ADC_GetCommonPathInternalCh>
 8002002:	0002      	movs	r2, r0
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	4013      	ands	r3, r2
 800200a:	d00f      	beq.n	800202c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <ADC_Enable+0x104>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4928      	ldr	r1, [pc, #160]	; (80020b4 <ADC_Enable+0x108>)
 8002012:	0018      	movs	r0, r3
 8002014:	f7fe f876 	bl	8000104 <__udivsi3>
 8002018:	0003      	movs	r3, r0
 800201a:	3301      	adds	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800201e:	e002      	b.n	8002026 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3b01      	subs	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e5b      	ldrb	r3, [r3, #25]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d033      	beq.n	800209c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002034:	f7ff f87a 	bl	800112c <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800203c:	e027      	b.n	800208e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0018      	movs	r0, r3
 8002044:	f7ff f998 	bl	8001378 <LL_ADC_IsEnabled>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d104      	bne.n	8002056 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff f96d 	bl	8001330 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002056:	f7ff f869 	bl	800112c <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d914      	bls.n	800208e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4013      	ands	r3, r2
 800206e:	2b01      	cmp	r3, #1
 8002070:	d00d      	beq.n	800208e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	2210      	movs	r2, #16
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2201      	movs	r2, #1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e007      	b.n	800209e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	2b01      	cmp	r3, #1
 800209a:	d1d0      	bne.n	800203e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	80000017 	.word	0x80000017
 80020ac:	40012708 	.word	0x40012708
 80020b0:	20000000 	.word	0x20000000
 80020b4:	00030d40 	.word	0x00030d40

080020b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff f968 	bl	800139a <LL_ADC_IsDisableOngoing>
 80020ca:	0003      	movs	r3, r0
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7ff f950 	bl	8001378 <LL_ADC_IsEnabled>
 80020d8:	1e03      	subs	r3, r0, #0
 80020da:	d046      	beq.n	800216a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d143      	bne.n	800216a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2205      	movs	r2, #5
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10d      	bne.n	800210c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff f92d 	bl	8001354 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2203      	movs	r2, #3
 8002100:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002102:	f7ff f813 	bl	800112c <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800210a:	e028      	b.n	800215e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	2210      	movs	r2, #16
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2201      	movs	r2, #1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e021      	b.n	800216c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002128:	f7ff f800 	bl	800112c <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d913      	bls.n	800215e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	d00d      	beq.n	800215e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	2210      	movs	r2, #16
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2201      	movs	r2, #1
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e006      	b.n	800216c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d1de      	bne.n	8002128 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}

08002174 <LL_ADC_IsEnabled>:
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <LL_ADC_IsEnabled+0x18>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <LL_ADC_IsEnabled+0x1a>
 800218c:	2300      	movs	r3, #0
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}

08002196 <LL_ADC_IsCalibrationOnGoing>:
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0fdb      	lsrs	r3, r3, #31
 80021a4:	07da      	lsls	r2, r3, #31
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2254      	movs	r2, #84	; 0x54
 80021cc:	5c9b      	ldrb	r3, [r3, r2]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADCEx_Calibration_Start+0x1a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e06c      	b.n	80022b0 <HAL_ADCEx_Calibration_Start+0xf4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2254      	movs	r2, #84	; 0x54
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80021de:	2317      	movs	r3, #23
 80021e0:	18fc      	adds	r4, r7, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff ff67 	bl	80020b8 <ADC_Disable>
 80021ea:	0003      	movs	r3, r0
 80021ec:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ffbe 	bl	8002174 <LL_ADC_IsEnabled>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d14c      	bne.n	8002296 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <HAL_ADCEx_Calibration_Start+0xfc>)
 8002202:	4013      	ands	r3, r2
 8002204:	2202      	movs	r2, #2
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2203      	movs	r2, #3
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2103      	movs	r1, #3
 8002224:	438a      	bics	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	0609      	lsls	r1, r1, #24
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800223a:	e014      	b.n	8002266 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3301      	adds	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_ADCEx_Calibration_Start+0x100>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d90d      	bls.n	8002266 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	2212      	movs	r2, #18
 8002250:	4393      	bics	r3, r2
 8002252:	2210      	movs	r2, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2254      	movs	r2, #84	; 0x54
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e024      	b.n	80022b0 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff ff93 	bl	8002196 <LL_ADC_IsCalibrationOnGoing>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d1e3      	bne.n	800223c <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68d9      	ldr	r1, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	2203      	movs	r2, #3
 800228a:	4393      	bics	r3, r2
 800228c:	2201      	movs	r2, #1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
 8002294:	e005      	b.n	80022a2 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	2210      	movs	r2, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2254      	movs	r2, #84	; 0x54
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80022aa:	2317      	movs	r3, #23
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	781b      	ldrb	r3, [r3, #0]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b007      	add	sp, #28
 80022b6:	bd90      	pop	{r4, r7, pc}
 80022b8:	fffffefd 	.word	0xfffffefd
 80022bc:	0002f1ff 	.word	0x0002f1ff

080022c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	0002      	movs	r2, r0
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b7f      	cmp	r3, #127	; 0x7f
 8002312:	d809      	bhi.n	8002328 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	001a      	movs	r2, r3
 800231a:	231f      	movs	r3, #31
 800231c:	401a      	ands	r2, r3
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_EnableIRQ+0x30>)
 8002320:	2101      	movs	r1, #1
 8002322:	4091      	lsls	r1, r2
 8002324:	000a      	movs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	0002      	movs	r2, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b7f      	cmp	r3, #127	; 0x7f
 8002348:	d828      	bhi.n	800239c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800234a:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <__NVIC_SetPriority+0xd4>)
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b25b      	sxtb	r3, r3
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	33c0      	adds	r3, #192	; 0xc0
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	589b      	ldr	r3, [r3, r2]
 800235a:	1dfa      	adds	r2, r7, #7
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	0011      	movs	r1, r2
 8002360:	2203      	movs	r2, #3
 8002362:	400a      	ands	r2, r1
 8002364:	00d2      	lsls	r2, r2, #3
 8002366:	21ff      	movs	r1, #255	; 0xff
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	43d2      	mvns	r2, r2
 800236e:	401a      	ands	r2, r3
 8002370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	401a      	ands	r2, r3
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	2303      	movs	r3, #3
 8002382:	4003      	ands	r3, r0
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002388:	481f      	ldr	r0, [pc, #124]	; (8002408 <__NVIC_SetPriority+0xd4>)
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b25b      	sxtb	r3, r3
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	430a      	orrs	r2, r1
 8002394:	33c0      	adds	r3, #192	; 0xc0
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800239a:	e031      	b.n	8002400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <__NVIC_SetPriority+0xd8>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	0019      	movs	r1, r3
 80023a4:	230f      	movs	r3, #15
 80023a6:	400b      	ands	r3, r1
 80023a8:	3b08      	subs	r3, #8
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3306      	adds	r3, #6
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	3304      	adds	r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1dfa      	adds	r2, r7, #7
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	0011      	movs	r1, r2
 80023bc:	2203      	movs	r2, #3
 80023be:	400a      	ands	r2, r1
 80023c0:	00d2      	lsls	r2, r2, #3
 80023c2:	21ff      	movs	r1, #255	; 0xff
 80023c4:	4091      	lsls	r1, r2
 80023c6:	000a      	movs	r2, r1
 80023c8:	43d2      	mvns	r2, r2
 80023ca:	401a      	ands	r2, r3
 80023cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	22ff      	movs	r2, #255	; 0xff
 80023d4:	401a      	ands	r2, r3
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	2303      	movs	r3, #3
 80023de:	4003      	ands	r3, r0
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e4:	4809      	ldr	r0, [pc, #36]	; (800240c <__NVIC_SetPriority+0xd8>)
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	001c      	movs	r4, r3
 80023ec:	230f      	movs	r3, #15
 80023ee:	4023      	ands	r3, r4
 80023f0:	3b08      	subs	r3, #8
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	430a      	orrs	r2, r1
 80023f6:	3306      	adds	r3, #6
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	18c3      	adds	r3, r0, r3
 80023fc:	3304      	adds	r3, #4
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b003      	add	sp, #12
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1e5a      	subs	r2, r3, #1
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	045b      	lsls	r3, r3, #17
 8002420:	429a      	cmp	r2, r3
 8002422:	d301      	bcc.n	8002428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002424:	2301      	movs	r3, #1
 8002426:	e010      	b.n	800244a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <SysTick_Config+0x44>)
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	3a01      	subs	r2, #1
 800242e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002430:	2301      	movs	r3, #1
 8002432:	425b      	negs	r3, r3
 8002434:	2103      	movs	r1, #3
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff7c 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SysTick_Config+0x44>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SysTick_Config+0x44>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	210f      	movs	r1, #15
 8002464:	187b      	adds	r3, r7, r1
 8002466:	1c02      	adds	r2, r0, #0
 8002468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	187b      	adds	r3, r7, r1
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
 8002472:	0011      	movs	r1, r2
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	0002      	movs	r2, r0
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b25b      	sxtb	r3, r3
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff ff33 	bl	8002300 <__NVIC_EnableIRQ>
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff ffaf 	bl	8002410 <SysTick_Config>
 80024b2:	0003      	movs	r3, r0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e14d      	b.n	8002768 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4091      	lsls	r1, r2
 80024d6:	000a      	movs	r2, r1
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d100      	bne.n	80024e4 <HAL_GPIO_Init+0x28>
 80024e2:	e13e      	b.n	8002762 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d005      	beq.n	80024fc <HAL_GPIO_Init+0x40>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2203      	movs	r2, #3
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d130      	bne.n	800255e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	409a      	lsls	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	43da      	mvns	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002532:	2201      	movs	r2, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	43da      	mvns	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	2201      	movs	r2, #1
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	4013      	ands	r3, r2
 8002566:	2b03      	cmp	r3, #3
 8002568:	d017      	beq.n	800259a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d123      	bne.n	80025ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	58d3      	ldr	r3, [r2, r3]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2207      	movs	r2, #7
 80025b8:	4013      	ands	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2107      	movs	r1, #7
 80025d2:	400b      	ands	r3, r1
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	6939      	ldr	r1, [r7, #16]
 80025ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	43da      	mvns	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	401a      	ands	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	0013      	movs	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	23c0      	movs	r3, #192	; 0xc0
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	d100      	bne.n	8002630 <HAL_GPIO_Init+0x174>
 800262e:	e098      	b.n	8002762 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002630:	4a53      	ldr	r2, [pc, #332]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3318      	adds	r3, #24
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	589b      	ldr	r3, [r3, r2]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2203      	movs	r2, #3
 8002642:	4013      	ands	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	220f      	movs	r2, #15
 8002648:	409a      	lsls	r2, r3
 800264a:	0013      	movs	r3, r2
 800264c:	43da      	mvns	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	23a0      	movs	r3, #160	; 0xa0
 8002658:	05db      	lsls	r3, r3, #23
 800265a:	429a      	cmp	r2, r3
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x1d6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a48      	ldr	r2, [pc, #288]	; (8002784 <HAL_GPIO_Init+0x2c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x1d2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a47      	ldr	r2, [pc, #284]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x1ce>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a46      	ldr	r2, [pc, #280]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x1ca>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a45      	ldr	r2, [pc, #276]	; (8002790 <HAL_GPIO_Init+0x2d4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x1c6>
 800267e:	2304      	movs	r3, #4
 8002680:	e008      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 8002682:	2305      	movs	r3, #5
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 8002686:	2303      	movs	r3, #3
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 800268a:	2302      	movs	r3, #2
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 8002692:	2300      	movs	r3, #0
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	2103      	movs	r1, #3
 8002698:	400a      	ands	r2, r1
 800269a:	00d2      	lsls	r2, r2, #3
 800269c:	4093      	lsls	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026a4:	4936      	ldr	r1, [pc, #216]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3318      	adds	r3, #24
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026b2:	4a33      	ldr	r2, [pc, #204]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	58d3      	ldr	r3, [r2, r3]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43da      	mvns	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	025b      	lsls	r3, r3, #9
 80026cc:	4013      	ands	r3, r2
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026d8:	4929      	ldr	r1, [pc, #164]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80026e0:	4a27      	ldr	r2, [pc, #156]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 80026e2:	2384      	movs	r3, #132	; 0x84
 80026e4:	58d3      	ldr	r3, [r2, r3]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	4013      	ands	r3, r2
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002706:	491e      	ldr	r1, [pc, #120]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 8002708:	2284      	movs	r2, #132	; 0x84
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	43da      	mvns	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	035b      	lsls	r3, r3, #13
 8002726:	4013      	ands	r3, r2
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43da      	mvns	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	039b      	lsls	r3, r3, #14
 8002750:	4013      	ands	r3, r2
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	40da      	lsrs	r2, r3
 8002770:	1e13      	subs	r3, r2, #0
 8002772:	d000      	beq.n	8002776 <HAL_GPIO_Init+0x2ba>
 8002774:	e6aa      	b.n	80024cc <HAL_GPIO_Init+0x10>
  }
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b006      	add	sp, #24
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021800 	.word	0x40021800
 8002784:	50000400 	.word	0x50000400
 8002788:	50000800 	.word	0x50000800
 800278c:	50000c00 	.word	0x50000c00
 8002790:	50001000 	.word	0x50001000

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	0002      	movs	r2, r0
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	1dba      	adds	r2, r7, #6
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	4013      	ands	r3, r2
 80027aa:	d008      	beq.n	80027be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027ae:	1dba      	adds	r2, r7, #6
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f815 	bl	80027e8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	1dba      	adds	r2, r7, #6
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	4013      	ands	r3, r2
 80027c8:	d008      	beq.n	80027dc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027cc:	1dba      	adds	r2, r7, #6
 80027ce:	8812      	ldrh	r2, [r2, #0]
 80027d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80027d2:	1dbb      	adds	r3, r7, #6
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe f8ac 	bl	8000934 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021800 	.word	0x40021800

080027e8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	0002      	movs	r2, r0
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b002      	add	sp, #8
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d11f      	bne.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	0013      	movs	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	189b      	adds	r3, r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4912      	ldr	r1, [pc, #72]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800282e:	0018      	movs	r0, r3
 8002830:	f7fd fc68 	bl	8000104 <__udivsi3>
 8002834:	0003      	movs	r3, r0
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283a:	e008      	b.n	800284e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3b01      	subs	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e001      	b.n	800284e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e009      	b.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	401a      	ands	r2, r3
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	429a      	cmp	r2, r3
 800285e:	d0ed      	beq.n	800283c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	40007000 	.word	0x40007000
 8002870:	fffff9ff 	.word	0xfffff9ff
 8002874:	20000000 	.word	0x20000000
 8002878:	000f4240 	.word	0x000f4240

0800287c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d102      	bne.n	8002890 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f000 fb56 	bl	8002f3c <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2201      	movs	r2, #1
 8002896:	4013      	ands	r3, r2
 8002898:	d100      	bne.n	800289c <HAL_RCC_OscConfig+0x20>
 800289a:	e07d      	b.n	8002998 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289c:	4bc3      	ldr	r3, [pc, #780]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2238      	movs	r2, #56	; 0x38
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a6:	4bc1      	ldr	r3, [pc, #772]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2203      	movs	r2, #3
 80028ac:	4013      	ands	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x40>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d002      	beq.n	80028c2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4bba      	ldr	r3, [pc, #744]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	029b      	lsls	r3, r3, #10
 80028ca:	4013      	ands	r3, r2
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x11a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d15f      	bne.n	8002996 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f000 fb30 	bl	8002f3c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	025b      	lsls	r3, r3, #9
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_OscConfig+0x7c>
 80028e8:	4bb0      	ldr	r3, [pc, #704]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4baf      	ldr	r3, [pc, #700]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	0249      	lsls	r1, r1, #9
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e020      	b.n	800293a <HAL_RCC_OscConfig+0xbe>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	23a0      	movs	r3, #160	; 0xa0
 80028fe:	02db      	lsls	r3, r3, #11
 8002900:	429a      	cmp	r2, r3
 8002902:	d10e      	bne.n	8002922 <HAL_RCC_OscConfig+0xa6>
 8002904:	4ba9      	ldr	r3, [pc, #676]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4ba8      	ldr	r3, [pc, #672]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	02c9      	lsls	r1, r1, #11
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	4ba6      	ldr	r3, [pc, #664]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4ba5      	ldr	r3, [pc, #660]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0249      	lsls	r1, r1, #9
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e00b      	b.n	800293a <HAL_RCC_OscConfig+0xbe>
 8002922:	4ba2      	ldr	r3, [pc, #648]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4ba1      	ldr	r3, [pc, #644]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002928:	49a1      	ldr	r1, [pc, #644]	; (8002bb0 <HAL_RCC_OscConfig+0x334>)
 800292a:	400a      	ands	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	4b9f      	ldr	r3, [pc, #636]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b9e      	ldr	r3, [pc, #632]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002934:	499f      	ldr	r1, [pc, #636]	; (8002bb4 <HAL_RCC_OscConfig+0x338>)
 8002936:	400a      	ands	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d014      	beq.n	800296c <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7fe fbf3 	bl	800112c <HAL_GetTick>
 8002946:	0003      	movs	r3, r0
 8002948:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7fe fbee 	bl	800112c <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e2ee      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	4b93      	ldr	r3, [pc, #588]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	029b      	lsls	r3, r3, #10
 8002966:	4013      	ands	r3, r2
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xd0>
 800296a:	e015      	b.n	8002998 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fbde 	bl	800112c <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002976:	f7fe fbd9 	bl	800112c <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	; 0x64
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e2d9      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002988:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	4013      	ands	r3, r2
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0xfa>
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002996:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2202      	movs	r2, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d100      	bne.n	80029a4 <HAL_RCC_OscConfig+0x128>
 80029a2:	e099      	b.n	8002ad8 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a4:	4b81      	ldr	r3, [pc, #516]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2238      	movs	r2, #56	; 0x38
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ae:	4b7f      	ldr	r3, [pc, #508]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2203      	movs	r2, #3
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d102      	bne.n	80029c4 <HAL_RCC_OscConfig+0x148>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d002      	beq.n	80029ca <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d135      	bne.n	8002a36 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ca:	4b78      	ldr	r3, [pc, #480]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4013      	ands	r3, r2
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x166>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e2ac      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b72      	ldr	r3, [pc, #456]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a74      	ldr	r2, [pc, #464]	; (8002bb8 <HAL_RCC_OscConfig+0x33c>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	021a      	lsls	r2, r3, #8
 80029f2:	4b6e      	ldr	r3, [pc, #440]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029fe:	4b6b      	ldr	r3, [pc, #428]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a12:	4b66      	ldr	r3, [pc, #408]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0adb      	lsrs	r3, r3, #11
 8002a18:	2207      	movs	r2, #7
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	4a68      	ldr	r2, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x344>)
 8002a1e:	40da      	lsrs	r2, r3
 8002a20:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x348>)
 8002a22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x34c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7fe fb23 	bl	8001074 <HAL_InitTick>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d051      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e282      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d030      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5e      	ldr	r2, [pc, #376]	; (8002bbc <HAL_RCC_OscConfig+0x340>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	4b57      	ldr	r3, [pc, #348]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a52:	4b56      	ldr	r3, [pc, #344]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b55      	ldr	r3, [pc, #340]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0049      	lsls	r1, r1, #1
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fb64 	bl	800112c <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fb5f 	bl	800112c <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e25f      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4013      	ands	r3, r2
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b48      	ldr	r3, [pc, #288]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <HAL_RCC_OscConfig+0x33c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	0019      	movs	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	021a      	lsls	r2, r3, #8
 8002a98:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	e01b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002aa0:	4b42      	ldr	r3, [pc, #264]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002aa6:	4949      	ldr	r1, [pc, #292]	; (8002bcc <HAL_RCC_OscConfig+0x350>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fb3e 	bl	800112c <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fb39 	bl	800112c <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e239      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac8:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x23a>
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d047      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2238      	movs	r2, #56	; 0x38
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b18      	cmp	r3, #24
 8002aec:	d10a      	bne.n	8002b04 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	d03c      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2f6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d138      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e21b      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d019      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	430a      	orrs	r2, r1
 8002b16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fb08 	bl	800112c <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fb03 	bl	800112c <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e203      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	2202      	movs	r2, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d0f1      	beq.n	8002b22 <HAL_RCC_OscConfig+0x2a6>
 8002b3e:	e018      	b.n	8002b72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b46:	2101      	movs	r1, #1
 8002b48:	438a      	bics	r2, r1
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe faee 	bl	800112c <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b56:	f7fe fae9 	bl	800112c <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1e9      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d1f1      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2204      	movs	r2, #4
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <HAL_RCC_OscConfig+0x302>
 8002b7c:	e0c6      	b.n	8002d0c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	231f      	movs	r3, #31
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2238      	movs	r2, #56	; 0x38
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d11e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <HAL_RCC_OscConfig+0x322>
 8002b9c:	e0b6      	b.n	8002d0c <HAL_RCC_OscConfig+0x490>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d000      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x32c>
 8002ba6:	e0b1      	b.n	8002d0c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e1c7      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	fffeffff 	.word	0xfffeffff
 8002bb4:	fffbffff 	.word	0xfffbffff
 8002bb8:	ffff80ff 	.word	0xffff80ff
 8002bbc:	ffffc7ff 	.word	0xffffc7ff
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd0:	4bb8      	ldr	r3, [pc, #736]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	055b      	lsls	r3, r3, #21
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_OscConfig+0x364>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x366>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d011      	beq.n	8002c0a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4bb3      	ldr	r3, [pc, #716]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bea:	4bb2      	ldr	r3, [pc, #712]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0549      	lsls	r1, r1, #21
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bf4:	4baf      	ldr	r3, [pc, #700]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	055b      	lsls	r3, r3, #21
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c02:	231f      	movs	r3, #31
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0a:	4bab      	ldr	r3, [pc, #684]	; (8002eb8 <HAL_RCC_OscConfig+0x63c>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c16:	4ba8      	ldr	r3, [pc, #672]	; (8002eb8 <HAL_RCC_OscConfig+0x63c>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4ba7      	ldr	r3, [pc, #668]	; (8002eb8 <HAL_RCC_OscConfig+0x63c>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0049      	lsls	r1, r1, #1
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fa82 	bl	800112c <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fe fa7d 	bl	800112c <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e17d      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c40:	4b9d      	ldr	r3, [pc, #628]	; (8002eb8 <HAL_RCC_OscConfig+0x63c>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3e6>
 8002c54:	4b97      	ldr	r3, [pc, #604]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c58:	4b96      	ldr	r3, [pc, #600]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0x420>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x408>
 8002c6a:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c6e:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c70:	2104      	movs	r1, #4
 8002c72:	430a      	orrs	r2, r1
 8002c74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c76:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c7a:	4b8e      	ldr	r3, [pc, #568]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x420>
 8002c84:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c88:	4b8a      	ldr	r3, [pc, #552]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c90:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c94:	4b87      	ldr	r3, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002c96:	2104      	movs	r1, #4
 8002c98:	438a      	bics	r2, r1
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d014      	beq.n	8002cce <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fa42 	bl	800112c <HAL_GetTick>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cac:	e009      	b.n	8002cc2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe fa3d 	bl	800112c <HAL_GetTick>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x640>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e13c      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	4b7c      	ldr	r3, [pc, #496]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x432>
 8002ccc:	e013      	b.n	8002cf6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fa2d 	bl	800112c <HAL_GetTick>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd6:	e009      	b.n	8002cec <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fa28 	bl	800112c <HAL_GetTick>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	4a76      	ldr	r2, [pc, #472]	; (8002ebc <HAL_RCC_OscConfig+0x640>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e127      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002cf6:	231f      	movs	r3, #31
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d06:	496e      	ldr	r1, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x644>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2220      	movs	r2, #32
 8002d12:	4013      	ands	r3, r2
 8002d14:	d039      	beq.n	8002d8a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b64      	ldr	r3, [pc, #400]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	03c9      	lsls	r1, r1, #15
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe f9fe 	bl	800112c <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d36:	f7fe f9f9 	bl	800112c <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0f9      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d48:	4b5a      	ldr	r3, [pc, #360]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x4ba>
 8002d54:	e019      	b.n	8002d8a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d56:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d5c:	4959      	ldr	r1, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x648>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7fe f9e3 	bl	800112c <HAL_GetTick>
 8002d66:	0003      	movs	r3, r0
 8002d68:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6c:	f7fe f9de 	bl	800112c <HAL_GetTick>
 8002d70:	0002      	movs	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0de      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d7e:	4b4d      	ldr	r3, [pc, #308]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	4013      	ands	r3, r2
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d100      	bne.n	8002d94 <HAL_RCC_OscConfig+0x518>
 8002d92:	e0d2      	b.n	8002f3a <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2238      	movs	r2, #56	; 0x38
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d100      	bne.n	8002da2 <HAL_RCC_OscConfig+0x526>
 8002da0:	e081      	b.n	8002ea6 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d156      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002db0:	4945      	ldr	r1, [pc, #276]	; (8002ec8 <HAL_RCC_OscConfig+0x64c>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe f9b9 	bl	800112c <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe f9b4 	bl	800112c <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e0b4      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	049b      	lsls	r3, r3, #18
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dde:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a3a      	ldr	r2, [pc, #232]	; (8002ecc <HAL_RCC_OscConfig+0x650>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e12:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0449      	lsls	r1, r1, #17
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	0549      	lsls	r1, r1, #21
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7fe f97d 	bl	800112c <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe f978 	bl	800112c <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e078      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	049b      	lsls	r3, r3, #18
 8002e52:	4013      	ands	r3, r2
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x5bc>
 8002e56:	e070      	b.n	8002f3a <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e5e:	491a      	ldr	r1, [pc, #104]	; (8002ec8 <HAL_RCC_OscConfig+0x64c>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e6a:	2103      	movs	r1, #3
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e76:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_OscConfig+0x654>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe f956 	bl	800112c <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe f951 	bl	800112c <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e051      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_OscConfig+0x638>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	049b      	lsls	r3, r3, #18
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x60a>
 8002ea4:	e049      	b.n	8002f3a <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d112      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e044      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	00001388 	.word	0x00001388
 8002ec0:	efffffff 	.word	0xefffffff
 8002ec4:	ffbfffff 	.word	0xffbfffff
 8002ec8:	feffffff 	.word	0xfeffffff
 8002ecc:	11c1808c 	.word	0x11c1808c
 8002ed0:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x6c8>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2203      	movs	r2, #3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d126      	bne.n	8002f36 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2270      	movs	r2, #112	; 0x70
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	23fe      	movs	r3, #254	; 0xfe
 8002efa:	01db      	lsls	r3, r3, #7
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d116      	bne.n	8002f36 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	23f8      	movs	r3, #248	; 0xf8
 8002f0c:	039b      	lsls	r3, r3, #14
 8002f0e:	401a      	ands	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10e      	bne.n	8002f36 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	23e0      	movs	r3, #224	; 0xe0
 8002f1c:	051b      	lsls	r3, r3, #20
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	0f5b      	lsrs	r3, r3, #29
 8002f2c:	075a      	lsls	r2, r3, #29
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b008      	add	sp, #32
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0e9      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2207      	movs	r2, #7
 8002f62:	4013      	ands	r3, r2
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d91e      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2207      	movs	r2, #7
 8002f70:	4393      	bics	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	4b70      	ldr	r3, [pc, #448]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f8d6 	bl	800112c <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f84:	e009      	b.n	8002f9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f86:	f7fe f8d1 	bl	800112c <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_RCC_ClockConfig+0x1f4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0ca      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d015      	beq.n	8002fde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d006      	beq.n	8002fca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fbc:	4b60      	ldr	r3, [pc, #384]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b5f      	ldr	r3, [pc, #380]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc2:	21e0      	movs	r1, #224	; 0xe0
 8002fc4:	01c9      	lsls	r1, r1, #7
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fca:	4b5d      	ldr	r3, [pc, #372]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <HAL_RCC_ClockConfig+0x1fc>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	4b59      	ldr	r3, [pc, #356]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d057      	beq.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	029b      	lsls	r3, r3, #10
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d12b      	bne.n	8003054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e097      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d107      	bne.n	8003018 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003008:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	049b      	lsls	r3, r3, #18
 8003010:	4013      	ands	r3, r2
 8003012:	d11f      	bne.n	8003054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e08b      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003020:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4013      	ands	r3, r2
 800302a:	d113      	bne.n	8003054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e07f      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d106      	bne.n	8003046 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003038:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 800303a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d108      	bne.n	8003054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e074      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003046:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	2202      	movs	r2, #2
 800304c:	4013      	ands	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e06d      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003054:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2207      	movs	r2, #7
 800305a:	4393      	bics	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe f860 	bl	800112c <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003070:	e009      	b.n	8003086 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003072:	f7fe f85b 	bl	800112c <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	4a2f      	ldr	r2, [pc, #188]	; (800313c <HAL_RCC_ClockConfig+0x1f4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e054      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2238      	movs	r2, #56	; 0x38
 800308c:	401a      	ands	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	429a      	cmp	r2, r3
 8003096:	d1ec      	bne.n	8003072 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2207      	movs	r2, #7
 800309e:	4013      	ands	r3, r2
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d21e      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2207      	movs	r2, #7
 80030ac:	4393      	bics	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030b8:	f7fe f838 	bl	800112c <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c2:	f7fe f833 	bl	800112c <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_RCC_ClockConfig+0x1f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e02c      	b.n	8003130 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2207      	movs	r2, #7
 80030dc:	4013      	ands	r3, r2
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2204      	movs	r2, #4
 80030ea:	4013      	ands	r3, r2
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_RCC_ClockConfig+0x200>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003102:	f000 f829 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003106:	0001      	movs	r1, r0
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <HAL_RCC_ClockConfig+0x1f8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	220f      	movs	r2, #15
 8003110:	401a      	ands	r2, r3
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x204>)
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	58d3      	ldr	r3, [r2, r3]
 8003118:	221f      	movs	r2, #31
 800311a:	4013      	ands	r3, r2
 800311c:	000a      	movs	r2, r1
 800311e:	40da      	lsrs	r2, r3
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_ClockConfig+0x208>)
 8003122:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_ClockConfig+0x20c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0018      	movs	r0, r3
 800312a:	f7fd ffa3 	bl	8001074 <HAL_InitTick>
 800312e:	0003      	movs	r3, r0
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40022000 	.word	0x40022000
 800313c:	00001388 	.word	0x00001388
 8003140:	40021000 	.word	0x40021000
 8003144:	fffff0ff 	.word	0xfffff0ff
 8003148:	ffff8fff 	.word	0xffff8fff
 800314c:	08004a5c 	.word	0x08004a5c
 8003150:	20000000 	.word	0x20000000
 8003154:	20000004 	.word	0x20000004

08003158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800315e:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2238      	movs	r2, #56	; 0x38
 8003164:	4013      	ands	r3, r2
 8003166:	d10f      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0adb      	lsrs	r3, r3, #11
 800316e:	2207      	movs	r2, #7
 8003170:	4013      	ands	r3, r2
 8003172:	2201      	movs	r2, #1
 8003174:	409a      	lsls	r2, r3
 8003176:	0013      	movs	r3, r2
 8003178:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	4835      	ldr	r0, [pc, #212]	; (8003254 <HAL_RCC_GetSysClockFreq+0xfc>)
 800317e:	f7fc ffc1 	bl	8000104 <__udivsi3>
 8003182:	0003      	movs	r3, r0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e05d      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2238      	movs	r2, #56	; 0x38
 800318e:	4013      	ands	r3, r2
 8003190:	2b08      	cmp	r3, #8
 8003192:	d102      	bne.n	800319a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <HAL_RCC_GetSysClockFreq+0x100>)
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e054      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2238      	movs	r2, #56	; 0x38
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d138      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2203      	movs	r2, #3
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	2207      	movs	r2, #7
 80031b8:	4013      	ands	r3, r2
 80031ba:	3301      	adds	r3, #1
 80031bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4824      	ldr	r0, [pc, #144]	; (8003258 <HAL_RCC_GetSysClockFreq+0x100>)
 80031c8:	f7fc ff9c 	bl	8000104 <__udivsi3>
 80031cc:	0003      	movs	r3, r0
 80031ce:	0019      	movs	r1, r3
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	227f      	movs	r2, #127	; 0x7f
 80031d8:	4013      	ands	r3, r2
 80031da:	434b      	muls	r3, r1
 80031dc:	617b      	str	r3, [r7, #20]
        break;
 80031de:	e00d      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	481c      	ldr	r0, [pc, #112]	; (8003254 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031e4:	f7fc ff8e 	bl	8000104 <__udivsi3>
 80031e8:	0003      	movs	r3, r0
 80031ea:	0019      	movs	r1, r3
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	227f      	movs	r2, #127	; 0x7f
 80031f4:	4013      	ands	r3, r2
 80031f6:	434b      	muls	r3, r1
 80031f8:	617b      	str	r3, [r7, #20]
        break;
 80031fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0f5b      	lsrs	r3, r3, #29
 8003202:	2207      	movs	r2, #7
 8003204:	4013      	ands	r3, r2
 8003206:	3301      	adds	r3, #1
 8003208:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7fc ff79 	bl	8000104 <__udivsi3>
 8003212:	0003      	movs	r3, r0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e015      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2238      	movs	r2, #56	; 0x38
 800321e:	4013      	ands	r3, r2
 8003220:	2b20      	cmp	r3, #32
 8003222:	d103      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	e00b      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCC_GetSysClockFreq+0xf8>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2238      	movs	r2, #56	; 0x38
 8003232:	4013      	ands	r3, r2
 8003234:	2b18      	cmp	r3, #24
 8003236:	d103      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003238:	23fa      	movs	r3, #250	; 0xfa
 800323a:	01db      	lsls	r3, r3, #7
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	e001      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003244:	693b      	ldr	r3, [r7, #16]
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b006      	add	sp, #24
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	40021000 	.word	0x40021000
 8003254:	00f42400 	.word	0x00f42400
 8003258:	007a1200 	.word	0x007a1200

0800325c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003264:	2313      	movs	r3, #19
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800326c:	2312      	movs	r3, #18
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	029b      	lsls	r3, r3, #10
 800327c:	4013      	ands	r3, r2
 800327e:	d100      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003280:	e0ad      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2011      	movs	r0, #17
 8003284:	183b      	adds	r3, r7, r0
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800328c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	055b      	lsls	r3, r3, #21
 8003292:	4013      	ands	r3, r2
 8003294:	d110      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b44      	ldr	r3, [pc, #272]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329a:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	0549      	lsls	r1, r1, #21
 80032a0:	430a      	orrs	r2, r1
 80032a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a4:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	055b      	lsls	r3, r3, #21
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	183b      	adds	r3, r7, r0
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80032be:	2180      	movs	r1, #128	; 0x80
 80032c0:	0049      	lsls	r1, r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032c6:	f7fd ff31 	bl	800112c <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ce:	e00b      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d0:	f7fd ff2c 	bl	800112c <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d904      	bls.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80032de:	2313      	movs	r3, #19
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2203      	movs	r2, #3
 80032e4:	701a      	strb	r2, [r3, #0]
        break;
 80032e6:	e005      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	d0ed      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80032f4:	2313      	movs	r3, #19
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d15e      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003302:	23c0      	movs	r3, #192	; 0xc0
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4013      	ands	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d019      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	429a      	cmp	r2, r3
 8003318:	d014      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800331a:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003320:	4013      	ands	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003324:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800332a:	2180      	movs	r1, #128	; 0x80
 800332c:	0249      	lsls	r1, r1, #9
 800332e:	430a      	orrs	r2, r1
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003334:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003338:	491e      	ldr	r1, [pc, #120]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800333a:	400a      	ands	r2, r1
 800333c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2201      	movs	r2, #1
 8003348:	4013      	ands	r3, r2
 800334a:	d016      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fd feee 	bl	800112c <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003354:	e00c      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fd fee9 	bl	800112c <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d904      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003366:	2313      	movs	r3, #19
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2203      	movs	r2, #3
 800336c:	701a      	strb	r2, [r3, #0]
            break;
 800336e:	e004      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d0ed      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800337a:	2313      	movs	r3, #19
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003394:	430a      	orrs	r2, r1
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c
 8003398:	e016      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800339a:	2312      	movs	r3, #18
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2213      	movs	r2, #19
 80033a0:	18ba      	adds	r2, r7, r2
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e00f      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
 80033b0:	fffffcff 	.word	0xfffffcff
 80033b4:	fffeffff 	.word	0xfffeffff
 80033b8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	2312      	movs	r3, #18
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2213      	movs	r2, #19
 80033c2:	18ba      	adds	r2, r7, r2
 80033c4:	7812      	ldrb	r2, [r2, #0]
 80033c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c8:	2311      	movs	r3, #17
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4bb6      	ldr	r3, [pc, #728]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d6:	4bb5      	ldr	r3, [pc, #724]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033d8:	49b5      	ldr	r1, [pc, #724]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80033da:	400a      	ands	r2, r1
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2201      	movs	r2, #1
 80033e4:	4013      	ands	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e8:	4bb0      	ldr	r3, [pc, #704]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	2203      	movs	r2, #3
 80033ee:	4393      	bics	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4bad      	ldr	r3, [pc, #692]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2202      	movs	r2, #2
 8003402:	4013      	ands	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003406:	4ba9      	ldr	r3, [pc, #676]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	220c      	movs	r2, #12
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4ba5      	ldr	r3, [pc, #660]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003416:	430a      	orrs	r2, r1
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2204      	movs	r2, #4
 8003420:	4013      	ands	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003424:	4ba1      	ldr	r3, [pc, #644]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	2230      	movs	r2, #48	; 0x30
 800342a:	4393      	bics	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	4b9e      	ldr	r3, [pc, #632]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003434:	430a      	orrs	r2, r1
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003442:	4b9a      	ldr	r3, [pc, #616]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	4a9b      	ldr	r2, [pc, #620]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	4b96      	ldr	r3, [pc, #600]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003452:	430a      	orrs	r2, r1
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	015b      	lsls	r3, r3, #5
 800345e:	4013      	ands	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003462:	4b92      	ldr	r3, [pc, #584]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	4a94      	ldr	r2, [pc, #592]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	4b8e      	ldr	r3, [pc, #568]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003472:	430a      	orrs	r2, r1
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4013      	ands	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003482:	4b8a      	ldr	r3, [pc, #552]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	4a8d      	ldr	r2, [pc, #564]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003490:	4b86      	ldr	r3, [pc, #536]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003492:	430a      	orrs	r2, r1
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a2:	4b82      	ldr	r3, [pc, #520]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	4a86      	ldr	r2, [pc, #536]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4b7e      	ldr	r3, [pc, #504]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034b2:	430a      	orrs	r2, r1
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2220      	movs	r2, #32
 80034bc:	4013      	ands	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c0:	4b7a      	ldr	r3, [pc, #488]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	4b77      	ldr	r3, [pc, #476]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034d0:	430a      	orrs	r2, r1
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2240      	movs	r2, #64	; 0x40
 80034da:	4013      	ands	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034de:	4b73      	ldr	r3, [pc, #460]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	4a79      	ldr	r2, [pc, #484]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	4b6f      	ldr	r3, [pc, #444]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034ee:	430a      	orrs	r2, r1
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	01db      	lsls	r3, r3, #7
 80034fa:	4013      	ands	r3, r2
 80034fc:	d015      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034fe:	4b6b      	ldr	r3, [pc, #428]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	0899      	lsrs	r1, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350a:	4b68      	ldr	r3, [pc, #416]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800350c:	430a      	orrs	r2, r1
 800350e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	05db      	lsls	r3, r3, #23
 8003518:	429a      	cmp	r2, r3
 800351a:	d106      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800351c:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	4b62      	ldr	r3, [pc, #392]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	0249      	lsls	r1, r1, #9
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	031b      	lsls	r3, r3, #12
 8003532:	4013      	ands	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003536:	4b5d      	ldr	r3, [pc, #372]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	4393      	bics	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003546:	430a      	orrs	r2, r1
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	039b      	lsls	r3, r3, #14
 8003552:	4013      	ands	r3, r2
 8003554:	d016      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003556:	4b55      	ldr	r3, [pc, #340]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800355c:	4013      	ands	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003564:	4b51      	ldr	r3, [pc, #324]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003566:	430a      	orrs	r2, r1
 8003568:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	03db      	lsls	r3, r3, #15
 8003572:	429a      	cmp	r2, r3
 8003574:	d106      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003576:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	0449      	lsls	r1, r1, #17
 8003580:	430a      	orrs	r2, r1
 8003582:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	03db      	lsls	r3, r3, #15
 800358c:	4013      	ands	r3, r2
 800358e:	d016      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003590:	4b46      	ldr	r3, [pc, #280]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	4a4e      	ldr	r2, [pc, #312]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035a0:	430a      	orrs	r2, r1
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	045b      	lsls	r3, r3, #17
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d106      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80035b0:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	0449      	lsls	r1, r1, #17
 80035ba:	430a      	orrs	r2, r1
 80035bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	4013      	ands	r3, r2
 80035c8:	d014      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80035ca:	4b38      	ldr	r3, [pc, #224]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	2203      	movs	r2, #3
 80035d0:	4393      	bics	r3, r2
 80035d2:	0019      	movs	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035da:	430a      	orrs	r2, r1
 80035dc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d106      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	0249      	lsls	r1, r1, #9
 80035f0:	430a      	orrs	r2, r1
 80035f2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	019b      	lsls	r3, r3, #6
 80035fc:	4013      	ands	r3, r2
 80035fe:	d014      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003600:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	220c      	movs	r2, #12
 8003606:	4393      	bics	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360e:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003610:	430a      	orrs	r2, r1
 8003612:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2b04      	cmp	r3, #4
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800361c:	4b23      	ldr	r3, [pc, #140]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0249      	lsls	r1, r1, #9
 8003626:	430a      	orrs	r2, r1
 8003628:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	045b      	lsls	r3, r3, #17
 8003632:	4013      	ands	r3, r2
 8003634:	d016      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800363c:	4013      	ands	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003646:	430a      	orrs	r2, r1
 8003648:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	429a      	cmp	r2, r3
 8003654:	d106      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	0449      	lsls	r1, r1, #17
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	049b      	lsls	r3, r3, #18
 800366c:	4013      	ands	r3, r2
 800366e:	d016      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003676:	4013      	ands	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003680:	430a      	orrs	r2, r1
 8003682:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	429a      	cmp	r2, r3
 800368e:	d106      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	0449      	lsls	r1, r1, #17
 800369a:	430a      	orrs	r2, r1
 800369c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800369e:	2312      	movs	r3, #18
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	781b      	ldrb	r3, [r3, #0]
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b006      	add	sp, #24
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	efffffff 	.word	0xefffffff
 80036b4:	fffff3ff 	.word	0xfffff3ff
 80036b8:	fffffcff 	.word	0xfffffcff
 80036bc:	fff3ffff 	.word	0xfff3ffff
 80036c0:	ffcfffff 	.word	0xffcfffff
 80036c4:	ffffcfff 	.word	0xffffcfff
 80036c8:	ffff3fff 	.word	0xffff3fff
 80036cc:	ffbfffff 	.word	0xffbfffff
 80036d0:	feffffff 	.word	0xfeffffff

080036d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e04a      	b.n	800377c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	223d      	movs	r2, #61	; 0x3d
 80036ea:	5c9b      	ldrb	r3, [r3, r2]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	223c      	movs	r2, #60	; 0x3c
 80036f6:	2100      	movs	r1, #0
 80036f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fd fbcf 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223d      	movs	r2, #61	; 0x3d
 8003706:	2102      	movs	r1, #2
 8003708:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	0019      	movs	r1, r3
 8003714:	0010      	movs	r0, r2
 8003716:	f000 fca1 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2248      	movs	r2, #72	; 0x48
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223e      	movs	r2, #62	; 0x3e
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	223f      	movs	r2, #63	; 0x3f
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2240      	movs	r2, #64	; 0x40
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2241      	movs	r2, #65	; 0x41
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2242      	movs	r2, #66	; 0x42
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2243      	movs	r2, #67	; 0x43
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2244      	movs	r2, #68	; 0x44
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2245      	movs	r2, #69	; 0x45
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2246      	movs	r2, #70	; 0x46
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2247      	movs	r2, #71	; 0x47
 800376e:	2101      	movs	r1, #1
 8003770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	223d      	movs	r2, #61	; 0x3d
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b002      	add	sp, #8
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e04a      	b.n	800382c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	223d      	movs	r2, #61	; 0x3d
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d107      	bne.n	80037b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	223c      	movs	r2, #60	; 0x3c
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f841 	bl	8003834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	223d      	movs	r2, #61	; 0x3d
 80037b6:	2102      	movs	r1, #2
 80037b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3304      	adds	r3, #4
 80037c2:	0019      	movs	r1, r3
 80037c4:	0010      	movs	r0, r2
 80037c6:	f000 fc49 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2248      	movs	r2, #72	; 0x48
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	223e      	movs	r2, #62	; 0x3e
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223f      	movs	r2, #63	; 0x3f
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2240      	movs	r2, #64	; 0x40
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2241      	movs	r2, #65	; 0x41
 80037ee:	2101      	movs	r1, #1
 80037f0:	5499      	strb	r1, [r3, r2]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2242      	movs	r2, #66	; 0x42
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2243      	movs	r2, #67	; 0x43
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2244      	movs	r2, #68	; 0x44
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2245      	movs	r2, #69	; 0x45
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2246      	movs	r2, #70	; 0x46
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2247      	movs	r2, #71	; 0x47
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223d      	movs	r2, #61	; 0x3d
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <HAL_TIM_PWM_Start+0x22>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	223e      	movs	r2, #62	; 0x3e
 8003858:	5c9b      	ldrb	r3, [r3, r2]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	1e5a      	subs	r2, r3, #1
 8003860:	4193      	sbcs	r3, r2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e037      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d108      	bne.n	800387e <HAL_TIM_PWM_Start+0x3a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	223f      	movs	r2, #63	; 0x3f
 8003870:	5c9b      	ldrb	r3, [r3, r2]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	1e5a      	subs	r2, r3, #1
 8003878:	4193      	sbcs	r3, r2
 800387a:	b2db      	uxtb	r3, r3
 800387c:	e02b      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d108      	bne.n	8003896 <HAL_TIM_PWM_Start+0x52>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	4193      	sbcs	r3, r2
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e01f      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d108      	bne.n	80038ae <HAL_TIM_PWM_Start+0x6a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2241      	movs	r2, #65	; 0x41
 80038a0:	5c9b      	ldrb	r3, [r3, r2]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	1e5a      	subs	r2, r3, #1
 80038a8:	4193      	sbcs	r3, r2
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e013      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d108      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x82>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2242      	movs	r2, #66	; 0x42
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	4193      	sbcs	r3, r2
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e007      	b.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2243      	movs	r2, #67	; 0x43
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	4193      	sbcs	r3, r2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e090      	b.n	8003a00 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0xaa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	223e      	movs	r2, #62	; 0x3e
 80038e8:	2102      	movs	r1, #2
 80038ea:	5499      	strb	r1, [r3, r2]
 80038ec:	e023      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_PWM_Start+0xba>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	223f      	movs	r2, #63	; 0x3f
 80038f8:	2102      	movs	r1, #2
 80038fa:	5499      	strb	r1, [r3, r2]
 80038fc:	e01b      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Start+0xca>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2240      	movs	r2, #64	; 0x40
 8003908:	2102      	movs	r1, #2
 800390a:	5499      	strb	r1, [r3, r2]
 800390c:	e013      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b0c      	cmp	r3, #12
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Start+0xda>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2241      	movs	r2, #65	; 0x41
 8003918:	2102      	movs	r1, #2
 800391a:	5499      	strb	r1, [r3, r2]
 800391c:	e00b      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b10      	cmp	r3, #16
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Start+0xea>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2242      	movs	r2, #66	; 0x42
 8003928:	2102      	movs	r1, #2
 800392a:	5499      	strb	r1, [r3, r2]
 800392c:	e003      	b.n	8003936 <HAL_TIM_PWM_Start+0xf2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2243      	movs	r2, #67	; 0x43
 8003932:	2102      	movs	r1, #2
 8003934:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6839      	ldr	r1, [r7, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	0018      	movs	r0, r3
 8003940:	f000 ff76 	bl	8004830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <HAL_TIM_PWM_Start+0x1c4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_TIM_PWM_Start+0x128>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2e      	ldr	r2, [pc, #184]	; (8003a0c <HAL_TIM_PWM_Start+0x1c8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_TIM_PWM_Start+0x128>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <HAL_TIM_PWM_Start+0x1cc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_PWM_Start+0x128>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_TIM_PWM_Start+0x1d0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_TIM_PWM_Start+0x12c>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_TIM_PWM_Start+0x12e>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0209      	lsls	r1, r1, #8
 8003984:	430a      	orrs	r2, r1
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_TIM_PWM_Start+0x1c4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d014      	beq.n	80039bc <HAL_TIM_PWM_Start+0x178>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	05db      	lsls	r3, r3, #23
 800399a:	429a      	cmp	r2, r3
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_PWM_Start+0x178>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_TIM_PWM_Start+0x1d4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_PWM_Start+0x178>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_TIM_PWM_Start+0x1d8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_PWM_Start+0x178>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <HAL_TIM_PWM_Start+0x1c8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d116      	bne.n	80039ea <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_TIM_PWM_Start+0x1dc>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d016      	beq.n	80039fc <HAL_TIM_PWM_Start+0x1b8>
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	025b      	lsls	r3, r3, #9
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d011      	beq.n	80039fc <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	e008      	b.n	80039fc <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e000      	b.n	80039fe <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40014400 	.word	0x40014400
 8003a14:	40014800 	.word	0x40014800
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800
 8003a20:	00010007 	.word	0x00010007

08003a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2202      	movs	r2, #2
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d124      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d11d      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	4252      	negs	r2, r2
 8003a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4013      	ands	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fae0 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003a6c:	e007      	b.n	8003a7e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 fad3 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 fadf 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d125      	bne.n	8003ade <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d11e      	bne.n	8003ade <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	4252      	negs	r2, r2
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	23c0      	movs	r3, #192	; 0xc0
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4013      	ands	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 fab3 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003ac6:	e007      	b.n	8003ad8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 faa6 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 fab2 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d124      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2208      	movs	r2, #8
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11d      	bne.n	8003b36 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2209      	movs	r2, #9
 8003b00:	4252      	negs	r2, r2
 8003b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2204      	movs	r2, #4
 8003b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2203      	movs	r2, #3
 8003b12:	4013      	ands	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f000 fa87 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003b1e:	e007      	b.n	8003b30 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 fa7a 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 fa86 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d125      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d11e      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2211      	movs	r2, #17
 8003b58:	4252      	negs	r2, r2
 8003b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	23c0      	movs	r3, #192	; 0xc0
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 fa5a 	bl	800402c <HAL_TIM_IC_CaptureCallback>
 8003b78:	e007      	b.n	8003b8a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 fa4d 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 fa59 	bl	800403c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2201      	movs	r2, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10f      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d108      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	4252      	negs	r2, r2
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 fa27 	bl	800400c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d10f      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b80      	cmp	r3, #128	; 0x80
 8003bd8:	d108      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2281      	movs	r2, #129	; 0x81
 8003be0:	4252      	negs	r2, r2
 8003be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 fec4 	bl	8004974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d10e      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <HAL_TIM_IRQHandler+0x260>)
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 feb3 	bl	8004984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d10f      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d108      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2241      	movs	r2, #65	; 0x41
 8003c40:	4252      	negs	r2, r2
 8003c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 fa00 	bl	800404c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2220      	movs	r2, #32
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d10f      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d108      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2221      	movs	r2, #33	; 0x21
 8003c6e:	4252      	negs	r2, r2
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fe75 	bl	8004964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	fffffeff 	.word	0xfffffeff

08003c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	223c      	movs	r2, #60	; 0x3c
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e0df      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	223c      	movs	r2, #60	; 0x3c
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b14      	cmp	r3, #20
 8003cae:	d900      	bls.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003cb0:	e0d1      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	009a      	lsls	r2, r3, #2
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8003cb8:	18d3      	adds	r3, r2, r3
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	0011      	movs	r1, r2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fa52 	bl	8004170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2108      	movs	r1, #8
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2104      	movs	r1, #4
 8003ce8:	438a      	bics	r2, r1
 8003cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6999      	ldr	r1, [r3, #24]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	619a      	str	r2, [r3, #24]
      break;
 8003cfe:	e0ab      	b.n	8003e58 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	0011      	movs	r1, r2
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f000 fabb 	bl	8004284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	0109      	lsls	r1, r1, #4
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4951      	ldr	r1, [pc, #324]	; (8003e70 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	619a      	str	r2, [r3, #24]
      break;
 8003d44:	e088      	b.n	8003e58 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 fb1c 	bl	800438c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2108      	movs	r1, #8
 8003d60:	430a      	orrs	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2104      	movs	r1, #4
 8003d70:	438a      	bics	r2, r1
 8003d72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69d9      	ldr	r1, [r3, #28]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	61da      	str	r2, [r3, #28]
      break;
 8003d86:	e067      	b.n	8003e58 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 fb83 	bl	800449c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	0109      	lsls	r1, r1, #4
 8003da4:	430a      	orrs	r2, r1
 8003da6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	492f      	ldr	r1, [pc, #188]	; (8003e70 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69d9      	ldr	r1, [r3, #28]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
      break;
 8003dcc:	e044      	b.n	8003e58 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 fbca 	bl	8004570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2108      	movs	r1, #8
 8003de8:	430a      	orrs	r2, r1
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2104      	movs	r1, #4
 8003df8:	438a      	bics	r2, r1
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e0e:	e023      	b.n	8003e58 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 fc09 	bl	8004630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	0109      	lsls	r1, r1, #4
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	490d      	ldr	r1, [pc, #52]	; (8003e70 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e54:	e000      	b.n	8003e58 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8003e56:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	223c      	movs	r2, #60	; 0x3c
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	08004a9c 	.word	0x08004a9c
 8003e70:	fffffbff 	.word	0xfffffbff

08003e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223c      	movs	r2, #60	; 0x3c
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_ConfigClockSource+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e0b7      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x188>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	223c      	movs	r2, #60	; 0x3c
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223d      	movs	r2, #61	; 0x3d
 8003e98:	2102      	movs	r1, #2
 8003e9a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_TIM_ConfigClockSource+0x190>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a56      	ldr	r2, [pc, #344]	; (8004008 <HAL_TIM_ConfigClockSource+0x194>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	0192      	lsls	r2, r2, #6
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d040      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xd6>
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	0192      	lsls	r2, r2, #6
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d900      	bls.n	8003ed2 <HAL_TIM_ConfigClockSource+0x5e>
 8003ed0:	e088      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	0152      	lsls	r2, r2, #5
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d100      	bne.n	8003edc <HAL_TIM_ConfigClockSource+0x68>
 8003eda:	e085      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	0152      	lsls	r2, r2, #5
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d900      	bls.n	8003ee6 <HAL_TIM_ConfigClockSource+0x72>
 8003ee4:	e07e      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003ee6:	2b70      	cmp	r3, #112	; 0x70
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIM_ConfigClockSource+0xa8>
 8003eea:	d900      	bls.n	8003eee <HAL_TIM_ConfigClockSource+0x7a>
 8003eec:	e07a      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003eee:	2b60      	cmp	r3, #96	; 0x60
 8003ef0:	d04f      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x11e>
 8003ef2:	d900      	bls.n	8003ef6 <HAL_TIM_ConfigClockSource+0x82>
 8003ef4:	e076      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003ef6:	2b50      	cmp	r3, #80	; 0x50
 8003ef8:	d03b      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0xfe>
 8003efa:	d900      	bls.n	8003efe <HAL_TIM_ConfigClockSource+0x8a>
 8003efc:	e072      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d057      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x13e>
 8003f02:	d900      	bls.n	8003f06 <HAL_TIM_ConfigClockSource+0x92>
 8003f04:	e06e      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d063      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003f0a:	d86b      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d060      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003f10:	d868      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d05d      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d05b      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f1a:	e063      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f000 fc60 	bl	80047f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2277      	movs	r2, #119	; 0x77
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	609a      	str	r2, [r3, #8]
      break;
 8003f48:	e04f      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f000 fc49 	bl	80047f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	01c9      	lsls	r1, r1, #7
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
      break;
 8003f70:	e03b      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	001a      	movs	r2, r3
 8003f80:	f000 fbba 	bl	80046f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2150      	movs	r1, #80	; 0x50
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fc14 	bl	80047b8 <TIM_ITRx_SetConfig>
      break;
 8003f90:	e02b      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	f000 fbd8 	bl	8004754 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2160      	movs	r1, #96	; 0x60
 8003faa:	0018      	movs	r0, r3
 8003fac:	f000 fc04 	bl	80047b8 <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e01b      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	f000 fb9a 	bl	80046f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2140      	movs	r1, #64	; 0x40
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 fbf4 	bl	80047b8 <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e00b      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	0019      	movs	r1, r3
 8003fdc:	0010      	movs	r0, r2
 8003fde:	f000 fbeb 	bl	80047b8 <TIM_ITRx_SetConfig>
        break;
 8003fe2:	e002      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	e000      	b.n	8003fea <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003fe8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	223d      	movs	r2, #61	; 0x3d
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	223c      	movs	r2, #60	; 0x3c
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b004      	add	sp, #16
 8004002:	bd80      	pop	{r7, pc}
 8004004:	ffceff88 	.word	0xffceff88
 8004008:	ffff00ff 	.word	0xffff00ff

0800400c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b002      	add	sp, #8
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a38      	ldr	r2, [pc, #224]	; (8004150 <TIM_Base_SetConfig+0xf4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00c      	beq.n	800408e <TIM_Base_SetConfig+0x32>
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	05db      	lsls	r3, r3, #23
 800407a:	429a      	cmp	r2, r3
 800407c:	d007      	beq.n	800408e <TIM_Base_SetConfig+0x32>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a34      	ldr	r2, [pc, #208]	; (8004154 <TIM_Base_SetConfig+0xf8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_Base_SetConfig+0x32>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a33      	ldr	r2, [pc, #204]	; (8004158 <TIM_Base_SetConfig+0xfc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2270      	movs	r2, #112	; 0x70
 8004092:	4393      	bics	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <TIM_Base_SetConfig+0xf4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d01c      	beq.n	80040e2 <TIM_Base_SetConfig+0x86>
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	05db      	lsls	r3, r3, #23
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d017      	beq.n	80040e2 <TIM_Base_SetConfig+0x86>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a27      	ldr	r2, [pc, #156]	; (8004154 <TIM_Base_SetConfig+0xf8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <TIM_Base_SetConfig+0x86>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a26      	ldr	r2, [pc, #152]	; (8004158 <TIM_Base_SetConfig+0xfc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00f      	beq.n	80040e2 <TIM_Base_SetConfig+0x86>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <TIM_Base_SetConfig+0x100>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0x86>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <TIM_Base_SetConfig+0x104>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0x86>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a23      	ldr	r2, [pc, #140]	; (8004164 <TIM_Base_SetConfig+0x108>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0x86>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a22      	ldr	r2, [pc, #136]	; (8004168 <TIM_Base_SetConfig+0x10c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a21      	ldr	r2, [pc, #132]	; (800416c <TIM_Base_SetConfig+0x110>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	4393      	bics	r3, r2
 80040fa:	001a      	movs	r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <TIM_Base_SetConfig+0xf4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00b      	beq.n	800413a <TIM_Base_SetConfig+0xde>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <TIM_Base_SetConfig+0x104>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d007      	beq.n	800413a <TIM_Base_SetConfig+0xde>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <TIM_Base_SetConfig+0x108>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_Base_SetConfig+0xde>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <TIM_Base_SetConfig+0x10c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d103      	bne.n	8004142 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	615a      	str	r2, [r3, #20]
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b004      	add	sp, #16
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40002000 	.word	0x40002000
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800
 800416c:	fffffcff 	.word	0xfffffcff

08004170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	2201      	movs	r2, #1
 8004180:	4393      	bics	r3, r2
 8004182:	001a      	movs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a32      	ldr	r2, [pc, #200]	; (8004268 <TIM_OC1_SetConfig+0xf8>)
 800419e:	4013      	ands	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2203      	movs	r2, #3
 80041a6:	4393      	bics	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2202      	movs	r2, #2
 80041b8:	4393      	bics	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	; (800426c <TIM_OC1_SetConfig+0xfc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_OC1_SetConfig+0x76>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <TIM_OC1_SetConfig+0x100>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_OC1_SetConfig+0x76>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <TIM_OC1_SetConfig+0x104>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC1_SetConfig+0x76>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_OC1_SetConfig+0x108>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10c      	bne.n	8004200 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2208      	movs	r2, #8
 80041ea:	4393      	bics	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2204      	movs	r2, #4
 80041fc:	4393      	bics	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a1a      	ldr	r2, [pc, #104]	; (800426c <TIM_OC1_SetConfig+0xfc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00b      	beq.n	8004220 <TIM_OC1_SetConfig+0xb0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a19      	ldr	r2, [pc, #100]	; (8004270 <TIM_OC1_SetConfig+0x100>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d007      	beq.n	8004220 <TIM_OC1_SetConfig+0xb0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a18      	ldr	r2, [pc, #96]	; (8004274 <TIM_OC1_SetConfig+0x104>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC1_SetConfig+0xb0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <TIM_OC1_SetConfig+0x108>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d111      	bne.n	8004244 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <TIM_OC1_SetConfig+0x10c>)
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <TIM_OC1_SetConfig+0x110>)
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b006      	add	sp, #24
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	fffeff8f 	.word	0xfffeff8f
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40014000 	.word	0x40014000
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800
 800427c:	fffffeff 	.word	0xfffffeff
 8004280:	fffffdff 	.word	0xfffffdff

08004284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	2210      	movs	r2, #16
 8004294:	4393      	bics	r3, r2
 8004296:	001a      	movs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a2e      	ldr	r2, [pc, #184]	; (800436c <TIM_OC2_SetConfig+0xe8>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a2d      	ldr	r2, [pc, #180]	; (8004370 <TIM_OC2_SetConfig+0xec>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2220      	movs	r2, #32
 80042ce:	4393      	bics	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a24      	ldr	r2, [pc, #144]	; (8004374 <TIM_OC2_SetConfig+0xf0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10d      	bne.n	8004302 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	4393      	bics	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	4393      	bics	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <TIM_OC2_SetConfig+0xf0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00b      	beq.n	8004322 <TIM_OC2_SetConfig+0x9e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <TIM_OC2_SetConfig+0xf4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d007      	beq.n	8004322 <TIM_OC2_SetConfig+0x9e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a19      	ldr	r2, [pc, #100]	; (800437c <TIM_OC2_SetConfig+0xf8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_OC2_SetConfig+0x9e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a18      	ldr	r2, [pc, #96]	; (8004380 <TIM_OC2_SetConfig+0xfc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d113      	bne.n	800434a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4a17      	ldr	r2, [pc, #92]	; (8004384 <TIM_OC2_SetConfig+0x100>)
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4a16      	ldr	r2, [pc, #88]	; (8004388 <TIM_OC2_SetConfig+0x104>)
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b006      	add	sp, #24
 800436a:	bd80      	pop	{r7, pc}
 800436c:	feff8fff 	.word	0xfeff8fff
 8004370:	fffffcff 	.word	0xfffffcff
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800
 8004384:	fffffbff 	.word	0xfffffbff
 8004388:	fffff7ff 	.word	0xfffff7ff

0800438c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4a35      	ldr	r2, [pc, #212]	; (8004470 <TIM_OC3_SetConfig+0xe4>)
 800439c:	401a      	ands	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <TIM_OC3_SetConfig+0xe8>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2203      	movs	r2, #3
 80043c0:	4393      	bics	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	4a29      	ldr	r2, [pc, #164]	; (8004478 <TIM_OC3_SetConfig+0xec>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <TIM_OC3_SetConfig+0xf0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10d      	bne.n	8004406 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <TIM_OC3_SetConfig+0xf4>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	4a20      	ldr	r2, [pc, #128]	; (8004484 <TIM_OC3_SetConfig+0xf8>)
 8004402:	4013      	ands	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <TIM_OC3_SetConfig+0xf0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_OC3_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <TIM_OC3_SetConfig+0xfc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_OC3_SetConfig+0x9a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1c      	ldr	r2, [pc, #112]	; (800448c <TIM_OC3_SetConfig+0x100>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_OC3_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <TIM_OC3_SetConfig+0x104>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d113      	bne.n	800444e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <TIM_OC3_SetConfig+0x108>)
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4a19      	ldr	r2, [pc, #100]	; (8004498 <TIM_OC3_SetConfig+0x10c>)
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b006      	add	sp, #24
 800446e:	bd80      	pop	{r7, pc}
 8004470:	fffffeff 	.word	0xfffffeff
 8004474:	fffeff8f 	.word	0xfffeff8f
 8004478:	fffffdff 	.word	0xfffffdff
 800447c:	40012c00 	.word	0x40012c00
 8004480:	fffff7ff 	.word	0xfffff7ff
 8004484:	fffffbff 	.word	0xfffffbff
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800
 8004494:	ffffefff 	.word	0xffffefff
 8004498:	ffffdfff 	.word	0xffffdfff

0800449c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	4a28      	ldr	r2, [pc, #160]	; (800454c <TIM_OC4_SetConfig+0xb0>)
 80044ac:	401a      	ands	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a22      	ldr	r2, [pc, #136]	; (8004550 <TIM_OC4_SetConfig+0xb4>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a21      	ldr	r2, [pc, #132]	; (8004554 <TIM_OC4_SetConfig+0xb8>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <TIM_OC4_SetConfig+0xbc>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a19      	ldr	r2, [pc, #100]	; (800455c <TIM_OC4_SetConfig+0xc0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00b      	beq.n	8004514 <TIM_OC4_SetConfig+0x78>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <TIM_OC4_SetConfig+0xc4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <TIM_OC4_SetConfig+0x78>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a17      	ldr	r2, [pc, #92]	; (8004564 <TIM_OC4_SetConfig+0xc8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_OC4_SetConfig+0x78>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a16      	ldr	r2, [pc, #88]	; (8004568 <TIM_OC4_SetConfig+0xcc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d109      	bne.n	8004528 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <TIM_OC4_SetConfig+0xd0>)
 8004518:	4013      	ands	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	b006      	add	sp, #24
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	ffffefff 	.word	0xffffefff
 8004550:	feff8fff 	.word	0xfeff8fff
 8004554:	fffffcff 	.word	0xfffffcff
 8004558:	ffffdfff 	.word	0xffffdfff
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800
 800456c:	ffffbfff 	.word	0xffffbfff

08004570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4a25      	ldr	r2, [pc, #148]	; (8004614 <TIM_OC5_SetConfig+0xa4>)
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <TIM_OC5_SetConfig+0xa8>)
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <TIM_OC5_SetConfig+0xac>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a17      	ldr	r2, [pc, #92]	; (8004620 <TIM_OC5_SetConfig+0xb0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <TIM_OC5_SetConfig+0x6e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a16      	ldr	r2, [pc, #88]	; (8004624 <TIM_OC5_SetConfig+0xb4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <TIM_OC5_SetConfig+0x6e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <TIM_OC5_SetConfig+0xb8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_OC5_SetConfig+0x6e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <TIM_OC5_SetConfig+0xbc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d109      	bne.n	80045f2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <TIM_OC5_SetConfig+0xa4>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	621a      	str	r2, [r3, #32]
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b006      	add	sp, #24
 8004612:	bd80      	pop	{r7, pc}
 8004614:	fffeffff 	.word	0xfffeffff
 8004618:	fffeff8f 	.word	0xfffeff8f
 800461c:	fffdffff 	.word	0xfffdffff
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400
 800462c:	40014800 	.word	0x40014800

08004630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <TIM_OC6_SetConfig+0xa8>)
 8004640:	401a      	ands	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a20      	ldr	r2, [pc, #128]	; (80046dc <TIM_OC6_SetConfig+0xac>)
 800465c:	4013      	ands	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <TIM_OC6_SetConfig+0xb0>)
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	051b      	lsls	r3, r3, #20
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <TIM_OC6_SetConfig+0xb4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00b      	beq.n	80046a0 <TIM_OC6_SetConfig+0x70>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <TIM_OC6_SetConfig+0xb8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_OC6_SetConfig+0x70>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a16      	ldr	r2, [pc, #88]	; (80046ec <TIM_OC6_SetConfig+0xbc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC6_SetConfig+0x70>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <TIM_OC6_SetConfig+0xc0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d109      	bne.n	80046b4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <TIM_OC6_SetConfig+0xc4>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	029b      	lsls	r3, r3, #10
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b006      	add	sp, #24
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	ffefffff 	.word	0xffefffff
 80046dc:	feff8fff 	.word	0xfeff8fff
 80046e0:	ffdfffff 	.word	0xffdfffff
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400
 80046f0:	40014800 	.word	0x40014800
 80046f4:	fffbffff 	.word	0xfffbffff

080046f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2201      	movs	r2, #1
 8004710:	4393      	bics	r3, r2
 8004712:	001a      	movs	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	22f0      	movs	r2, #240	; 0xf0
 8004722:	4393      	bics	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	220a      	movs	r2, #10
 8004734:	4393      	bics	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	621a      	str	r2, [r3, #32]
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b006      	add	sp, #24
 8004752:	bd80      	pop	{r7, pc}

08004754 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	2210      	movs	r2, #16
 8004766:	4393      	bics	r3, r2
 8004768:	001a      	movs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <TIM_TI2_ConfigInputStage+0x60>)
 800477e:	4013      	ands	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	22a0      	movs	r2, #160	; 0xa0
 8004790:	4393      	bics	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b006      	add	sp, #24
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	ffff0fff 	.word	0xffff0fff

080047b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <TIM_ITRx_SetConfig+0x34>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	2207      	movs	r2, #7
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	609a      	str	r2, [r3, #8]
}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b004      	add	sp, #16
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	ffcfff8f 	.word	0xffcfff8f

080047f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4a09      	ldr	r2, [pc, #36]	; (800482c <TIM_ETR_SetConfig+0x3c>)
 8004808:	4013      	ands	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	021a      	lsls	r2, r3, #8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	431a      	orrs	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b006      	add	sp, #24
 800482a:	bd80      	pop	{r7, pc}
 800482c:	ffff00ff 	.word	0xffff00ff

08004830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	221f      	movs	r2, #31
 8004840:	4013      	ands	r3, r2
 8004842:	2201      	movs	r2, #1
 8004844:	409a      	lsls	r2, r3
 8004846:	0013      	movs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	43d2      	mvns	r2, r2
 8004852:	401a      	ands	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	211f      	movs	r1, #31
 8004860:	400b      	ands	r3, r1
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4099      	lsls	r1, r3
 8004866:	000b      	movs	r3, r1
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b006      	add	sp, #24
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223c      	movs	r2, #60	; 0x3c
 8004886:	5c9b      	ldrb	r3, [r3, r2]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e05a      	b.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	223c      	movs	r2, #60	; 0x3c
 8004894:	2101      	movs	r1, #1
 8004896:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	223d      	movs	r2, #61	; 0x3d
 800489c:	2102      	movs	r1, #2
 800489e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a26      	ldr	r2, [pc, #152]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a25      	ldr	r2, [pc, #148]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2270      	movs	r2, #112	; 0x70
 80048d0:	4393      	bics	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d014      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	2380      	movs	r3, #128	; 0x80
 80048f6:	05db      	lsls	r3, r3, #23
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d00e      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a12      	ldr	r2, [pc, #72]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10c      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	4393      	bics	r3, r2
 8004920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	223d      	movs	r2, #61	; 0x3d
 8004938:	2101      	movs	r1, #1
 800493a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	223c      	movs	r2, #60	; 0x3c
 8004940:	2100      	movs	r1, #0
 8004942:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b004      	add	sp, #16
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	40012c00 	.word	0x40012c00
 8004954:	ff0fffff 	.word	0xff0fffff
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40014000 	.word	0x40014000

08004964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b002      	add	sp, #8
 8004992:	bd80      	pop	{r7, pc}

08004994 <__libc_init_array>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	2600      	movs	r6, #0
 8004998:	4d0c      	ldr	r5, [pc, #48]	; (80049cc <__libc_init_array+0x38>)
 800499a:	4c0d      	ldr	r4, [pc, #52]	; (80049d0 <__libc_init_array+0x3c>)
 800499c:	1b64      	subs	r4, r4, r5
 800499e:	10a4      	asrs	r4, r4, #2
 80049a0:	42a6      	cmp	r6, r4
 80049a2:	d109      	bne.n	80049b8 <__libc_init_array+0x24>
 80049a4:	2600      	movs	r6, #0
 80049a6:	f000 f821 	bl	80049ec <_init>
 80049aa:	4d0a      	ldr	r5, [pc, #40]	; (80049d4 <__libc_init_array+0x40>)
 80049ac:	4c0a      	ldr	r4, [pc, #40]	; (80049d8 <__libc_init_array+0x44>)
 80049ae:	1b64      	subs	r4, r4, r5
 80049b0:	10a4      	asrs	r4, r4, #2
 80049b2:	42a6      	cmp	r6, r4
 80049b4:	d105      	bne.n	80049c2 <__libc_init_array+0x2e>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	00b3      	lsls	r3, r6, #2
 80049ba:	58eb      	ldr	r3, [r5, r3]
 80049bc:	4798      	blx	r3
 80049be:	3601      	adds	r6, #1
 80049c0:	e7ee      	b.n	80049a0 <__libc_init_array+0xc>
 80049c2:	00b3      	lsls	r3, r6, #2
 80049c4:	58eb      	ldr	r3, [r5, r3]
 80049c6:	4798      	blx	r3
 80049c8:	3601      	adds	r6, #1
 80049ca:	e7f2      	b.n	80049b2 <__libc_init_array+0x1e>
 80049cc:	08004af0 	.word	0x08004af0
 80049d0:	08004af0 	.word	0x08004af0
 80049d4:	08004af0 	.word	0x08004af0
 80049d8:	08004af4 	.word	0x08004af4

080049dc <memset>:
 80049dc:	0003      	movs	r3, r0
 80049de:	1882      	adds	r2, r0, r2
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	7019      	strb	r1, [r3, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <_init>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr

080049f8 <_fini>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr
