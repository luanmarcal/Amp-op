
motor-cc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f4c  08004f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f4c  08004f4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f4c  08004f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08004f60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08004f60  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df8b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea7  00000000  00000000  0002dfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00030c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be67  00000000  00000000  00031930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e706  00000000  00000000  0004d797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba630  00000000  00000000  0005be9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001164cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e8  00000000  00000000  00116520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004e08 	.word	0x08004e08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004e08 	.word	0x08004e08

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_ddiv>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	4681      	mov	r9, r0
 800022a:	0005      	movs	r5, r0
 800022c:	030c      	lsls	r4, r1, #12
 800022e:	0048      	lsls	r0, r1, #1
 8000230:	4692      	mov	sl, r2
 8000232:	001f      	movs	r7, r3
 8000234:	b085      	sub	sp, #20
 8000236:	0b24      	lsrs	r4, r4, #12
 8000238:	0d40      	lsrs	r0, r0, #21
 800023a:	0fce      	lsrs	r6, r1, #31
 800023c:	2800      	cmp	r0, #0
 800023e:	d059      	beq.n	80002f4 <__aeabi_ddiv+0xd8>
 8000240:	4b87      	ldr	r3, [pc, #540]	; (8000460 <__aeabi_ddiv+0x244>)
 8000242:	4298      	cmp	r0, r3
 8000244:	d100      	bne.n	8000248 <__aeabi_ddiv+0x2c>
 8000246:	e098      	b.n	800037a <__aeabi_ddiv+0x15e>
 8000248:	0f6b      	lsrs	r3, r5, #29
 800024a:	00e4      	lsls	r4, r4, #3
 800024c:	431c      	orrs	r4, r3
 800024e:	2380      	movs	r3, #128	; 0x80
 8000250:	041b      	lsls	r3, r3, #16
 8000252:	4323      	orrs	r3, r4
 8000254:	4698      	mov	r8, r3
 8000256:	4b83      	ldr	r3, [pc, #524]	; (8000464 <__aeabi_ddiv+0x248>)
 8000258:	00ed      	lsls	r5, r5, #3
 800025a:	469b      	mov	fp, r3
 800025c:	2300      	movs	r3, #0
 800025e:	4699      	mov	r9, r3
 8000260:	4483      	add	fp, r0
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	033c      	lsls	r4, r7, #12
 8000266:	007b      	lsls	r3, r7, #1
 8000268:	4650      	mov	r0, sl
 800026a:	0b24      	lsrs	r4, r4, #12
 800026c:	0d5b      	lsrs	r3, r3, #21
 800026e:	0fff      	lsrs	r7, r7, #31
 8000270:	2b00      	cmp	r3, #0
 8000272:	d067      	beq.n	8000344 <__aeabi_ddiv+0x128>
 8000274:	4a7a      	ldr	r2, [pc, #488]	; (8000460 <__aeabi_ddiv+0x244>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d018      	beq.n	80002ac <__aeabi_ddiv+0x90>
 800027a:	497a      	ldr	r1, [pc, #488]	; (8000464 <__aeabi_ddiv+0x248>)
 800027c:	0f42      	lsrs	r2, r0, #29
 800027e:	468c      	mov	ip, r1
 8000280:	00e4      	lsls	r4, r4, #3
 8000282:	4659      	mov	r1, fp
 8000284:	4314      	orrs	r4, r2
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	4463      	add	r3, ip
 800028a:	0412      	lsls	r2, r2, #16
 800028c:	1acb      	subs	r3, r1, r3
 800028e:	4314      	orrs	r4, r2
 8000290:	469b      	mov	fp, r3
 8000292:	00c2      	lsls	r2, r0, #3
 8000294:	2000      	movs	r0, #0
 8000296:	0033      	movs	r3, r6
 8000298:	407b      	eors	r3, r7
 800029a:	469a      	mov	sl, r3
 800029c:	464b      	mov	r3, r9
 800029e:	2b0f      	cmp	r3, #15
 80002a0:	d900      	bls.n	80002a4 <__aeabi_ddiv+0x88>
 80002a2:	e0ef      	b.n	8000484 <__aeabi_ddiv+0x268>
 80002a4:	4970      	ldr	r1, [pc, #448]	; (8000468 <__aeabi_ddiv+0x24c>)
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	58cb      	ldr	r3, [r1, r3]
 80002aa:	469f      	mov	pc, r3
 80002ac:	4b6f      	ldr	r3, [pc, #444]	; (800046c <__aeabi_ddiv+0x250>)
 80002ae:	4652      	mov	r2, sl
 80002b0:	469c      	mov	ip, r3
 80002b2:	4322      	orrs	r2, r4
 80002b4:	44e3      	add	fp, ip
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d000      	beq.n	80002bc <__aeabi_ddiv+0xa0>
 80002ba:	e095      	b.n	80003e8 <__aeabi_ddiv+0x1cc>
 80002bc:	4649      	mov	r1, r9
 80002be:	2302      	movs	r3, #2
 80002c0:	4319      	orrs	r1, r3
 80002c2:	4689      	mov	r9, r1
 80002c4:	2400      	movs	r4, #0
 80002c6:	2002      	movs	r0, #2
 80002c8:	e7e5      	b.n	8000296 <__aeabi_ddiv+0x7a>
 80002ca:	2300      	movs	r3, #0
 80002cc:	2400      	movs	r4, #0
 80002ce:	2500      	movs	r5, #0
 80002d0:	4652      	mov	r2, sl
 80002d2:	051b      	lsls	r3, r3, #20
 80002d4:	4323      	orrs	r3, r4
 80002d6:	07d2      	lsls	r2, r2, #31
 80002d8:	4313      	orrs	r3, r2
 80002da:	0028      	movs	r0, r5
 80002dc:	0019      	movs	r1, r3
 80002de:	b005      	add	sp, #20
 80002e0:	bcf0      	pop	{r4, r5, r6, r7}
 80002e2:	46bb      	mov	fp, r7
 80002e4:	46b2      	mov	sl, r6
 80002e6:	46a9      	mov	r9, r5
 80002e8:	46a0      	mov	r8, r4
 80002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ec:	2400      	movs	r4, #0
 80002ee:	2500      	movs	r5, #0
 80002f0:	4b5b      	ldr	r3, [pc, #364]	; (8000460 <__aeabi_ddiv+0x244>)
 80002f2:	e7ed      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 80002f4:	464b      	mov	r3, r9
 80002f6:	4323      	orrs	r3, r4
 80002f8:	4698      	mov	r8, r3
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0xe2>
 80002fc:	e089      	b.n	8000412 <__aeabi_ddiv+0x1f6>
 80002fe:	2c00      	cmp	r4, #0
 8000300:	d100      	bne.n	8000304 <__aeabi_ddiv+0xe8>
 8000302:	e1e0      	b.n	80006c6 <__aeabi_ddiv+0x4aa>
 8000304:	0020      	movs	r0, r4
 8000306:	f000 fdbb 	bl	8000e80 <__clzsi2>
 800030a:	0001      	movs	r1, r0
 800030c:	0002      	movs	r2, r0
 800030e:	390b      	subs	r1, #11
 8000310:	231d      	movs	r3, #29
 8000312:	1a5b      	subs	r3, r3, r1
 8000314:	4649      	mov	r1, r9
 8000316:	0010      	movs	r0, r2
 8000318:	40d9      	lsrs	r1, r3
 800031a:	3808      	subs	r0, #8
 800031c:	4084      	lsls	r4, r0
 800031e:	000b      	movs	r3, r1
 8000320:	464d      	mov	r5, r9
 8000322:	4323      	orrs	r3, r4
 8000324:	4698      	mov	r8, r3
 8000326:	4085      	lsls	r5, r0
 8000328:	4851      	ldr	r0, [pc, #324]	; (8000470 <__aeabi_ddiv+0x254>)
 800032a:	033c      	lsls	r4, r7, #12
 800032c:	1a83      	subs	r3, r0, r2
 800032e:	469b      	mov	fp, r3
 8000330:	2300      	movs	r3, #0
 8000332:	4699      	mov	r9, r3
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	007b      	lsls	r3, r7, #1
 8000338:	4650      	mov	r0, sl
 800033a:	0b24      	lsrs	r4, r4, #12
 800033c:	0d5b      	lsrs	r3, r3, #21
 800033e:	0fff      	lsrs	r7, r7, #31
 8000340:	2b00      	cmp	r3, #0
 8000342:	d197      	bne.n	8000274 <__aeabi_ddiv+0x58>
 8000344:	4652      	mov	r2, sl
 8000346:	4322      	orrs	r2, r4
 8000348:	d055      	beq.n	80003f6 <__aeabi_ddiv+0x1da>
 800034a:	2c00      	cmp	r4, #0
 800034c:	d100      	bne.n	8000350 <__aeabi_ddiv+0x134>
 800034e:	e1ca      	b.n	80006e6 <__aeabi_ddiv+0x4ca>
 8000350:	0020      	movs	r0, r4
 8000352:	f000 fd95 	bl	8000e80 <__clzsi2>
 8000356:	0002      	movs	r2, r0
 8000358:	3a0b      	subs	r2, #11
 800035a:	231d      	movs	r3, #29
 800035c:	0001      	movs	r1, r0
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	4652      	mov	r2, sl
 8000362:	3908      	subs	r1, #8
 8000364:	40da      	lsrs	r2, r3
 8000366:	408c      	lsls	r4, r1
 8000368:	4314      	orrs	r4, r2
 800036a:	4652      	mov	r2, sl
 800036c:	408a      	lsls	r2, r1
 800036e:	4b41      	ldr	r3, [pc, #260]	; (8000474 <__aeabi_ddiv+0x258>)
 8000370:	4458      	add	r0, fp
 8000372:	469b      	mov	fp, r3
 8000374:	4483      	add	fp, r0
 8000376:	2000      	movs	r0, #0
 8000378:	e78d      	b.n	8000296 <__aeabi_ddiv+0x7a>
 800037a:	464b      	mov	r3, r9
 800037c:	4323      	orrs	r3, r4
 800037e:	4698      	mov	r8, r3
 8000380:	d140      	bne.n	8000404 <__aeabi_ddiv+0x1e8>
 8000382:	2308      	movs	r3, #8
 8000384:	4699      	mov	r9, r3
 8000386:	3b06      	subs	r3, #6
 8000388:	2500      	movs	r5, #0
 800038a:	4683      	mov	fp, r0
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	e769      	b.n	8000264 <__aeabi_ddiv+0x48>
 8000390:	46b2      	mov	sl, r6
 8000392:	9b00      	ldr	r3, [sp, #0]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d0a9      	beq.n	80002ec <__aeabi_ddiv+0xd0>
 8000398:	2b03      	cmp	r3, #3
 800039a:	d100      	bne.n	800039e <__aeabi_ddiv+0x182>
 800039c:	e211      	b.n	80007c2 <__aeabi_ddiv+0x5a6>
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d093      	beq.n	80002ca <__aeabi_ddiv+0xae>
 80003a2:	4a35      	ldr	r2, [pc, #212]	; (8000478 <__aeabi_ddiv+0x25c>)
 80003a4:	445a      	add	r2, fp
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	dc00      	bgt.n	80003ac <__aeabi_ddiv+0x190>
 80003aa:	e13c      	b.n	8000626 <__aeabi_ddiv+0x40a>
 80003ac:	076b      	lsls	r3, r5, #29
 80003ae:	d000      	beq.n	80003b2 <__aeabi_ddiv+0x196>
 80003b0:	e1a7      	b.n	8000702 <__aeabi_ddiv+0x4e6>
 80003b2:	08ed      	lsrs	r5, r5, #3
 80003b4:	4643      	mov	r3, r8
 80003b6:	01db      	lsls	r3, r3, #7
 80003b8:	d506      	bpl.n	80003c8 <__aeabi_ddiv+0x1ac>
 80003ba:	4642      	mov	r2, r8
 80003bc:	4b2f      	ldr	r3, [pc, #188]	; (800047c <__aeabi_ddiv+0x260>)
 80003be:	401a      	ands	r2, r3
 80003c0:	4690      	mov	r8, r2
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	00d2      	lsls	r2, r2, #3
 80003c6:	445a      	add	r2, fp
 80003c8:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <__aeabi_ddiv+0x264>)
 80003ca:	429a      	cmp	r2, r3
 80003cc:	dc8e      	bgt.n	80002ec <__aeabi_ddiv+0xd0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	0552      	lsls	r2, r2, #21
 80003d2:	0758      	lsls	r0, r3, #29
 80003d4:	025c      	lsls	r4, r3, #9
 80003d6:	4305      	orrs	r5, r0
 80003d8:	0b24      	lsrs	r4, r4, #12
 80003da:	0d53      	lsrs	r3, r2, #21
 80003dc:	e778      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 80003de:	46ba      	mov	sl, r7
 80003e0:	46a0      	mov	r8, r4
 80003e2:	0015      	movs	r5, r2
 80003e4:	9000      	str	r0, [sp, #0]
 80003e6:	e7d4      	b.n	8000392 <__aeabi_ddiv+0x176>
 80003e8:	464a      	mov	r2, r9
 80003ea:	2303      	movs	r3, #3
 80003ec:	431a      	orrs	r2, r3
 80003ee:	4691      	mov	r9, r2
 80003f0:	2003      	movs	r0, #3
 80003f2:	4652      	mov	r2, sl
 80003f4:	e74f      	b.n	8000296 <__aeabi_ddiv+0x7a>
 80003f6:	4649      	mov	r1, r9
 80003f8:	2301      	movs	r3, #1
 80003fa:	4319      	orrs	r1, r3
 80003fc:	4689      	mov	r9, r1
 80003fe:	2400      	movs	r4, #0
 8000400:	2001      	movs	r0, #1
 8000402:	e748      	b.n	8000296 <__aeabi_ddiv+0x7a>
 8000404:	230c      	movs	r3, #12
 8000406:	4699      	mov	r9, r3
 8000408:	3b09      	subs	r3, #9
 800040a:	46a0      	mov	r8, r4
 800040c:	4683      	mov	fp, r0
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	e728      	b.n	8000264 <__aeabi_ddiv+0x48>
 8000412:	2304      	movs	r3, #4
 8000414:	4699      	mov	r9, r3
 8000416:	2300      	movs	r3, #0
 8000418:	469b      	mov	fp, r3
 800041a:	3301      	adds	r3, #1
 800041c:	2500      	movs	r5, #0
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	e720      	b.n	8000264 <__aeabi_ddiv+0x48>
 8000422:	2300      	movs	r3, #0
 8000424:	2480      	movs	r4, #128	; 0x80
 8000426:	469a      	mov	sl, r3
 8000428:	2500      	movs	r5, #0
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <__aeabi_ddiv+0x244>)
 800042c:	0324      	lsls	r4, r4, #12
 800042e:	e74f      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	4641      	mov	r1, r8
 8000434:	031b      	lsls	r3, r3, #12
 8000436:	4219      	tst	r1, r3
 8000438:	d008      	beq.n	800044c <__aeabi_ddiv+0x230>
 800043a:	421c      	tst	r4, r3
 800043c:	d106      	bne.n	800044c <__aeabi_ddiv+0x230>
 800043e:	431c      	orrs	r4, r3
 8000440:	0324      	lsls	r4, r4, #12
 8000442:	46ba      	mov	sl, r7
 8000444:	0015      	movs	r5, r2
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <__aeabi_ddiv+0x244>)
 8000448:	0b24      	lsrs	r4, r4, #12
 800044a:	e741      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 800044c:	2480      	movs	r4, #128	; 0x80
 800044e:	4643      	mov	r3, r8
 8000450:	0324      	lsls	r4, r4, #12
 8000452:	431c      	orrs	r4, r3
 8000454:	0324      	lsls	r4, r4, #12
 8000456:	46b2      	mov	sl, r6
 8000458:	4b01      	ldr	r3, [pc, #4]	; (8000460 <__aeabi_ddiv+0x244>)
 800045a:	0b24      	lsrs	r4, r4, #12
 800045c:	e738      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	000007ff 	.word	0x000007ff
 8000464:	fffffc01 	.word	0xfffffc01
 8000468:	08004e20 	.word	0x08004e20
 800046c:	fffff801 	.word	0xfffff801
 8000470:	fffffc0d 	.word	0xfffffc0d
 8000474:	000003f3 	.word	0x000003f3
 8000478:	000003ff 	.word	0x000003ff
 800047c:	feffffff 	.word	0xfeffffff
 8000480:	000007fe 	.word	0x000007fe
 8000484:	4544      	cmp	r4, r8
 8000486:	d200      	bcs.n	800048a <__aeabi_ddiv+0x26e>
 8000488:	e116      	b.n	80006b8 <__aeabi_ddiv+0x49c>
 800048a:	d100      	bne.n	800048e <__aeabi_ddiv+0x272>
 800048c:	e111      	b.n	80006b2 <__aeabi_ddiv+0x496>
 800048e:	2301      	movs	r3, #1
 8000490:	425b      	negs	r3, r3
 8000492:	469c      	mov	ip, r3
 8000494:	002e      	movs	r6, r5
 8000496:	4640      	mov	r0, r8
 8000498:	2500      	movs	r5, #0
 800049a:	44e3      	add	fp, ip
 800049c:	0223      	lsls	r3, r4, #8
 800049e:	0e14      	lsrs	r4, r2, #24
 80004a0:	431c      	orrs	r4, r3
 80004a2:	0c1b      	lsrs	r3, r3, #16
 80004a4:	4699      	mov	r9, r3
 80004a6:	0423      	lsls	r3, r4, #16
 80004a8:	0c1f      	lsrs	r7, r3, #16
 80004aa:	0212      	lsls	r2, r2, #8
 80004ac:	4649      	mov	r1, r9
 80004ae:	9200      	str	r2, [sp, #0]
 80004b0:	9701      	str	r7, [sp, #4]
 80004b2:	f7ff fead 	bl	8000210 <__aeabi_uidivmod>
 80004b6:	0002      	movs	r2, r0
 80004b8:	437a      	muls	r2, r7
 80004ba:	040b      	lsls	r3, r1, #16
 80004bc:	0c31      	lsrs	r1, r6, #16
 80004be:	4680      	mov	r8, r0
 80004c0:	4319      	orrs	r1, r3
 80004c2:	428a      	cmp	r2, r1
 80004c4:	d90b      	bls.n	80004de <__aeabi_ddiv+0x2c2>
 80004c6:	2301      	movs	r3, #1
 80004c8:	425b      	negs	r3, r3
 80004ca:	469c      	mov	ip, r3
 80004cc:	1909      	adds	r1, r1, r4
 80004ce:	44e0      	add	r8, ip
 80004d0:	428c      	cmp	r4, r1
 80004d2:	d804      	bhi.n	80004de <__aeabi_ddiv+0x2c2>
 80004d4:	428a      	cmp	r2, r1
 80004d6:	d902      	bls.n	80004de <__aeabi_ddiv+0x2c2>
 80004d8:	1e83      	subs	r3, r0, #2
 80004da:	4698      	mov	r8, r3
 80004dc:	1909      	adds	r1, r1, r4
 80004de:	1a88      	subs	r0, r1, r2
 80004e0:	4649      	mov	r1, r9
 80004e2:	f7ff fe95 	bl	8000210 <__aeabi_uidivmod>
 80004e6:	0409      	lsls	r1, r1, #16
 80004e8:	468c      	mov	ip, r1
 80004ea:	0431      	lsls	r1, r6, #16
 80004ec:	4666      	mov	r6, ip
 80004ee:	9a01      	ldr	r2, [sp, #4]
 80004f0:	0c09      	lsrs	r1, r1, #16
 80004f2:	4342      	muls	r2, r0
 80004f4:	0003      	movs	r3, r0
 80004f6:	4331      	orrs	r1, r6
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d904      	bls.n	8000506 <__aeabi_ddiv+0x2ea>
 80004fc:	1909      	adds	r1, r1, r4
 80004fe:	3b01      	subs	r3, #1
 8000500:	428c      	cmp	r4, r1
 8000502:	d800      	bhi.n	8000506 <__aeabi_ddiv+0x2ea>
 8000504:	e111      	b.n	800072a <__aeabi_ddiv+0x50e>
 8000506:	1a89      	subs	r1, r1, r2
 8000508:	4642      	mov	r2, r8
 800050a:	9e00      	ldr	r6, [sp, #0]
 800050c:	0412      	lsls	r2, r2, #16
 800050e:	431a      	orrs	r2, r3
 8000510:	0c33      	lsrs	r3, r6, #16
 8000512:	001f      	movs	r7, r3
 8000514:	0c10      	lsrs	r0, r2, #16
 8000516:	4690      	mov	r8, r2
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	0413      	lsls	r3, r2, #16
 800051c:	0432      	lsls	r2, r6, #16
 800051e:	0c16      	lsrs	r6, r2, #16
 8000520:	0032      	movs	r2, r6
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	435a      	muls	r2, r3
 8000526:	9603      	str	r6, [sp, #12]
 8000528:	437b      	muls	r3, r7
 800052a:	4346      	muls	r6, r0
 800052c:	4378      	muls	r0, r7
 800052e:	0c17      	lsrs	r7, r2, #16
 8000530:	46bc      	mov	ip, r7
 8000532:	199b      	adds	r3, r3, r6
 8000534:	4463      	add	r3, ip
 8000536:	429e      	cmp	r6, r3
 8000538:	d903      	bls.n	8000542 <__aeabi_ddiv+0x326>
 800053a:	2680      	movs	r6, #128	; 0x80
 800053c:	0276      	lsls	r6, r6, #9
 800053e:	46b4      	mov	ip, r6
 8000540:	4460      	add	r0, ip
 8000542:	0c1e      	lsrs	r6, r3, #16
 8000544:	1830      	adds	r0, r6, r0
 8000546:	0416      	lsls	r6, r2, #16
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	0c36      	lsrs	r6, r6, #16
 800054c:	199e      	adds	r6, r3, r6
 800054e:	4281      	cmp	r1, r0
 8000550:	d200      	bcs.n	8000554 <__aeabi_ddiv+0x338>
 8000552:	e09c      	b.n	800068e <__aeabi_ddiv+0x472>
 8000554:	d100      	bne.n	8000558 <__aeabi_ddiv+0x33c>
 8000556:	e097      	b.n	8000688 <__aeabi_ddiv+0x46c>
 8000558:	1bae      	subs	r6, r5, r6
 800055a:	1a09      	subs	r1, r1, r0
 800055c:	42b5      	cmp	r5, r6
 800055e:	4180      	sbcs	r0, r0
 8000560:	4240      	negs	r0, r0
 8000562:	1a08      	subs	r0, r1, r0
 8000564:	4284      	cmp	r4, r0
 8000566:	d100      	bne.n	800056a <__aeabi_ddiv+0x34e>
 8000568:	e111      	b.n	800078e <__aeabi_ddiv+0x572>
 800056a:	4649      	mov	r1, r9
 800056c:	f7ff fe50 	bl	8000210 <__aeabi_uidivmod>
 8000570:	9a01      	ldr	r2, [sp, #4]
 8000572:	040b      	lsls	r3, r1, #16
 8000574:	4342      	muls	r2, r0
 8000576:	0c31      	lsrs	r1, r6, #16
 8000578:	0005      	movs	r5, r0
 800057a:	4319      	orrs	r1, r3
 800057c:	428a      	cmp	r2, r1
 800057e:	d907      	bls.n	8000590 <__aeabi_ddiv+0x374>
 8000580:	1909      	adds	r1, r1, r4
 8000582:	3d01      	subs	r5, #1
 8000584:	428c      	cmp	r4, r1
 8000586:	d803      	bhi.n	8000590 <__aeabi_ddiv+0x374>
 8000588:	428a      	cmp	r2, r1
 800058a:	d901      	bls.n	8000590 <__aeabi_ddiv+0x374>
 800058c:	1e85      	subs	r5, r0, #2
 800058e:	1909      	adds	r1, r1, r4
 8000590:	1a88      	subs	r0, r1, r2
 8000592:	4649      	mov	r1, r9
 8000594:	f7ff fe3c 	bl	8000210 <__aeabi_uidivmod>
 8000598:	0409      	lsls	r1, r1, #16
 800059a:	468c      	mov	ip, r1
 800059c:	0431      	lsls	r1, r6, #16
 800059e:	4666      	mov	r6, ip
 80005a0:	9a01      	ldr	r2, [sp, #4]
 80005a2:	0c09      	lsrs	r1, r1, #16
 80005a4:	4342      	muls	r2, r0
 80005a6:	0003      	movs	r3, r0
 80005a8:	4331      	orrs	r1, r6
 80005aa:	428a      	cmp	r2, r1
 80005ac:	d907      	bls.n	80005be <__aeabi_ddiv+0x3a2>
 80005ae:	1909      	adds	r1, r1, r4
 80005b0:	3b01      	subs	r3, #1
 80005b2:	428c      	cmp	r4, r1
 80005b4:	d803      	bhi.n	80005be <__aeabi_ddiv+0x3a2>
 80005b6:	428a      	cmp	r2, r1
 80005b8:	d901      	bls.n	80005be <__aeabi_ddiv+0x3a2>
 80005ba:	1e83      	subs	r3, r0, #2
 80005bc:	1909      	adds	r1, r1, r4
 80005be:	9e03      	ldr	r6, [sp, #12]
 80005c0:	1a89      	subs	r1, r1, r2
 80005c2:	0032      	movs	r2, r6
 80005c4:	042d      	lsls	r5, r5, #16
 80005c6:	431d      	orrs	r5, r3
 80005c8:	9f02      	ldr	r7, [sp, #8]
 80005ca:	042b      	lsls	r3, r5, #16
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	435a      	muls	r2, r3
 80005d0:	437b      	muls	r3, r7
 80005d2:	469c      	mov	ip, r3
 80005d4:	0c28      	lsrs	r0, r5, #16
 80005d6:	4346      	muls	r6, r0
 80005d8:	0c13      	lsrs	r3, r2, #16
 80005da:	44b4      	add	ip, r6
 80005dc:	4463      	add	r3, ip
 80005de:	4378      	muls	r0, r7
 80005e0:	429e      	cmp	r6, r3
 80005e2:	d903      	bls.n	80005ec <__aeabi_ddiv+0x3d0>
 80005e4:	2680      	movs	r6, #128	; 0x80
 80005e6:	0276      	lsls	r6, r6, #9
 80005e8:	46b4      	mov	ip, r6
 80005ea:	4460      	add	r0, ip
 80005ec:	0c1e      	lsrs	r6, r3, #16
 80005ee:	0412      	lsls	r2, r2, #16
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	0c12      	lsrs	r2, r2, #16
 80005f4:	1830      	adds	r0, r6, r0
 80005f6:	189b      	adds	r3, r3, r2
 80005f8:	4281      	cmp	r1, r0
 80005fa:	d306      	bcc.n	800060a <__aeabi_ddiv+0x3ee>
 80005fc:	d002      	beq.n	8000604 <__aeabi_ddiv+0x3e8>
 80005fe:	2301      	movs	r3, #1
 8000600:	431d      	orrs	r5, r3
 8000602:	e6ce      	b.n	80003a2 <__aeabi_ddiv+0x186>
 8000604:	2b00      	cmp	r3, #0
 8000606:	d100      	bne.n	800060a <__aeabi_ddiv+0x3ee>
 8000608:	e6cb      	b.n	80003a2 <__aeabi_ddiv+0x186>
 800060a:	1861      	adds	r1, r4, r1
 800060c:	1e6e      	subs	r6, r5, #1
 800060e:	42a1      	cmp	r1, r4
 8000610:	d200      	bcs.n	8000614 <__aeabi_ddiv+0x3f8>
 8000612:	e0a4      	b.n	800075e <__aeabi_ddiv+0x542>
 8000614:	4281      	cmp	r1, r0
 8000616:	d200      	bcs.n	800061a <__aeabi_ddiv+0x3fe>
 8000618:	e0c9      	b.n	80007ae <__aeabi_ddiv+0x592>
 800061a:	d100      	bne.n	800061e <__aeabi_ddiv+0x402>
 800061c:	e0d9      	b.n	80007d2 <__aeabi_ddiv+0x5b6>
 800061e:	0035      	movs	r5, r6
 8000620:	e7ed      	b.n	80005fe <__aeabi_ddiv+0x3e2>
 8000622:	2501      	movs	r5, #1
 8000624:	426d      	negs	r5, r5
 8000626:	2101      	movs	r1, #1
 8000628:	1a89      	subs	r1, r1, r2
 800062a:	2938      	cmp	r1, #56	; 0x38
 800062c:	dd00      	ble.n	8000630 <__aeabi_ddiv+0x414>
 800062e:	e64c      	b.n	80002ca <__aeabi_ddiv+0xae>
 8000630:	291f      	cmp	r1, #31
 8000632:	dc00      	bgt.n	8000636 <__aeabi_ddiv+0x41a>
 8000634:	e07f      	b.n	8000736 <__aeabi_ddiv+0x51a>
 8000636:	231f      	movs	r3, #31
 8000638:	425b      	negs	r3, r3
 800063a:	1a9a      	subs	r2, r3, r2
 800063c:	4643      	mov	r3, r8
 800063e:	40d3      	lsrs	r3, r2
 8000640:	2920      	cmp	r1, #32
 8000642:	d004      	beq.n	800064e <__aeabi_ddiv+0x432>
 8000644:	4644      	mov	r4, r8
 8000646:	4a65      	ldr	r2, [pc, #404]	; (80007dc <__aeabi_ddiv+0x5c0>)
 8000648:	445a      	add	r2, fp
 800064a:	4094      	lsls	r4, r2
 800064c:	4325      	orrs	r5, r4
 800064e:	1e6a      	subs	r2, r5, #1
 8000650:	4195      	sbcs	r5, r2
 8000652:	2207      	movs	r2, #7
 8000654:	432b      	orrs	r3, r5
 8000656:	0015      	movs	r5, r2
 8000658:	2400      	movs	r4, #0
 800065a:	401d      	ands	r5, r3
 800065c:	421a      	tst	r2, r3
 800065e:	d100      	bne.n	8000662 <__aeabi_ddiv+0x446>
 8000660:	e0a1      	b.n	80007a6 <__aeabi_ddiv+0x58a>
 8000662:	220f      	movs	r2, #15
 8000664:	2400      	movs	r4, #0
 8000666:	401a      	ands	r2, r3
 8000668:	2a04      	cmp	r2, #4
 800066a:	d100      	bne.n	800066e <__aeabi_ddiv+0x452>
 800066c:	e098      	b.n	80007a0 <__aeabi_ddiv+0x584>
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	429a      	cmp	r2, r3
 8000672:	419b      	sbcs	r3, r3
 8000674:	425b      	negs	r3, r3
 8000676:	18e4      	adds	r4, r4, r3
 8000678:	0013      	movs	r3, r2
 800067a:	0222      	lsls	r2, r4, #8
 800067c:	d400      	bmi.n	8000680 <__aeabi_ddiv+0x464>
 800067e:	e08f      	b.n	80007a0 <__aeabi_ddiv+0x584>
 8000680:	2301      	movs	r3, #1
 8000682:	2400      	movs	r4, #0
 8000684:	2500      	movs	r5, #0
 8000686:	e623      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 8000688:	42b5      	cmp	r5, r6
 800068a:	d300      	bcc.n	800068e <__aeabi_ddiv+0x472>
 800068c:	e764      	b.n	8000558 <__aeabi_ddiv+0x33c>
 800068e:	4643      	mov	r3, r8
 8000690:	1e5a      	subs	r2, r3, #1
 8000692:	9b00      	ldr	r3, [sp, #0]
 8000694:	469c      	mov	ip, r3
 8000696:	4465      	add	r5, ip
 8000698:	001f      	movs	r7, r3
 800069a:	429d      	cmp	r5, r3
 800069c:	419b      	sbcs	r3, r3
 800069e:	425b      	negs	r3, r3
 80006a0:	191b      	adds	r3, r3, r4
 80006a2:	18c9      	adds	r1, r1, r3
 80006a4:	428c      	cmp	r4, r1
 80006a6:	d23a      	bcs.n	800071e <__aeabi_ddiv+0x502>
 80006a8:	4288      	cmp	r0, r1
 80006aa:	d863      	bhi.n	8000774 <__aeabi_ddiv+0x558>
 80006ac:	d060      	beq.n	8000770 <__aeabi_ddiv+0x554>
 80006ae:	4690      	mov	r8, r2
 80006b0:	e752      	b.n	8000558 <__aeabi_ddiv+0x33c>
 80006b2:	42aa      	cmp	r2, r5
 80006b4:	d900      	bls.n	80006b8 <__aeabi_ddiv+0x49c>
 80006b6:	e6ea      	b.n	800048e <__aeabi_ddiv+0x272>
 80006b8:	4643      	mov	r3, r8
 80006ba:	07de      	lsls	r6, r3, #31
 80006bc:	0858      	lsrs	r0, r3, #1
 80006be:	086b      	lsrs	r3, r5, #1
 80006c0:	431e      	orrs	r6, r3
 80006c2:	07ed      	lsls	r5, r5, #31
 80006c4:	e6ea      	b.n	800049c <__aeabi_ddiv+0x280>
 80006c6:	4648      	mov	r0, r9
 80006c8:	f000 fbda 	bl	8000e80 <__clzsi2>
 80006cc:	0001      	movs	r1, r0
 80006ce:	0002      	movs	r2, r0
 80006d0:	3115      	adds	r1, #21
 80006d2:	3220      	adds	r2, #32
 80006d4:	291c      	cmp	r1, #28
 80006d6:	dc00      	bgt.n	80006da <__aeabi_ddiv+0x4be>
 80006d8:	e61a      	b.n	8000310 <__aeabi_ddiv+0xf4>
 80006da:	464b      	mov	r3, r9
 80006dc:	3808      	subs	r0, #8
 80006de:	4083      	lsls	r3, r0
 80006e0:	2500      	movs	r5, #0
 80006e2:	4698      	mov	r8, r3
 80006e4:	e620      	b.n	8000328 <__aeabi_ddiv+0x10c>
 80006e6:	f000 fbcb 	bl	8000e80 <__clzsi2>
 80006ea:	0003      	movs	r3, r0
 80006ec:	001a      	movs	r2, r3
 80006ee:	3215      	adds	r2, #21
 80006f0:	3020      	adds	r0, #32
 80006f2:	2a1c      	cmp	r2, #28
 80006f4:	dc00      	bgt.n	80006f8 <__aeabi_ddiv+0x4dc>
 80006f6:	e630      	b.n	800035a <__aeabi_ddiv+0x13e>
 80006f8:	4654      	mov	r4, sl
 80006fa:	3b08      	subs	r3, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	409c      	lsls	r4, r3
 8000700:	e635      	b.n	800036e <__aeabi_ddiv+0x152>
 8000702:	230f      	movs	r3, #15
 8000704:	402b      	ands	r3, r5
 8000706:	2b04      	cmp	r3, #4
 8000708:	d100      	bne.n	800070c <__aeabi_ddiv+0x4f0>
 800070a:	e652      	b.n	80003b2 <__aeabi_ddiv+0x196>
 800070c:	2305      	movs	r3, #5
 800070e:	425b      	negs	r3, r3
 8000710:	42ab      	cmp	r3, r5
 8000712:	419b      	sbcs	r3, r3
 8000714:	3504      	adds	r5, #4
 8000716:	425b      	negs	r3, r3
 8000718:	08ed      	lsrs	r5, r5, #3
 800071a:	4498      	add	r8, r3
 800071c:	e64a      	b.n	80003b4 <__aeabi_ddiv+0x198>
 800071e:	428c      	cmp	r4, r1
 8000720:	d1c5      	bne.n	80006ae <__aeabi_ddiv+0x492>
 8000722:	42af      	cmp	r7, r5
 8000724:	d9c0      	bls.n	80006a8 <__aeabi_ddiv+0x48c>
 8000726:	4690      	mov	r8, r2
 8000728:	e716      	b.n	8000558 <__aeabi_ddiv+0x33c>
 800072a:	428a      	cmp	r2, r1
 800072c:	d800      	bhi.n	8000730 <__aeabi_ddiv+0x514>
 800072e:	e6ea      	b.n	8000506 <__aeabi_ddiv+0x2ea>
 8000730:	1e83      	subs	r3, r0, #2
 8000732:	1909      	adds	r1, r1, r4
 8000734:	e6e7      	b.n	8000506 <__aeabi_ddiv+0x2ea>
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <__aeabi_ddiv+0x5c4>)
 8000738:	0028      	movs	r0, r5
 800073a:	445a      	add	r2, fp
 800073c:	4643      	mov	r3, r8
 800073e:	4095      	lsls	r5, r2
 8000740:	4093      	lsls	r3, r2
 8000742:	40c8      	lsrs	r0, r1
 8000744:	1e6a      	subs	r2, r5, #1
 8000746:	4195      	sbcs	r5, r2
 8000748:	4644      	mov	r4, r8
 800074a:	4303      	orrs	r3, r0
 800074c:	432b      	orrs	r3, r5
 800074e:	40cc      	lsrs	r4, r1
 8000750:	075a      	lsls	r2, r3, #29
 8000752:	d092      	beq.n	800067a <__aeabi_ddiv+0x45e>
 8000754:	220f      	movs	r2, #15
 8000756:	401a      	ands	r2, r3
 8000758:	2a04      	cmp	r2, #4
 800075a:	d188      	bne.n	800066e <__aeabi_ddiv+0x452>
 800075c:	e78d      	b.n	800067a <__aeabi_ddiv+0x45e>
 800075e:	0035      	movs	r5, r6
 8000760:	4281      	cmp	r1, r0
 8000762:	d000      	beq.n	8000766 <__aeabi_ddiv+0x54a>
 8000764:	e74b      	b.n	80005fe <__aeabi_ddiv+0x3e2>
 8000766:	9a00      	ldr	r2, [sp, #0]
 8000768:	4293      	cmp	r3, r2
 800076a:	d000      	beq.n	800076e <__aeabi_ddiv+0x552>
 800076c:	e747      	b.n	80005fe <__aeabi_ddiv+0x3e2>
 800076e:	e618      	b.n	80003a2 <__aeabi_ddiv+0x186>
 8000770:	42ae      	cmp	r6, r5
 8000772:	d99c      	bls.n	80006ae <__aeabi_ddiv+0x492>
 8000774:	2302      	movs	r3, #2
 8000776:	425b      	negs	r3, r3
 8000778:	469c      	mov	ip, r3
 800077a:	9b00      	ldr	r3, [sp, #0]
 800077c:	44e0      	add	r8, ip
 800077e:	469c      	mov	ip, r3
 8000780:	4465      	add	r5, ip
 8000782:	429d      	cmp	r5, r3
 8000784:	419b      	sbcs	r3, r3
 8000786:	425b      	negs	r3, r3
 8000788:	191b      	adds	r3, r3, r4
 800078a:	18c9      	adds	r1, r1, r3
 800078c:	e6e4      	b.n	8000558 <__aeabi_ddiv+0x33c>
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <__aeabi_ddiv+0x5c8>)
 8000790:	445a      	add	r2, fp
 8000792:	2a00      	cmp	r2, #0
 8000794:	dc00      	bgt.n	8000798 <__aeabi_ddiv+0x57c>
 8000796:	e744      	b.n	8000622 <__aeabi_ddiv+0x406>
 8000798:	2301      	movs	r3, #1
 800079a:	2500      	movs	r5, #0
 800079c:	4498      	add	r8, r3
 800079e:	e609      	b.n	80003b4 <__aeabi_ddiv+0x198>
 80007a0:	0765      	lsls	r5, r4, #29
 80007a2:	0264      	lsls	r4, r4, #9
 80007a4:	0b24      	lsrs	r4, r4, #12
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	431d      	orrs	r5, r3
 80007aa:	2300      	movs	r3, #0
 80007ac:	e590      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 80007ae:	9e00      	ldr	r6, [sp, #0]
 80007b0:	3d02      	subs	r5, #2
 80007b2:	0072      	lsls	r2, r6, #1
 80007b4:	42b2      	cmp	r2, r6
 80007b6:	41bf      	sbcs	r7, r7
 80007b8:	427f      	negs	r7, r7
 80007ba:	193c      	adds	r4, r7, r4
 80007bc:	1909      	adds	r1, r1, r4
 80007be:	9200      	str	r2, [sp, #0]
 80007c0:	e7ce      	b.n	8000760 <__aeabi_ddiv+0x544>
 80007c2:	2480      	movs	r4, #128	; 0x80
 80007c4:	4643      	mov	r3, r8
 80007c6:	0324      	lsls	r4, r4, #12
 80007c8:	431c      	orrs	r4, r3
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <__aeabi_ddiv+0x5cc>)
 80007ce:	0b24      	lsrs	r4, r4, #12
 80007d0:	e57e      	b.n	80002d0 <__aeabi_ddiv+0xb4>
 80007d2:	9a00      	ldr	r2, [sp, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3ea      	bcc.n	80007ae <__aeabi_ddiv+0x592>
 80007d8:	0035      	movs	r5, r6
 80007da:	e7c4      	b.n	8000766 <__aeabi_ddiv+0x54a>
 80007dc:	0000043e 	.word	0x0000043e
 80007e0:	0000041e 	.word	0x0000041e
 80007e4:	000003ff 	.word	0x000003ff
 80007e8:	000007ff 	.word	0x000007ff

080007ec <__aeabi_dmul>:
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	4657      	mov	r7, sl
 80007f0:	464e      	mov	r6, r9
 80007f2:	4645      	mov	r5, r8
 80007f4:	46de      	mov	lr, fp
 80007f6:	b5e0      	push	{r5, r6, r7, lr}
 80007f8:	4698      	mov	r8, r3
 80007fa:	030c      	lsls	r4, r1, #12
 80007fc:	004b      	lsls	r3, r1, #1
 80007fe:	0006      	movs	r6, r0
 8000800:	4692      	mov	sl, r2
 8000802:	b087      	sub	sp, #28
 8000804:	0b24      	lsrs	r4, r4, #12
 8000806:	0d5b      	lsrs	r3, r3, #21
 8000808:	0fcf      	lsrs	r7, r1, #31
 800080a:	2b00      	cmp	r3, #0
 800080c:	d06c      	beq.n	80008e8 <__aeabi_dmul+0xfc>
 800080e:	4add      	ldr	r2, [pc, #884]	; (8000b84 <__aeabi_dmul+0x398>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d100      	bne.n	8000816 <__aeabi_dmul+0x2a>
 8000814:	e086      	b.n	8000924 <__aeabi_dmul+0x138>
 8000816:	0f42      	lsrs	r2, r0, #29
 8000818:	00e4      	lsls	r4, r4, #3
 800081a:	4314      	orrs	r4, r2
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	0412      	lsls	r2, r2, #16
 8000820:	4314      	orrs	r4, r2
 8000822:	4ad9      	ldr	r2, [pc, #868]	; (8000b88 <__aeabi_dmul+0x39c>)
 8000824:	00c5      	lsls	r5, r0, #3
 8000826:	4694      	mov	ip, r2
 8000828:	4463      	add	r3, ip
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2300      	movs	r3, #0
 800082e:	4699      	mov	r9, r3
 8000830:	469b      	mov	fp, r3
 8000832:	4643      	mov	r3, r8
 8000834:	4642      	mov	r2, r8
 8000836:	031e      	lsls	r6, r3, #12
 8000838:	0fd2      	lsrs	r2, r2, #31
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4650      	mov	r0, sl
 800083e:	4690      	mov	r8, r2
 8000840:	0b36      	lsrs	r6, r6, #12
 8000842:	0d5b      	lsrs	r3, r3, #21
 8000844:	d100      	bne.n	8000848 <__aeabi_dmul+0x5c>
 8000846:	e078      	b.n	800093a <__aeabi_dmul+0x14e>
 8000848:	4ace      	ldr	r2, [pc, #824]	; (8000b84 <__aeabi_dmul+0x398>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d01d      	beq.n	800088a <__aeabi_dmul+0x9e>
 800084e:	49ce      	ldr	r1, [pc, #824]	; (8000b88 <__aeabi_dmul+0x39c>)
 8000850:	0f42      	lsrs	r2, r0, #29
 8000852:	468c      	mov	ip, r1
 8000854:	9900      	ldr	r1, [sp, #0]
 8000856:	4463      	add	r3, ip
 8000858:	00f6      	lsls	r6, r6, #3
 800085a:	468c      	mov	ip, r1
 800085c:	4316      	orrs	r6, r2
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	449c      	add	ip, r3
 8000862:	0412      	lsls	r2, r2, #16
 8000864:	4663      	mov	r3, ip
 8000866:	4316      	orrs	r6, r2
 8000868:	00c2      	lsls	r2, r0, #3
 800086a:	2000      	movs	r0, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	9900      	ldr	r1, [sp, #0]
 8000870:	4643      	mov	r3, r8
 8000872:	3101      	adds	r1, #1
 8000874:	468c      	mov	ip, r1
 8000876:	4649      	mov	r1, r9
 8000878:	407b      	eors	r3, r7
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	290f      	cmp	r1, #15
 800087e:	d900      	bls.n	8000882 <__aeabi_dmul+0x96>
 8000880:	e07e      	b.n	8000980 <__aeabi_dmul+0x194>
 8000882:	4bc2      	ldr	r3, [pc, #776]	; (8000b8c <__aeabi_dmul+0x3a0>)
 8000884:	0089      	lsls	r1, r1, #2
 8000886:	5859      	ldr	r1, [r3, r1]
 8000888:	468f      	mov	pc, r1
 800088a:	4652      	mov	r2, sl
 800088c:	9b00      	ldr	r3, [sp, #0]
 800088e:	4332      	orrs	r2, r6
 8000890:	d000      	beq.n	8000894 <__aeabi_dmul+0xa8>
 8000892:	e156      	b.n	8000b42 <__aeabi_dmul+0x356>
 8000894:	49bb      	ldr	r1, [pc, #748]	; (8000b84 <__aeabi_dmul+0x398>)
 8000896:	2600      	movs	r6, #0
 8000898:	468c      	mov	ip, r1
 800089a:	4463      	add	r3, ip
 800089c:	4649      	mov	r1, r9
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2302      	movs	r3, #2
 80008a2:	4319      	orrs	r1, r3
 80008a4:	4689      	mov	r9, r1
 80008a6:	2002      	movs	r0, #2
 80008a8:	e7e1      	b.n	800086e <__aeabi_dmul+0x82>
 80008aa:	4643      	mov	r3, r8
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	0034      	movs	r4, r6
 80008b0:	0015      	movs	r5, r2
 80008b2:	4683      	mov	fp, r0
 80008b4:	465b      	mov	r3, fp
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d05e      	beq.n	8000978 <__aeabi_dmul+0x18c>
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dmul+0xd4>
 80008be:	e1f3      	b.n	8000ca8 <__aeabi_dmul+0x4bc>
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d000      	beq.n	80008c6 <__aeabi_dmul+0xda>
 80008c4:	e118      	b.n	8000af8 <__aeabi_dmul+0x30c>
 80008c6:	2200      	movs	r2, #0
 80008c8:	2400      	movs	r4, #0
 80008ca:	2500      	movs	r5, #0
 80008cc:	9b01      	ldr	r3, [sp, #4]
 80008ce:	0512      	lsls	r2, r2, #20
 80008d0:	4322      	orrs	r2, r4
 80008d2:	07db      	lsls	r3, r3, #31
 80008d4:	431a      	orrs	r2, r3
 80008d6:	0028      	movs	r0, r5
 80008d8:	0011      	movs	r1, r2
 80008da:	b007      	add	sp, #28
 80008dc:	bcf0      	pop	{r4, r5, r6, r7}
 80008de:	46bb      	mov	fp, r7
 80008e0:	46b2      	mov	sl, r6
 80008e2:	46a9      	mov	r9, r5
 80008e4:	46a0      	mov	r8, r4
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	0025      	movs	r5, r4
 80008ea:	4305      	orrs	r5, r0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dmul+0x104>
 80008ee:	e141      	b.n	8000b74 <__aeabi_dmul+0x388>
 80008f0:	2c00      	cmp	r4, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dmul+0x10a>
 80008f4:	e1ad      	b.n	8000c52 <__aeabi_dmul+0x466>
 80008f6:	0020      	movs	r0, r4
 80008f8:	f000 fac2 	bl	8000e80 <__clzsi2>
 80008fc:	0001      	movs	r1, r0
 80008fe:	0002      	movs	r2, r0
 8000900:	390b      	subs	r1, #11
 8000902:	231d      	movs	r3, #29
 8000904:	0010      	movs	r0, r2
 8000906:	1a5b      	subs	r3, r3, r1
 8000908:	0031      	movs	r1, r6
 800090a:	0035      	movs	r5, r6
 800090c:	3808      	subs	r0, #8
 800090e:	4084      	lsls	r4, r0
 8000910:	40d9      	lsrs	r1, r3
 8000912:	4085      	lsls	r5, r0
 8000914:	430c      	orrs	r4, r1
 8000916:	489e      	ldr	r0, [pc, #632]	; (8000b90 <__aeabi_dmul+0x3a4>)
 8000918:	1a83      	subs	r3, r0, r2
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	4699      	mov	r9, r3
 8000920:	469b      	mov	fp, r3
 8000922:	e786      	b.n	8000832 <__aeabi_dmul+0x46>
 8000924:	0005      	movs	r5, r0
 8000926:	4325      	orrs	r5, r4
 8000928:	d000      	beq.n	800092c <__aeabi_dmul+0x140>
 800092a:	e11c      	b.n	8000b66 <__aeabi_dmul+0x37a>
 800092c:	2208      	movs	r2, #8
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	2400      	movs	r4, #0
 8000934:	4691      	mov	r9, r2
 8000936:	469b      	mov	fp, r3
 8000938:	e77b      	b.n	8000832 <__aeabi_dmul+0x46>
 800093a:	4652      	mov	r2, sl
 800093c:	4332      	orrs	r2, r6
 800093e:	d100      	bne.n	8000942 <__aeabi_dmul+0x156>
 8000940:	e10a      	b.n	8000b58 <__aeabi_dmul+0x36c>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_dmul+0x15c>
 8000946:	e176      	b.n	8000c36 <__aeabi_dmul+0x44a>
 8000948:	0030      	movs	r0, r6
 800094a:	f000 fa99 	bl	8000e80 <__clzsi2>
 800094e:	0002      	movs	r2, r0
 8000950:	3a0b      	subs	r2, #11
 8000952:	231d      	movs	r3, #29
 8000954:	0001      	movs	r1, r0
 8000956:	1a9b      	subs	r3, r3, r2
 8000958:	4652      	mov	r2, sl
 800095a:	3908      	subs	r1, #8
 800095c:	40da      	lsrs	r2, r3
 800095e:	408e      	lsls	r6, r1
 8000960:	4316      	orrs	r6, r2
 8000962:	4652      	mov	r2, sl
 8000964:	408a      	lsls	r2, r1
 8000966:	9b00      	ldr	r3, [sp, #0]
 8000968:	4989      	ldr	r1, [pc, #548]	; (8000b90 <__aeabi_dmul+0x3a4>)
 800096a:	1a18      	subs	r0, r3, r0
 800096c:	0003      	movs	r3, r0
 800096e:	468c      	mov	ip, r1
 8000970:	4463      	add	r3, ip
 8000972:	2000      	movs	r0, #0
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	e77a      	b.n	800086e <__aeabi_dmul+0x82>
 8000978:	2400      	movs	r4, #0
 800097a:	2500      	movs	r5, #0
 800097c:	4a81      	ldr	r2, [pc, #516]	; (8000b84 <__aeabi_dmul+0x398>)
 800097e:	e7a5      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000980:	0c2f      	lsrs	r7, r5, #16
 8000982:	042d      	lsls	r5, r5, #16
 8000984:	0c2d      	lsrs	r5, r5, #16
 8000986:	002b      	movs	r3, r5
 8000988:	0c11      	lsrs	r1, r2, #16
 800098a:	0412      	lsls	r2, r2, #16
 800098c:	0c12      	lsrs	r2, r2, #16
 800098e:	4353      	muls	r3, r2
 8000990:	4698      	mov	r8, r3
 8000992:	0013      	movs	r3, r2
 8000994:	0028      	movs	r0, r5
 8000996:	437b      	muls	r3, r7
 8000998:	4699      	mov	r9, r3
 800099a:	4348      	muls	r0, r1
 800099c:	4448      	add	r0, r9
 800099e:	4683      	mov	fp, r0
 80009a0:	4640      	mov	r0, r8
 80009a2:	000b      	movs	r3, r1
 80009a4:	0c00      	lsrs	r0, r0, #16
 80009a6:	4682      	mov	sl, r0
 80009a8:	4658      	mov	r0, fp
 80009aa:	437b      	muls	r3, r7
 80009ac:	4450      	add	r0, sl
 80009ae:	9302      	str	r3, [sp, #8]
 80009b0:	4581      	cmp	r9, r0
 80009b2:	d906      	bls.n	80009c2 <__aeabi_dmul+0x1d6>
 80009b4:	469a      	mov	sl, r3
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	025b      	lsls	r3, r3, #9
 80009ba:	4699      	mov	r9, r3
 80009bc:	44ca      	add	sl, r9
 80009be:	4653      	mov	r3, sl
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	0c03      	lsrs	r3, r0, #16
 80009c4:	469b      	mov	fp, r3
 80009c6:	4643      	mov	r3, r8
 80009c8:	041b      	lsls	r3, r3, #16
 80009ca:	0400      	lsls	r0, r0, #16
 80009cc:	0c1b      	lsrs	r3, r3, #16
 80009ce:	4698      	mov	r8, r3
 80009d0:	0003      	movs	r3, r0
 80009d2:	4443      	add	r3, r8
 80009d4:	9304      	str	r3, [sp, #16]
 80009d6:	0c33      	lsrs	r3, r6, #16
 80009d8:	4699      	mov	r9, r3
 80009da:	002b      	movs	r3, r5
 80009dc:	0436      	lsls	r6, r6, #16
 80009de:	0c36      	lsrs	r6, r6, #16
 80009e0:	4373      	muls	r3, r6
 80009e2:	4698      	mov	r8, r3
 80009e4:	0033      	movs	r3, r6
 80009e6:	437b      	muls	r3, r7
 80009e8:	469a      	mov	sl, r3
 80009ea:	464b      	mov	r3, r9
 80009ec:	435d      	muls	r5, r3
 80009ee:	435f      	muls	r7, r3
 80009f0:	4643      	mov	r3, r8
 80009f2:	4455      	add	r5, sl
 80009f4:	0c18      	lsrs	r0, r3, #16
 80009f6:	1940      	adds	r0, r0, r5
 80009f8:	4582      	cmp	sl, r0
 80009fa:	d903      	bls.n	8000a04 <__aeabi_dmul+0x218>
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	025b      	lsls	r3, r3, #9
 8000a00:	469a      	mov	sl, r3
 8000a02:	4457      	add	r7, sl
 8000a04:	0c05      	lsrs	r5, r0, #16
 8000a06:	19eb      	adds	r3, r5, r7
 8000a08:	9305      	str	r3, [sp, #20]
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	041d      	lsls	r5, r3, #16
 8000a0e:	0c2d      	lsrs	r5, r5, #16
 8000a10:	0400      	lsls	r0, r0, #16
 8000a12:	1940      	adds	r0, r0, r5
 8000a14:	0c25      	lsrs	r5, r4, #16
 8000a16:	0424      	lsls	r4, r4, #16
 8000a18:	0c24      	lsrs	r4, r4, #16
 8000a1a:	0027      	movs	r7, r4
 8000a1c:	4357      	muls	r7, r2
 8000a1e:	436a      	muls	r2, r5
 8000a20:	4690      	mov	r8, r2
 8000a22:	002a      	movs	r2, r5
 8000a24:	0c3b      	lsrs	r3, r7, #16
 8000a26:	469a      	mov	sl, r3
 8000a28:	434a      	muls	r2, r1
 8000a2a:	4361      	muls	r1, r4
 8000a2c:	4441      	add	r1, r8
 8000a2e:	4451      	add	r1, sl
 8000a30:	4483      	add	fp, r0
 8000a32:	4588      	cmp	r8, r1
 8000a34:	d903      	bls.n	8000a3e <__aeabi_dmul+0x252>
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	025b      	lsls	r3, r3, #9
 8000a3a:	4698      	mov	r8, r3
 8000a3c:	4442      	add	r2, r8
 8000a3e:	043f      	lsls	r7, r7, #16
 8000a40:	0c0b      	lsrs	r3, r1, #16
 8000a42:	0c3f      	lsrs	r7, r7, #16
 8000a44:	0409      	lsls	r1, r1, #16
 8000a46:	19c9      	adds	r1, r1, r7
 8000a48:	0027      	movs	r7, r4
 8000a4a:	4698      	mov	r8, r3
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	4377      	muls	r7, r6
 8000a50:	435c      	muls	r4, r3
 8000a52:	436e      	muls	r6, r5
 8000a54:	435d      	muls	r5, r3
 8000a56:	0c3b      	lsrs	r3, r7, #16
 8000a58:	4699      	mov	r9, r3
 8000a5a:	19a4      	adds	r4, r4, r6
 8000a5c:	444c      	add	r4, r9
 8000a5e:	4442      	add	r2, r8
 8000a60:	9503      	str	r5, [sp, #12]
 8000a62:	42a6      	cmp	r6, r4
 8000a64:	d904      	bls.n	8000a70 <__aeabi_dmul+0x284>
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	025b      	lsls	r3, r3, #9
 8000a6a:	4698      	mov	r8, r3
 8000a6c:	4445      	add	r5, r8
 8000a6e:	9503      	str	r5, [sp, #12]
 8000a70:	9b02      	ldr	r3, [sp, #8]
 8000a72:	043f      	lsls	r7, r7, #16
 8000a74:	445b      	add	r3, fp
 8000a76:	001e      	movs	r6, r3
 8000a78:	4283      	cmp	r3, r0
 8000a7a:	4180      	sbcs	r0, r0
 8000a7c:	0423      	lsls	r3, r4, #16
 8000a7e:	4698      	mov	r8, r3
 8000a80:	9b05      	ldr	r3, [sp, #20]
 8000a82:	0c3f      	lsrs	r7, r7, #16
 8000a84:	4447      	add	r7, r8
 8000a86:	4698      	mov	r8, r3
 8000a88:	1876      	adds	r6, r6, r1
 8000a8a:	428e      	cmp	r6, r1
 8000a8c:	4189      	sbcs	r1, r1
 8000a8e:	4447      	add	r7, r8
 8000a90:	4240      	negs	r0, r0
 8000a92:	183d      	adds	r5, r7, r0
 8000a94:	46a8      	mov	r8, r5
 8000a96:	4693      	mov	fp, r2
 8000a98:	4249      	negs	r1, r1
 8000a9a:	468a      	mov	sl, r1
 8000a9c:	44c3      	add	fp, r8
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	41bf      	sbcs	r7, r7
 8000aa2:	4580      	cmp	r8, r0
 8000aa4:	4180      	sbcs	r0, r0
 8000aa6:	9b03      	ldr	r3, [sp, #12]
 8000aa8:	44da      	add	sl, fp
 8000aaa:	4698      	mov	r8, r3
 8000aac:	4653      	mov	r3, sl
 8000aae:	4240      	negs	r0, r0
 8000ab0:	427f      	negs	r7, r7
 8000ab2:	4307      	orrs	r7, r0
 8000ab4:	0c24      	lsrs	r4, r4, #16
 8000ab6:	4593      	cmp	fp, r2
 8000ab8:	4192      	sbcs	r2, r2
 8000aba:	458a      	cmp	sl, r1
 8000abc:	4189      	sbcs	r1, r1
 8000abe:	193f      	adds	r7, r7, r4
 8000ac0:	0ddc      	lsrs	r4, r3, #23
 8000ac2:	9b04      	ldr	r3, [sp, #16]
 8000ac4:	0275      	lsls	r5, r6, #9
 8000ac6:	431d      	orrs	r5, r3
 8000ac8:	1e68      	subs	r0, r5, #1
 8000aca:	4185      	sbcs	r5, r0
 8000acc:	4653      	mov	r3, sl
 8000ace:	4252      	negs	r2, r2
 8000ad0:	4249      	negs	r1, r1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	18bf      	adds	r7, r7, r2
 8000ad6:	4447      	add	r7, r8
 8000ad8:	0df6      	lsrs	r6, r6, #23
 8000ada:	027f      	lsls	r7, r7, #9
 8000adc:	4335      	orrs	r5, r6
 8000ade:	025a      	lsls	r2, r3, #9
 8000ae0:	433c      	orrs	r4, r7
 8000ae2:	4315      	orrs	r5, r2
 8000ae4:	01fb      	lsls	r3, r7, #7
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_dmul+0x2fe>
 8000ae8:	e0c1      	b.n	8000c6e <__aeabi_dmul+0x482>
 8000aea:	2101      	movs	r1, #1
 8000aec:	086a      	lsrs	r2, r5, #1
 8000aee:	400d      	ands	r5, r1
 8000af0:	4315      	orrs	r5, r2
 8000af2:	07e2      	lsls	r2, r4, #31
 8000af4:	4315      	orrs	r5, r2
 8000af6:	0864      	lsrs	r4, r4, #1
 8000af8:	4926      	ldr	r1, [pc, #152]	; (8000b94 <__aeabi_dmul+0x3a8>)
 8000afa:	4461      	add	r1, ip
 8000afc:	2900      	cmp	r1, #0
 8000afe:	dd56      	ble.n	8000bae <__aeabi_dmul+0x3c2>
 8000b00:	076b      	lsls	r3, r5, #29
 8000b02:	d009      	beq.n	8000b18 <__aeabi_dmul+0x32c>
 8000b04:	220f      	movs	r2, #15
 8000b06:	402a      	ands	r2, r5
 8000b08:	2a04      	cmp	r2, #4
 8000b0a:	d005      	beq.n	8000b18 <__aeabi_dmul+0x32c>
 8000b0c:	1d2a      	adds	r2, r5, #4
 8000b0e:	42aa      	cmp	r2, r5
 8000b10:	41ad      	sbcs	r5, r5
 8000b12:	426d      	negs	r5, r5
 8000b14:	1964      	adds	r4, r4, r5
 8000b16:	0015      	movs	r5, r2
 8000b18:	01e3      	lsls	r3, r4, #7
 8000b1a:	d504      	bpl.n	8000b26 <__aeabi_dmul+0x33a>
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <__aeabi_dmul+0x3ac>)
 8000b20:	00c9      	lsls	r1, r1, #3
 8000b22:	4014      	ands	r4, r2
 8000b24:	4461      	add	r1, ip
 8000b26:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <__aeabi_dmul+0x3b0>)
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	dd00      	ble.n	8000b2e <__aeabi_dmul+0x342>
 8000b2c:	e724      	b.n	8000978 <__aeabi_dmul+0x18c>
 8000b2e:	0762      	lsls	r2, r4, #29
 8000b30:	08ed      	lsrs	r5, r5, #3
 8000b32:	0264      	lsls	r4, r4, #9
 8000b34:	0549      	lsls	r1, r1, #21
 8000b36:	4315      	orrs	r5, r2
 8000b38:	0b24      	lsrs	r4, r4, #12
 8000b3a:	0d4a      	lsrs	r2, r1, #21
 8000b3c:	e6c6      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000b3e:	9701      	str	r7, [sp, #4]
 8000b40:	e6b8      	b.n	80008b4 <__aeabi_dmul+0xc8>
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <__aeabi_dmul+0x398>)
 8000b44:	2003      	movs	r0, #3
 8000b46:	4694      	mov	ip, r2
 8000b48:	4463      	add	r3, ip
 8000b4a:	464a      	mov	r2, r9
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2303      	movs	r3, #3
 8000b50:	431a      	orrs	r2, r3
 8000b52:	4691      	mov	r9, r2
 8000b54:	4652      	mov	r2, sl
 8000b56:	e68a      	b.n	800086e <__aeabi_dmul+0x82>
 8000b58:	4649      	mov	r1, r9
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	4689      	mov	r9, r1
 8000b60:	2600      	movs	r6, #0
 8000b62:	2001      	movs	r0, #1
 8000b64:	e683      	b.n	800086e <__aeabi_dmul+0x82>
 8000b66:	220c      	movs	r2, #12
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	0005      	movs	r5, r0
 8000b6e:	4691      	mov	r9, r2
 8000b70:	469b      	mov	fp, r3
 8000b72:	e65e      	b.n	8000832 <__aeabi_dmul+0x46>
 8000b74:	2304      	movs	r3, #4
 8000b76:	4699      	mov	r9, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	2400      	movs	r4, #0
 8000b80:	469b      	mov	fp, r3
 8000b82:	e656      	b.n	8000832 <__aeabi_dmul+0x46>
 8000b84:	000007ff 	.word	0x000007ff
 8000b88:	fffffc01 	.word	0xfffffc01
 8000b8c:	08004e60 	.word	0x08004e60
 8000b90:	fffffc0d 	.word	0xfffffc0d
 8000b94:	000003ff 	.word	0x000003ff
 8000b98:	feffffff 	.word	0xfeffffff
 8000b9c:	000007fe 	.word	0x000007fe
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2480      	movs	r4, #128	; 0x80
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	4a44      	ldr	r2, [pc, #272]	; (8000cb8 <__aeabi_dmul+0x4cc>)
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	0324      	lsls	r4, r4, #12
 8000bac:	e68e      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000bae:	2001      	movs	r0, #1
 8000bb0:	1a40      	subs	r0, r0, r1
 8000bb2:	2838      	cmp	r0, #56	; 0x38
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_dmul+0x3cc>
 8000bb6:	e686      	b.n	80008c6 <__aeabi_dmul+0xda>
 8000bb8:	281f      	cmp	r0, #31
 8000bba:	dd5b      	ble.n	8000c74 <__aeabi_dmul+0x488>
 8000bbc:	221f      	movs	r2, #31
 8000bbe:	0023      	movs	r3, r4
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	1a51      	subs	r1, r2, r1
 8000bc4:	40cb      	lsrs	r3, r1
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	2820      	cmp	r0, #32
 8000bca:	d003      	beq.n	8000bd4 <__aeabi_dmul+0x3e8>
 8000bcc:	4a3b      	ldr	r2, [pc, #236]	; (8000cbc <__aeabi_dmul+0x4d0>)
 8000bce:	4462      	add	r2, ip
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	4325      	orrs	r5, r4
 8000bd4:	1e6a      	subs	r2, r5, #1
 8000bd6:	4195      	sbcs	r5, r2
 8000bd8:	002a      	movs	r2, r5
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	2107      	movs	r1, #7
 8000bde:	000d      	movs	r5, r1
 8000be0:	2400      	movs	r4, #0
 8000be2:	4015      	ands	r5, r2
 8000be4:	4211      	tst	r1, r2
 8000be6:	d05b      	beq.n	8000ca0 <__aeabi_dmul+0x4b4>
 8000be8:	210f      	movs	r1, #15
 8000bea:	2400      	movs	r4, #0
 8000bec:	4011      	ands	r1, r2
 8000bee:	2904      	cmp	r1, #4
 8000bf0:	d053      	beq.n	8000c9a <__aeabi_dmul+0x4ae>
 8000bf2:	1d11      	adds	r1, r2, #4
 8000bf4:	4291      	cmp	r1, r2
 8000bf6:	4192      	sbcs	r2, r2
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	18a4      	adds	r4, r4, r2
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d54b      	bpl.n	8000c9a <__aeabi_dmul+0x4ae>
 8000c02:	2201      	movs	r2, #1
 8000c04:	2400      	movs	r4, #0
 8000c06:	2500      	movs	r5, #0
 8000c08:	e660      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	031b      	lsls	r3, r3, #12
 8000c0e:	421c      	tst	r4, r3
 8000c10:	d009      	beq.n	8000c26 <__aeabi_dmul+0x43a>
 8000c12:	421e      	tst	r6, r3
 8000c14:	d107      	bne.n	8000c26 <__aeabi_dmul+0x43a>
 8000c16:	4333      	orrs	r3, r6
 8000c18:	031c      	lsls	r4, r3, #12
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	0015      	movs	r5, r2
 8000c1e:	0b24      	lsrs	r4, r4, #12
 8000c20:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <__aeabi_dmul+0x4cc>)
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	e652      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	0312      	lsls	r2, r2, #12
 8000c2a:	4314      	orrs	r4, r2
 8000c2c:	0324      	lsls	r4, r4, #12
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <__aeabi_dmul+0x4cc>)
 8000c30:	0b24      	lsrs	r4, r4, #12
 8000c32:	9701      	str	r7, [sp, #4]
 8000c34:	e64a      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000c36:	f000 f923 	bl	8000e80 <__clzsi2>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	3215      	adds	r2, #21
 8000c40:	3020      	adds	r0, #32
 8000c42:	2a1c      	cmp	r2, #28
 8000c44:	dc00      	bgt.n	8000c48 <__aeabi_dmul+0x45c>
 8000c46:	e684      	b.n	8000952 <__aeabi_dmul+0x166>
 8000c48:	4656      	mov	r6, sl
 8000c4a:	3b08      	subs	r3, #8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	409e      	lsls	r6, r3
 8000c50:	e689      	b.n	8000966 <__aeabi_dmul+0x17a>
 8000c52:	f000 f915 	bl	8000e80 <__clzsi2>
 8000c56:	0001      	movs	r1, r0
 8000c58:	0002      	movs	r2, r0
 8000c5a:	3115      	adds	r1, #21
 8000c5c:	3220      	adds	r2, #32
 8000c5e:	291c      	cmp	r1, #28
 8000c60:	dc00      	bgt.n	8000c64 <__aeabi_dmul+0x478>
 8000c62:	e64e      	b.n	8000902 <__aeabi_dmul+0x116>
 8000c64:	0034      	movs	r4, r6
 8000c66:	3808      	subs	r0, #8
 8000c68:	2500      	movs	r5, #0
 8000c6a:	4084      	lsls	r4, r0
 8000c6c:	e653      	b.n	8000916 <__aeabi_dmul+0x12a>
 8000c6e:	9b00      	ldr	r3, [sp, #0]
 8000c70:	469c      	mov	ip, r3
 8000c72:	e741      	b.n	8000af8 <__aeabi_dmul+0x30c>
 8000c74:	4912      	ldr	r1, [pc, #72]	; (8000cc0 <__aeabi_dmul+0x4d4>)
 8000c76:	0022      	movs	r2, r4
 8000c78:	4461      	add	r1, ip
 8000c7a:	002e      	movs	r6, r5
 8000c7c:	408d      	lsls	r5, r1
 8000c7e:	408a      	lsls	r2, r1
 8000c80:	40c6      	lsrs	r6, r0
 8000c82:	1e69      	subs	r1, r5, #1
 8000c84:	418d      	sbcs	r5, r1
 8000c86:	4332      	orrs	r2, r6
 8000c88:	432a      	orrs	r2, r5
 8000c8a:	40c4      	lsrs	r4, r0
 8000c8c:	0753      	lsls	r3, r2, #29
 8000c8e:	d0b6      	beq.n	8000bfe <__aeabi_dmul+0x412>
 8000c90:	210f      	movs	r1, #15
 8000c92:	4011      	ands	r1, r2
 8000c94:	2904      	cmp	r1, #4
 8000c96:	d1ac      	bne.n	8000bf2 <__aeabi_dmul+0x406>
 8000c98:	e7b1      	b.n	8000bfe <__aeabi_dmul+0x412>
 8000c9a:	0765      	lsls	r5, r4, #29
 8000c9c:	0264      	lsls	r4, r4, #9
 8000c9e:	0b24      	lsrs	r4, r4, #12
 8000ca0:	08d2      	lsrs	r2, r2, #3
 8000ca2:	4315      	orrs	r5, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e611      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	0312      	lsls	r2, r2, #12
 8000cac:	4314      	orrs	r4, r2
 8000cae:	0324      	lsls	r4, r4, #12
 8000cb0:	4a01      	ldr	r2, [pc, #4]	; (8000cb8 <__aeabi_dmul+0x4cc>)
 8000cb2:	0b24      	lsrs	r4, r4, #12
 8000cb4:	e60a      	b.n	80008cc <__aeabi_dmul+0xe0>
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	000007ff 	.word	0x000007ff
 8000cbc:	0000043e 	.word	0x0000043e
 8000cc0:	0000041e 	.word	0x0000041e

08000cc4 <__aeabi_i2d>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d016      	beq.n	8000cf8 <__aeabi_i2d+0x34>
 8000cca:	17c3      	asrs	r3, r0, #31
 8000ccc:	18c5      	adds	r5, r0, r3
 8000cce:	405d      	eors	r5, r3
 8000cd0:	0fc4      	lsrs	r4, r0, #31
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	f000 f8d4 	bl	8000e80 <__clzsi2>
 8000cd8:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <__aeabi_i2d+0x5c>)
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	280a      	cmp	r0, #10
 8000cde:	dc16      	bgt.n	8000d0e <__aeabi_i2d+0x4a>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	002e      	movs	r6, r5
 8000ce4:	3315      	adds	r3, #21
 8000ce6:	409e      	lsls	r6, r3
 8000ce8:	230b      	movs	r3, #11
 8000cea:	1a18      	subs	r0, r3, r0
 8000cec:	40c5      	lsrs	r5, r0
 8000cee:	0553      	lsls	r3, r2, #21
 8000cf0:	032d      	lsls	r5, r5, #12
 8000cf2:	0b2d      	lsrs	r5, r5, #12
 8000cf4:	0d5b      	lsrs	r3, r3, #21
 8000cf6:	e003      	b.n	8000d00 <__aeabi_i2d+0x3c>
 8000cf8:	2400      	movs	r4, #0
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	2600      	movs	r6, #0
 8000d00:	051b      	lsls	r3, r3, #20
 8000d02:	432b      	orrs	r3, r5
 8000d04:	07e4      	lsls	r4, r4, #31
 8000d06:	4323      	orrs	r3, r4
 8000d08:	0030      	movs	r0, r6
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
 8000d0e:	380b      	subs	r0, #11
 8000d10:	4085      	lsls	r5, r0
 8000d12:	0553      	lsls	r3, r2, #21
 8000d14:	032d      	lsls	r5, r5, #12
 8000d16:	2600      	movs	r6, #0
 8000d18:	0b2d      	lsrs	r5, r5, #12
 8000d1a:	0d5b      	lsrs	r3, r3, #21
 8000d1c:	e7f0      	b.n	8000d00 <__aeabi_i2d+0x3c>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	0000041e 	.word	0x0000041e

08000d24 <__aeabi_ui2d>:
 8000d24:	b510      	push	{r4, lr}
 8000d26:	1e04      	subs	r4, r0, #0
 8000d28:	d010      	beq.n	8000d4c <__aeabi_ui2d+0x28>
 8000d2a:	f000 f8a9 	bl	8000e80 <__clzsi2>
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <__aeabi_ui2d+0x48>)
 8000d30:	1a1b      	subs	r3, r3, r0
 8000d32:	280a      	cmp	r0, #10
 8000d34:	dc11      	bgt.n	8000d5a <__aeabi_ui2d+0x36>
 8000d36:	220b      	movs	r2, #11
 8000d38:	0021      	movs	r1, r4
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	40d1      	lsrs	r1, r2
 8000d3e:	3015      	adds	r0, #21
 8000d40:	030a      	lsls	r2, r1, #12
 8000d42:	055b      	lsls	r3, r3, #21
 8000d44:	4084      	lsls	r4, r0
 8000d46:	0b12      	lsrs	r2, r2, #12
 8000d48:	0d5b      	lsrs	r3, r3, #21
 8000d4a:	e001      	b.n	8000d50 <__aeabi_ui2d+0x2c>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2200      	movs	r2, #0
 8000d50:	051b      	lsls	r3, r3, #20
 8000d52:	4313      	orrs	r3, r2
 8000d54:	0020      	movs	r0, r4
 8000d56:	0019      	movs	r1, r3
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	0022      	movs	r2, r4
 8000d5c:	380b      	subs	r0, #11
 8000d5e:	4082      	lsls	r2, r0
 8000d60:	055b      	lsls	r3, r3, #21
 8000d62:	0312      	lsls	r2, r2, #12
 8000d64:	2400      	movs	r4, #0
 8000d66:	0b12      	lsrs	r2, r2, #12
 8000d68:	0d5b      	lsrs	r3, r3, #21
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_ui2d+0x2c>
 8000d6c:	0000041e 	.word	0x0000041e

08000d70 <__aeabi_d2f>:
 8000d70:	0002      	movs	r2, r0
 8000d72:	004b      	lsls	r3, r1, #1
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	0308      	lsls	r0, r1, #12
 8000d78:	0d5b      	lsrs	r3, r3, #21
 8000d7a:	4e3d      	ldr	r6, [pc, #244]	; (8000e70 <__aeabi_d2f+0x100>)
 8000d7c:	0fcc      	lsrs	r4, r1, #31
 8000d7e:	0a40      	lsrs	r0, r0, #9
 8000d80:	0f51      	lsrs	r1, r2, #29
 8000d82:	1c5f      	adds	r7, r3, #1
 8000d84:	4308      	orrs	r0, r1
 8000d86:	00d5      	lsls	r5, r2, #3
 8000d88:	4237      	tst	r7, r6
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_d2f+0x32>
 8000d8c:	4939      	ldr	r1, [pc, #228]	; (8000e74 <__aeabi_d2f+0x104>)
 8000d8e:	185e      	adds	r6, r3, r1
 8000d90:	2efe      	cmp	r6, #254	; 0xfe
 8000d92:	dd16      	ble.n	8000dc2 <__aeabi_d2f+0x52>
 8000d94:	23ff      	movs	r3, #255	; 0xff
 8000d96:	2100      	movs	r1, #0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	07e0      	lsls	r0, r4, #31
 8000d9e:	4318      	orrs	r0, r3
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <__aeabi_d2f+0x44>
 8000da6:	4328      	orrs	r0, r5
 8000da8:	d027      	beq.n	8000dfa <__aeabi_d2f+0x8a>
 8000daa:	2105      	movs	r1, #5
 8000dac:	0189      	lsls	r1, r1, #6
 8000dae:	0a49      	lsrs	r1, r1, #9
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	e7f1      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000db4:	4305      	orrs	r5, r0
 8000db6:	d0ed      	beq.n	8000d94 <__aeabi_d2f+0x24>
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	03c9      	lsls	r1, r1, #15
 8000dbc:	23ff      	movs	r3, #255	; 0xff
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	e7ea      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	dd1c      	ble.n	8000e00 <__aeabi_d2f+0x90>
 8000dc6:	0192      	lsls	r2, r2, #6
 8000dc8:	0011      	movs	r1, r2
 8000dca:	1e4a      	subs	r2, r1, #1
 8000dcc:	4191      	sbcs	r1, r2
 8000dce:	00c0      	lsls	r0, r0, #3
 8000dd0:	0f6d      	lsrs	r5, r5, #29
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	4329      	orrs	r1, r5
 8000dd6:	074b      	lsls	r3, r1, #29
 8000dd8:	d048      	beq.n	8000e6c <__aeabi_d2f+0xfc>
 8000dda:	230f      	movs	r3, #15
 8000ddc:	400b      	ands	r3, r1
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d000      	beq.n	8000de4 <__aeabi_d2f+0x74>
 8000de2:	3104      	adds	r1, #4
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	04db      	lsls	r3, r3, #19
 8000de8:	400b      	ands	r3, r1
 8000dea:	d03f      	beq.n	8000e6c <__aeabi_d2f+0xfc>
 8000dec:	1c72      	adds	r2, r6, #1
 8000dee:	2efe      	cmp	r6, #254	; 0xfe
 8000df0:	d0d0      	beq.n	8000d94 <__aeabi_d2f+0x24>
 8000df2:	0189      	lsls	r1, r1, #6
 8000df4:	0a49      	lsrs	r1, r1, #9
 8000df6:	b2d3      	uxtb	r3, r2
 8000df8:	e7ce      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e7cb      	b.n	8000d98 <__aeabi_d2f+0x28>
 8000e00:	0032      	movs	r2, r6
 8000e02:	3217      	adds	r2, #23
 8000e04:	db22      	blt.n	8000e4c <__aeabi_d2f+0xdc>
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	221e      	movs	r2, #30
 8000e0a:	0409      	lsls	r1, r1, #16
 8000e0c:	4308      	orrs	r0, r1
 8000e0e:	1b92      	subs	r2, r2, r6
 8000e10:	2a1f      	cmp	r2, #31
 8000e12:	dd1d      	ble.n	8000e50 <__aeabi_d2f+0xe0>
 8000e14:	2102      	movs	r1, #2
 8000e16:	4249      	negs	r1, r1
 8000e18:	1b8e      	subs	r6, r1, r6
 8000e1a:	0001      	movs	r1, r0
 8000e1c:	40f1      	lsrs	r1, r6
 8000e1e:	000e      	movs	r6, r1
 8000e20:	2a20      	cmp	r2, #32
 8000e22:	d004      	beq.n	8000e2e <__aeabi_d2f+0xbe>
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <__aeabi_d2f+0x108>)
 8000e26:	4694      	mov	ip, r2
 8000e28:	4463      	add	r3, ip
 8000e2a:	4098      	lsls	r0, r3
 8000e2c:	4305      	orrs	r5, r0
 8000e2e:	0029      	movs	r1, r5
 8000e30:	1e4d      	subs	r5, r1, #1
 8000e32:	41a9      	sbcs	r1, r5
 8000e34:	4331      	orrs	r1, r6
 8000e36:	2600      	movs	r6, #0
 8000e38:	074b      	lsls	r3, r1, #29
 8000e3a:	d1ce      	bne.n	8000dda <__aeabi_d2f+0x6a>
 8000e3c:	2080      	movs	r0, #128	; 0x80
 8000e3e:	000b      	movs	r3, r1
 8000e40:	04c0      	lsls	r0, r0, #19
 8000e42:	2201      	movs	r2, #1
 8000e44:	4003      	ands	r3, r0
 8000e46:	4201      	tst	r1, r0
 8000e48:	d1d3      	bne.n	8000df2 <__aeabi_d2f+0x82>
 8000e4a:	e7af      	b.n	8000dac <__aeabi_d2f+0x3c>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e7ac      	b.n	8000daa <__aeabi_d2f+0x3a>
 8000e50:	490a      	ldr	r1, [pc, #40]	; (8000e7c <__aeabi_d2f+0x10c>)
 8000e52:	468c      	mov	ip, r1
 8000e54:	0029      	movs	r1, r5
 8000e56:	4463      	add	r3, ip
 8000e58:	40d1      	lsrs	r1, r2
 8000e5a:	409d      	lsls	r5, r3
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	0029      	movs	r1, r5
 8000e60:	4098      	lsls	r0, r3
 8000e62:	1e4d      	subs	r5, r1, #1
 8000e64:	41a9      	sbcs	r1, r5
 8000e66:	4301      	orrs	r1, r0
 8000e68:	4311      	orrs	r1, r2
 8000e6a:	e7e4      	b.n	8000e36 <__aeabi_d2f+0xc6>
 8000e6c:	0033      	movs	r3, r6
 8000e6e:	e79d      	b.n	8000dac <__aeabi_d2f+0x3c>
 8000e70:	000007fe 	.word	0x000007fe
 8000e74:	fffffc80 	.word	0xfffffc80
 8000e78:	fffffca2 	.word	0xfffffca2
 8000e7c:	fffffc82 	.word	0xfffffc82

08000e80 <__clzsi2>:
 8000e80:	211c      	movs	r1, #28
 8000e82:	2301      	movs	r3, #1
 8000e84:	041b      	lsls	r3, r3, #16
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d301      	bcc.n	8000e8e <__clzsi2+0xe>
 8000e8a:	0c00      	lsrs	r0, r0, #16
 8000e8c:	3910      	subs	r1, #16
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	4298      	cmp	r0, r3
 8000e92:	d301      	bcc.n	8000e98 <__clzsi2+0x18>
 8000e94:	0a00      	lsrs	r0, r0, #8
 8000e96:	3908      	subs	r1, #8
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d301      	bcc.n	8000ea2 <__clzsi2+0x22>
 8000e9e:	0900      	lsrs	r0, r0, #4
 8000ea0:	3904      	subs	r1, #4
 8000ea2:	a202      	add	r2, pc, #8	; (adr r2, 8000eac <__clzsi2+0x2c>)
 8000ea4:	5c10      	ldrb	r0, [r2, r0]
 8000ea6:	1840      	adds	r0, r0, r1
 8000ea8:	4770      	bx	lr
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	02020304 	.word	0x02020304
 8000eb0:	01010101 	.word	0x01010101
	...

08000ebc <PWM_Set_DC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Set_DC(TIM_HandleTypeDef *timer, uint32_t channel, uint8_t dc){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
	uint32_t arr, ccrx;

	arr = __HAL_TIM_GET_AUTORELOAD(timer);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	617b      	str	r3, [r7, #20]
	if (dc <= 100){
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d835      	bhi.n	8000f46 <PWM_Set_DC+0x8a>
		ccrx = arr*dc/100;
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4353      	muls	r3, r2
 8000ee2:	2164      	movs	r1, #100	; 0x64
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff f90d 	bl	8000104 <__udivsi3>
 8000eea:	0003      	movs	r3, r0
 8000eec:	613b      	str	r3, [r7, #16]

		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d104      	bne.n	8000efe <PWM_Set_DC+0x42>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000efc:	e023      	b.n	8000f46 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d104      	bne.n	8000f0e <PWM_Set_DC+0x52>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f0c:	e01b      	b.n	8000f46 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d104      	bne.n	8000f1e <PWM_Set_DC+0x62>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000f1c:	e013      	b.n	8000f46 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b0c      	cmp	r3, #12
 8000f22:	d104      	bne.n	8000f2e <PWM_Set_DC+0x72>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f2c:	e00b      	b.n	8000f46 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d104      	bne.n	8000f3e <PWM_Set_DC+0x82>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f3c:	e003      	b.n	8000f46 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b006      	add	sp, #24
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	0002      	movs	r2, r0
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	801a      	strh	r2, [r3, #0]
	contador++;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000f66:	701a      	strb	r2, [r3, #0]

	  if(contador > 5){
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	d902      	bls.n	8000f76 <HAL_GPIO_EXTI_Falling_Callback+0x26>
		  contador = 1;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
	  }
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	20000098 	.word	0x20000098

08000f84 <calcTensao>:

float calcTensao(uint16_t num){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	801a      	strh	r2, [r3, #0]
	float temp = (3.3 * (num / 4095.0));
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff fe95 	bl	8000cc4 <__aeabi_i2d>
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <calcTensao+0x48>)
 8000f9e:	f7ff f93d 	bl	800021c <__aeabi_ddiv>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	000b      	movs	r3, r1
 8000fa6:	0010      	movs	r0, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <calcTensao+0x4c>)
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <calcTensao+0x50>)
 8000fae:	f7ff fc1d 	bl	80007ec <__aeabi_dmul>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	000b      	movs	r3, r1
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	0019      	movs	r1, r3
 8000fba:	f7ff fed9 	bl	8000d70 <__aeabi_d2f>
 8000fbe:	1c03      	adds	r3, r0, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
	return temp;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	1c18      	adds	r0, r3, #0
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b004      	add	sp, #16
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40affe00 	.word	0x40affe00
 8000fd0:	66666666 	.word	0x66666666
 8000fd4:	400a6666 	.word	0x400a6666

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fb93 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f8bb 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 fa03 	bl	80013f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fea:	f000 f981 	bl	80012f0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000fee:	f000 f913 	bl	8001218 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ff2:	4b4e      	ldr	r3, [pc, #312]	; (800112c <main+0x154>)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f002 fe32 	bl	8003c60 <HAL_TIM_PWM_Start>

  PWM_Set_DC(&htim2, TIM_CHANNEL_1, 0);
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <main+0x154>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ff5a 	bl	8000ebc <PWM_Set_DC>

  ADC_ChannelConfTypeDef sConfig = {0};
 8001008:	003b      	movs	r3, r7
 800100a:	0018      	movs	r0, r3
 800100c:	230c      	movs	r3, #12
 800100e:	001a      	movs	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	f003 fef1 	bl	8004df8 <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <main+0x158>)
 8001018:	0018      	movs	r0, r3
 800101a:	f001 fafd 	bl	8002618 <HAL_ADCEx_Calibration_Start>

  while (1)
  {

	  sConfig.Channel = ADC_CHANNEL_1;
 800101e:	003b      	movs	r3, r7
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <main+0x15c>)
 8001022:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001024:	003a      	movs	r2, r7
 8001026:	4b42      	ldr	r3, [pc, #264]	; (8001130 <main+0x158>)
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f001 f814 	bl	8002058 <HAL_ADC_ConfigChannel>

	  e_analogica = 0;
 8001030:	4b41      	ldr	r3, [pc, #260]	; (8001138 <main+0x160>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 250; i++){
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	e015      	b.n	8001068 <main+0x90>

		  HAL_ADC_Start(&hadc1);
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <main+0x158>)
 800103e:	0018      	movs	r0, r3
 8001040:	f000 ff1c 	bl	8001e7c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <main+0x158>)
 8001046:	2164      	movs	r1, #100	; 0x64
 8001048:	0018      	movs	r0, r3
 800104a:	f000 ff65 	bl	8001f18 <HAL_ADC_PollForConversion>
		  e_analogica += HAL_ADC_GetValue(&hadc1);
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <main+0x158>)
 8001050:	0018      	movs	r0, r3
 8001052:	f000 fff5 	bl	8002040 <HAL_ADC_GetValue>
 8001056:	0002      	movs	r2, r0
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <main+0x160>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	18d2      	adds	r2, r2, r3
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <main+0x160>)
 8001060:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 250; i++){
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2bf9      	cmp	r3, #249	; 0xf9
 800106c:	dde6      	ble.n	800103c <main+0x64>

	  }

	  e_analogica /= 250;
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <main+0x160>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	21fa      	movs	r1, #250	; 0xfa
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff f845 	bl	8000104 <__udivsi3>
 800107a:	0003      	movs	r3, r0
 800107c:	001a      	movs	r2, r3
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <main+0x160>)
 8001080:	601a      	str	r2, [r3, #0]
	  ADmax = e_analogica;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <main+0x160>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <main+0x164>)
 8001088:	601a      	str	r2, [r3, #0]

	  tensao = calcTensao(e_analogica);
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <main+0x160>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff77 	bl	8000f84 <calcTensao>
 8001096:	1c02      	adds	r2, r0, #0
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <main+0x168>)
 800109a:	601a      	str	r2, [r3, #0]


	  corrente = (0.027 * e_analogica) / 3500.0;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <main+0x160>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fe3f 	bl	8000d24 <__aeabi_ui2d>
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <main+0x16c>)
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <main+0x170>)
 80010aa:	f7ff fb9f 	bl	80007ec <__aeabi_dmul>
 80010ae:	0002      	movs	r2, r0
 80010b0:	000b      	movs	r3, r1
 80010b2:	0010      	movs	r0, r2
 80010b4:	0019      	movs	r1, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <main+0x174>)
 80010ba:	f7ff f8af 	bl	800021c <__aeabi_ddiv>
 80010be:	0002      	movs	r2, r0
 80010c0:	000b      	movs	r3, r1
 80010c2:	0010      	movs	r0, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	f7ff fe53 	bl	8000d70 <__aeabi_d2f>
 80010ca:	1c02      	adds	r2, r0, #0
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <main+0x178>)
 80010ce:	601a      	str	r2, [r3, #0]



	  switch(contador){
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <main+0x17c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d8a2      	bhi.n	800101e <main+0x46>
 80010d8:	009a      	lsls	r2, r3, #2
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <main+0x180>)
 80010dc:	18d3      	adds	r3, r2, r3
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	469f      	mov	pc, r3
	  	case 1:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 0);
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <main+0x154>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff fee7 	bl	8000ebc <PWM_Set_DC>
	  		break;
 80010ee:	e01b      	b.n	8001128 <main+0x150>

	  	case 2:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <main+0x154>)
 80010f2:	221e      	movs	r2, #30
 80010f4:	2100      	movs	r1, #0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff fee0 	bl	8000ebc <PWM_Set_DC>
	  		break;
 80010fc:	e014      	b.n	8001128 <main+0x150>

	  	case 3:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 50);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <main+0x154>)
 8001100:	2232      	movs	r2, #50	; 0x32
 8001102:	2100      	movs	r1, #0
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fed9 	bl	8000ebc <PWM_Set_DC>
	  		break;
 800110a:	e00d      	b.n	8001128 <main+0x150>

	  	case 4:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 75);
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <main+0x154>)
 800110e:	224b      	movs	r2, #75	; 0x4b
 8001110:	2100      	movs	r1, #0
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff fed2 	bl	8000ebc <PWM_Set_DC>
	  		break;
 8001118:	e006      	b.n	8001128 <main+0x150>

	  	case 5:
	  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 100);
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <main+0x154>)
 800111c:	2264      	movs	r2, #100	; 0x64
 800111e:	2100      	movs	r1, #0
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff fecb 	bl	8000ebc <PWM_Set_DC>
	  		break;
 8001126:	46c0      	nop			; (mov r8, r8)
	  sConfig.Channel = ADC_CHANNEL_1;
 8001128:	e779      	b.n	800101e <main+0x46>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	200000a0 	.word	0x200000a0
 8001130:	20000030 	.word	0x20000030
 8001134:	04000002 	.word	0x04000002
 8001138:	20000028 	.word	0x20000028
 800113c:	2000009c 	.word	0x2000009c
 8001140:	2000002c 	.word	0x2000002c
 8001144:	53f7ced9 	.word	0x53f7ced9
 8001148:	3f9ba5e3 	.word	0x3f9ba5e3
 800114c:	40ab5800 	.word	0x40ab5800
 8001150:	20000094 	.word	0x20000094
 8001154:	20000098 	.word	0x20000098
 8001158:	08004ea0 	.word	0x08004ea0

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b095      	sub	sp, #84	; 0x54
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	2414      	movs	r4, #20
 8001164:	193b      	adds	r3, r7, r4
 8001166:	0018      	movs	r0, r3
 8001168:	233c      	movs	r3, #60	; 0x3c
 800116a:	001a      	movs	r2, r3
 800116c:	2100      	movs	r1, #0
 800116e:	f003 fe43 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	0018      	movs	r0, r3
 8001176:	2310      	movs	r3, #16
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f003 fe3c 	bl	8004df8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	0018      	movs	r0, r3
 8001186:	f001 fd47 	bl	8002c18 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118a:	193b      	adds	r3, r7, r4
 800118c:	2202      	movs	r2, #2
 800118e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	193b      	adds	r3, r7, r4
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	0052      	lsls	r2, r2, #1
 8001196:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001198:	0021      	movs	r1, r4
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2240      	movs	r2, #64	; 0x40
 80011a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2202      	movs	r2, #2
 80011aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2202      	movs	r2, #2
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2208      	movs	r2, #8
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	0292      	lsls	r2, r2, #10
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	0492      	lsls	r2, r2, #18
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0592      	lsls	r2, r2, #22
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	0018      	movs	r0, r3
 80011da:	f001 fd5d 	bl	8002c98 <HAL_RCC_OscConfig>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80011e2:	f000 f949 	bl	8001478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2202      	movs	r2, #2
 80011f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2102      	movs	r1, #2
 8001202:	0018      	movs	r0, r3
 8001204:	f002 f8ae 	bl	8003364 <HAL_RCC_ClockConfig>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800120c:	f000 f934 	bl	8001478 <Error_Handler>
  }
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b015      	add	sp, #84	; 0x54
 8001216:	bd90      	pop	{r4, r7, pc}

08001218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	0018      	movs	r0, r3
 8001222:	230c      	movs	r3, #12
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f003 fde6 	bl	8004df8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800122e:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	05d2      	lsls	r2, r2, #23
 8001238:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800124e:	2204      	movs	r2, #4
 8001250:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001254:	2200      	movs	r2, #0
 8001256:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800125a:	2200      	movs	r2, #0
 800125c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001260:	2200      	movs	r2, #0
 8001262:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001266:	2201      	movs	r2, #1
 8001268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800126c:	2220      	movs	r2, #32
 800126e:	2100      	movs	r1, #0
 8001270:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001280:	222c      	movs	r2, #44	; 0x2c
 8001282:	2100      	movs	r1, #0
 8001284:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800128e:	2206      	movs	r2, #6
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_ADC1_Init+0xcc>)
 8001294:	2206      	movs	r2, #6
 8001296:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_ADC1_Init+0xcc>)
 800129a:	223c      	movs	r2, #60	; 0x3c
 800129c:	2100      	movs	r1, #0
 800129e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_ADC1_Init+0xcc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_ADC1_Init+0xcc>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f000 fc09 	bl	8001ac0 <HAL_ADC_Init>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80012b2:	f000 f8e1 	bl	8001478 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <MX_ADC1_Init+0xd4>)
 80012ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	1d3a      	adds	r2, r7, #4
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_ADC1_Init+0xcc>)
 80012cc:	0011      	movs	r1, r2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fec2 	bl	8002058 <HAL_ADC_ConfigChannel>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80012d8:	f000 f8ce 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b004      	add	sp, #16
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000030 	.word	0x20000030
 80012e8:	40012400 	.word	0x40012400
 80012ec:	04000002 	.word	0x04000002

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	; 0x38
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	2328      	movs	r3, #40	; 0x28
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	0018      	movs	r0, r3
 80012fc:	2310      	movs	r3, #16
 80012fe:	001a      	movs	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	f003 fd79 	bl	8004df8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	231c      	movs	r3, #28
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	0018      	movs	r0, r3
 800130c:	230c      	movs	r3, #12
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f003 fd71 	bl	8004df8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001316:	003b      	movs	r3, r7
 8001318:	0018      	movs	r0, r3
 800131a:	231c      	movs	r3, #28
 800131c:	001a      	movs	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	f003 fd6a 	bl	8004df8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <MX_TIM2_Init+0xf8>)
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	05d2      	lsls	r2, r2, #23
 800132a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <MX_TIM2_Init+0xf8>)
 800132e:	223f      	movs	r2, #63	; 0x3f
 8001330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <MX_TIM2_Init+0xf8>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001338:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <MX_TIM2_Init+0xf8>)
 800133a:	4a2c      	ldr	r2, [pc, #176]	; (80013ec <MX_TIM2_Init+0xfc>)
 800133c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <MX_TIM2_Init+0xf8>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <MX_TIM2_Init+0xf8>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_TIM2_Init+0xf8>)
 800134c:	0018      	movs	r0, r3
 800134e:	f002 fbcf 	bl	8003af0 <HAL_TIM_Base_Init>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001356:	f000 f88f 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	2128      	movs	r1, #40	; 0x28
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	0152      	lsls	r2, r2, #5
 8001362:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001364:	187a      	adds	r2, r7, r1
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_TIM2_Init+0xf8>)
 8001368:	0011      	movs	r1, r2
 800136a:	0018      	movs	r0, r3
 800136c:	f002 ff90 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8001370:	1e03      	subs	r3, r0, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001374:	f000 f880 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_TIM2_Init+0xf8>)
 800137a:	0018      	movs	r0, r3
 800137c:	f002 fc10 	bl	8003ba0 <HAL_TIM_PWM_Init>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001384:	f000 f878 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	211c      	movs	r1, #28
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001396:	187a      	adds	r2, r7, r1
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_TIM2_Init+0xf8>)
 800139a:	0011      	movs	r1, r2
 800139c:	0018      	movs	r0, r3
 800139e:	f003 fc79 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	1e03      	subs	r3, r0, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80013a6:	f000 f867 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	003b      	movs	r3, r7
 80013ac:	2260      	movs	r2, #96	; 0x60
 80013ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80013b0:	003b      	movs	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	003b      	movs	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	003b      	movs	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	0039      	movs	r1, r7
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_TIM2_Init+0xf8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	0018      	movs	r0, r3
 80013ca:	f002 fe6b 	bl	80040a4 <HAL_TIM_PWM_ConfigChannel>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80013d2:	f000 f851 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <MX_TIM2_Init+0xf8>)
 80013d8:	0018      	movs	r0, r3
 80013da:	f000 f8fb 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b00e      	add	sp, #56	; 0x38
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	200000a0 	.word	0x200000a0
 80013ec:	000003e7 	.word	0x000003e7

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	240c      	movs	r4, #12
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	0018      	movs	r0, r3
 80013fc:	2314      	movs	r3, #20
 80013fe:	001a      	movs	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	f003 fcf9 	bl	8004df8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_GPIO_Init+0x80>)
 8001408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_GPIO_Init+0x80>)
 800140c:	2104      	movs	r1, #4
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_GPIO_Init+0x80>)
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_GPIO_Init+0x80>)
 8001420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_GPIO_Init+0x80>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	; 0x34
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_GPIO_Init+0x80>)
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	0192      	lsls	r2, r2, #6
 800143c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143e:	193b      	adds	r3, r7, r4
 8001440:	2284      	movs	r2, #132	; 0x84
 8001442:	0392      	lsls	r2, r2, #14
 8001444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	193b      	adds	r3, r7, r4
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	193b      	adds	r3, r7, r4
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <MX_GPIO_Init+0x84>)
 8001450:	0019      	movs	r1, r3
 8001452:	0010      	movs	r0, r2
 8001454:	f001 fa40 	bl	80028d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2007      	movs	r0, #7
 800145e:	f001 fa09 	bl	8002874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001462:	2007      	movs	r0, #7
 8001464:	f001 fa1b 	bl	800289e <HAL_NVIC_EnableIRQ>

}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b009      	add	sp, #36	; 0x24
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	50000800 	.word	0x50000800

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_MspInit+0x4c>)
 800148c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_MspInit+0x4c>)
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_MspInit+0x4c>)
 80014a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_MspInit+0x4c>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0549      	lsls	r1, r1, #21
 80014ac:	430a      	orrs	r2, r1
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_MspInit+0x4c>)
 80014b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	055b      	lsls	r3, r3, #21
 80014b8:	4013      	ands	r3, r2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f9a6 	bl	8001814 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b09d      	sub	sp, #116	; 0x74
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	235c      	movs	r3, #92	; 0x5c
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	0018      	movs	r0, r3
 80014e2:	2314      	movs	r3, #20
 80014e4:	001a      	movs	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	f003 fc86 	bl	8004df8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	2410      	movs	r4, #16
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	0018      	movs	r0, r3
 80014f2:	234c      	movs	r3, #76	; 0x4c
 80014f4:	001a      	movs	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f003 fc7e 	bl	8004df8 <memset>
  if(hadc->Instance==ADC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_ADC_MspInit+0xb0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d139      	bne.n	800157a <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	01d2      	lsls	r2, r2, #7
 800150c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800150e:	193b      	adds	r3, r7, r4
 8001510:	2200      	movs	r2, #0
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001514:	193b      	adds	r3, r7, r4
 8001516:	0018      	movs	r0, r3
 8001518:	f002 f8ae 	bl	8003678 <HAL_RCCEx_PeriphCLKConfig>
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	d001      	beq.n	8001524 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001520:	f7ff ffaa 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_ADC_MspInit+0xb4>)
 8001526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_ADC_MspInit+0xb4>)
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	0349      	lsls	r1, r1, #13
 800152e:	430a      	orrs	r2, r1
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_ADC_MspInit+0xb4>)
 8001534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	035b      	lsls	r3, r3, #13
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_ADC_MspInit+0xb4>)
 8001542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_ADC_MspInit+0xb4>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_ADC_MspInit+0xb4>)
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001558:	215c      	movs	r1, #92	; 0x5c
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2203      	movs	r2, #3
 8001564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	187a      	adds	r2, r7, r1
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f001 f9af 	bl	80028d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b01d      	add	sp, #116	; 0x74
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40012400 	.word	0x40012400
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	05db      	lsls	r3, r3, #23
 800159c:	429a      	cmp	r2, r3
 800159e:	d113      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	200f      	movs	r0, #15
 80015be:	f001 f959 	bl	8002874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f001 f96b 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b004      	add	sp, #16
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	240c      	movs	r4, #12
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	0018      	movs	r0, r3
 80015e2:	2314      	movs	r3, #20
 80015e4:	001a      	movs	r2, r3
 80015e6:	2100      	movs	r1, #0
 80015e8:	f003 fc06 	bl	8004df8 <memset>
  if(htim->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	05db      	lsls	r3, r3, #23
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d122      	bne.n	800163e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_TIM_MspPostInit+0x74>)
 80015fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_TIM_MspPostInit+0x74>)
 80015fe:	2101      	movs	r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_TIM_MspPostInit+0x74>)
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	2201      	movs	r2, #1
 800160a:	4013      	ands	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001610:	0021      	movs	r1, r4
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	187b      	adds	r3, r7, r1
 800161a:	2202      	movs	r2, #2
 800161c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	187b      	adds	r3, r7, r1
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2202      	movs	r2, #2
 800162e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	187a      	adds	r2, r7, r1
 8001632:	23a0      	movs	r3, #160	; 0xa0
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	0011      	movs	r1, r2
 8001638:	0018      	movs	r0, r3
 800163a:	f001 f94d 	bl	80028d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b009      	add	sp, #36	; 0x24
 8001644:	bd90      	pop	{r4, r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40021000 	.word	0x40021000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f8b4 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	0018      	movs	r0, r3
 8001684:	f001 fa94 	bl	8002bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <TIM2_IRQHandler+0x14>)
 8001696:	0018      	movs	r0, r3
 8001698:	f002 fbd2 	bl	8003e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	200000a0 	.word	0x200000a0

080016a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b8:	f7ff fff6 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016e2:	f003 fb65 	bl	8004db0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016e6:	f7ff fc77 	bl	8000fd8 <main>

080016ea <LoopForever>:

LoopForever:
  b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   r0, =_estack
 80016ec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016f8:	08004f54 	.word	0x08004f54
  ldr r2, =_sbss
 80016fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001700:	200000f0 	.word	0x200000f0

08001704 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_COMP_IRQHandler>
	...

08001708 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800170e:	1dfb      	adds	r3, r7, #7
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_Init+0x3c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Init+0x3c>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0049      	lsls	r1, r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f810 	bl	8001748 <HAL_InitTick>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d003      	beq.n	8001734 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e001      	b.n	8001738 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7ff fea6 	bl	8001484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40022000 	.word	0x40022000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	230f      	movs	r3, #15
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_InitTick+0x88>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02b      	beq.n	80017b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_InitTick+0x8c>)
 8001762:	681c      	ldr	r4, [r3, #0]
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_InitTick+0x88>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	0019      	movs	r1, r3
 800176a:	23fa      	movs	r3, #250	; 0xfa
 800176c:	0098      	lsls	r0, r3, #2
 800176e:	f7fe fcc9 	bl	8000104 <__udivsi3>
 8001772:	0003      	movs	r3, r0
 8001774:	0019      	movs	r1, r3
 8001776:	0020      	movs	r0, r4
 8001778:	f7fe fcc4 	bl	8000104 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	0018      	movs	r0, r3
 8001780:	f001 f89d 	bl	80028be <HAL_SYSTICK_Config>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d112      	bne.n	80017ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d80a      	bhi.n	80017a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2301      	movs	r3, #1
 8001792:	425b      	negs	r3, r3
 8001794:	2200      	movs	r2, #0
 8001796:	0018      	movs	r0, r3
 8001798:	f001 f86c 	bl	8002874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_InitTick+0x90>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e00d      	b.n	80017c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80017a4:	230f      	movs	r3, #15
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e008      	b.n	80017c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ae:	230f      	movs	r3, #15
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e003      	b.n	80017c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017b8:	230f      	movs	r3, #15
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80017c0:	230f      	movs	r3, #15
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	781b      	ldrb	r3, [r3, #0]
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b005      	add	sp, #20
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_IncTick+0x1c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	001a      	movs	r2, r3
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x20>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	18d2      	adds	r2, r2, r3
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_IncTick+0x20>)
 80017ee:	601a      	str	r2, [r3, #0]
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	20000008 	.word	0x20000008
 80017fc:	200000ec 	.word	0x200000ec

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <HAL_GetTick+0x10>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	200000ec 	.word	0x200000ec

08001814 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001822:	4013      	ands	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	40010000 	.word	0x40010000
 800183c:	fffff9ff 	.word	0xfffff9ff

08001840 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001850:	401a      	ands	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	601a      	str	r2, [r3, #0]
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b002      	add	sp, #8
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	fe3fffff 	.word	0xfe3fffff

08001868 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	23e0      	movs	r3, #224	; 0xe0
 8001876:	045b      	lsls	r3, r3, #17
 8001878:	4013      	ands	r3, r2
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}

08001882 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	2104      	movs	r1, #4
 8001896:	400a      	ands	r2, r1
 8001898:	2107      	movs	r1, #7
 800189a:	4091      	lsls	r1, r2
 800189c:	000a      	movs	r2, r1
 800189e:	43d2      	mvns	r2, r2
 80018a0:	401a      	ands	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2104      	movs	r1, #4
 80018a6:	400b      	ands	r3, r1
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4099      	lsls	r1, r3
 80018ac:	000b      	movs	r3, r1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b004      	add	sp, #16
 80018ba:	bd80      	pop	{r7, pc}

080018bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	23c0      	movs	r3, #192	; 0xc0
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4013      	ands	r3, r2
 80018ce:	d101      	bne.n	80018d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b002      	add	sp, #8
 80018dc:	bd80      	pop	{r7, pc}

080018de <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	211f      	movs	r1, #31
 80018f2:	400a      	ands	r2, r1
 80018f4:	210f      	movs	r1, #15
 80018f6:	4091      	lsls	r1, r2
 80018f8:	000a      	movs	r2, r1
 80018fa:	43d2      	mvns	r2, r2
 80018fc:	401a      	ands	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	210f      	movs	r1, #15
 8001904:	4019      	ands	r1, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	201f      	movs	r0, #31
 800190a:	4003      	ands	r3, r0
 800190c:	4099      	lsls	r1, r3
 800190e:	000b      	movs	r3, r1
 8001910:	431a      	orrs	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b004      	add	sp, #16
 800191c:	bd80      	pop	{r7, pc}

0800191e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	035b      	lsls	r3, r3, #13
 8001930:	0b5b      	lsrs	r3, r3, #13
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	0352      	lsls	r2, r2, #13
 8001952:	0b52      	lsrs	r2, r2, #13
 8001954:	43d2      	mvns	r2, r2
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	0212      	lsls	r2, r2, #8
 8001978:	43d2      	mvns	r2, r2
 800197a:	401a      	ands	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	400b      	ands	r3, r1
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001986:	400b      	ands	r3, r1
 8001988:	431a      	orrs	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	07ffff00 	.word	0x07ffff00

0800199c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	0552      	lsls	r2, r2, #21
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	6fffffe8 	.word	0x6fffffe8

080019c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	401a      	ands	r2, r3
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	429a      	cmp	r2, r3
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <LL_ADC_Enable+0x20>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	2201      	movs	r2, #1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	7fffffe8 	.word	0x7fffffe8

08001a10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <LL_ADC_Disable+0x20>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2202      	movs	r2, #2
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	7fffffe8 	.word	0x7fffffe8

08001a34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_IsEnabled+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_IsEnabled+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d101      	bne.n	8001a6e <LL_ADC_IsDisableOngoing+0x18>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <LL_ADC_IsDisableOngoing+0x1a>
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b002      	add	sp, #8
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <LL_ADC_REG_StartConversion+0x20>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	2204      	movs	r2, #4
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	7fffffe8 	.word	0x7fffffe8

08001a9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d101      	bne.n	8001ab4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b002      	add	sp, #8
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac8:	231f      	movs	r3, #31
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1b1      	b.n	8001e4a <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10a      	bne.n	8001b04 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff fcef 	bl	80014d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2254      	movs	r2, #84	; 0x54
 8001b00:	2100      	movs	r1, #0
 8001b02:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ff5b 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d115      	bne.n	8001b3e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff ff40 	bl	800199c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b1c:	4bcd      	ldr	r3, [pc, #820]	; (8001e54 <HAL_ADC_Init+0x394>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	49cd      	ldr	r1, [pc, #820]	; (8001e58 <HAL_ADC_Init+0x398>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7fe faee 	bl	8000104 <__udivsi3>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7ff ff3e 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b48:	1e03      	subs	r3, r0, #0
 8001b4a:	d10f      	bne.n	8001b6c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	2210      	movs	r2, #16
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b64:	231f      	movs	r3, #31
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff ff93 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001b76:	0003      	movs	r3, r0
 8001b78:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	2210      	movs	r2, #16
 8001b80:	4013      	ands	r3, r2
 8001b82:	d000      	beq.n	8001b86 <HAL_ADC_Init+0xc6>
 8001b84:	e154      	b.n	8001e30 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d000      	beq.n	8001b8e <HAL_ADC_Init+0xce>
 8001b8c:	e150      	b.n	8001e30 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	4ab2      	ldr	r2, [pc, #712]	; (8001e5c <HAL_ADC_Init+0x39c>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	2202      	movs	r2, #2
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7ff ff46 	bl	8001a34 <LL_ADC_IsEnabled>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d156      	bne.n	8001c5a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2218      	movs	r2, #24
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0f9b      	lsrs	r3, r3, #30
 8001bca:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	223c      	movs	r2, #60	; 0x3c
 8001bdc:	5c9b      	ldrb	r3, [r3, r2]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d111      	bne.n	8001c06 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	0f9b      	lsrs	r3, r3, #30
 8001be8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bee:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001bf4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001bfa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	2201      	movs	r2, #1
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	4a94      	ldr	r2, [pc, #592]	; (8001e60 <HAL_ADC_Init+0x3a0>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	23c0      	movs	r3, #192	; 0xc0
 8001c22:	061b      	lsls	r3, r3, #24
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d018      	beq.n	8001c5a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d012      	beq.n	8001c5a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d00c      	beq.n	8001c5a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c40:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_ADC_Init+0x3a4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a88      	ldr	r2, [pc, #544]	; (8001e68 <HAL_ADC_Init+0x3a8>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	23f0      	movs	r3, #240	; 0xf0
 8001c50:	039b      	lsls	r3, r3, #14
 8001c52:	401a      	ands	r2, r3
 8001c54:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <HAL_ADC_Init+0x3a4>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7e1b      	ldrb	r3, [r3, #24]
 8001c5e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7e5b      	ldrb	r3, [r3, #25]
 8001c64:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c66:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7e9b      	ldrb	r3, [r3, #26]
 8001c6c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_ADC_Init+0x1be>
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	e000      	b.n	8001c80 <HAL_ADC_Init+0x1c0>
 8001c7e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c80:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c86:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da04      	bge.n	8001c9a <HAL_ADC_Init+0x1da>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	e001      	b.n	8001c9e <HAL_ADC_Init+0x1de>
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8001c9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	5c5b      	ldrb	r3, [r3, r1]
 8001ca6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ca8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	5c9b      	ldrb	r3, [r3, r2]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d115      	bne.n	8001ce6 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7e9b      	ldrb	r3, [r3, #26]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	0252      	lsls	r2, r2, #9
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	e00b      	b.n	8001ce6 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	2201      	movs	r2, #1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf2:	23e0      	movs	r3, #224	; 0xe0
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_ADC_Init+0x3ac>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_ADC_Init+0x3b0>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	001a      	movs	r2, r3
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	f7ff fda1 	bl	8001882 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	494a      	ldr	r1, [pc, #296]	; (8001e74 <HAL_ADC_Init+0x3b4>)
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	f7ff fd99 	bl	8001882 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2110      	movs	r1, #16
 8001d64:	4249      	negs	r1, r1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
 8001d6a:	e03a      	b.n	8001de2 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	039b      	lsls	r3, r3, #14
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d134      	bne.n	8001de2 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e00c      	b.n	8001d98 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	40da      	lsrs	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d006      	beq.n	8001da0 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	3301      	adds	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b07      	cmp	r3, #7
 8001d9c:	d9ef      	bls.n	8001d7e <HAL_ADC_Init+0x2be>
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8001da0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d109      	bne.n	8001dbc <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2110      	movs	r1, #16
 8001db4:	4249      	negs	r1, r1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
 8001dba:	e012      	b.n	8001de2 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	221c      	movs	r2, #28
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2210      	movs	r2, #16
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_ADC_Init+0x3b8>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d10b      	bne.n	8001e0a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4393      	bics	r3, r2
 8001e00:	2201      	movs	r2, #1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001e08:	e01c      	b.n	8001e44 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	2212      	movs	r2, #18
 8001e10:	4393      	bics	r3, r2
 8001e12:	2210      	movs	r2, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2201      	movs	r2, #1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e26:	231f      	movs	r3, #31
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001e2e:	e009      	b.n	8001e44 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	2210      	movs	r2, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e3c:	231f      	movs	r3, #31
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e44:	231f      	movs	r3, #31
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b008      	add	sp, #32
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	20000000 	.word	0x20000000
 8001e58:	00030d40 	.word	0x00030d40
 8001e5c:	fffffefd 	.word	0xfffffefd
 8001e60:	1ffffc02 	.word	0x1ffffc02
 8001e64:	40012708 	.word	0x40012708
 8001e68:	ffc3ffff 	.word	0xffc3ffff
 8001e6c:	fffe0219 	.word	0xfffe0219
 8001e70:	dffffc02 	.word	0xdffffc02
 8001e74:	07ffff04 	.word	0x07ffff04
 8001e78:	833fffe7 	.word	0x833fffe7

08001e7c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff fe07 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d135      	bne.n	8001efe <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2254      	movs	r2, #84	; 0x54
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_Start+0x24>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e035      	b.n	8001f0c <HAL_ADC_Start+0x90>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2254      	movs	r2, #84	; 0x54
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ea8:	250f      	movs	r5, #15
 8001eaa:	197c      	adds	r4, r7, r5
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 faaa 	bl	8002408 <ADC_Enable>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eb8:	197b      	adds	r3, r7, r5
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d119      	bne.n	8001ef4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_ADC_Start+0x98>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	0052      	lsls	r2, r2, #1
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	221c      	movs	r2, #28
 8001ede:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2254      	movs	r2, #84	; 0x54
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fdc3 	bl	8001a78 <LL_ADC_REG_StartConversion>
 8001ef2:	e008      	b.n	8001f06 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2254      	movs	r2, #84	; 0x54
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]
 8001efc:	e003      	b.n	8001f06 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001efe:	230f      	movs	r3, #15
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f06:	230f      	movs	r3, #15
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bdb0      	pop	{r4, r5, r7, pc}
 8001f14:	fffff0fe 	.word	0xfffff0fe

08001f18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d102      	bne.n	8001f30 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e00f      	b.n	8001f50 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	2220      	movs	r2, #32
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e072      	b.n	8002032 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f50:	f7ff fc56 	bl	8001800 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f58:	e01f      	b.n	8001f9a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	d01c      	beq.n	8001f9a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f60:	f7ff fc4e 	bl	8001800 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d302      	bcc.n	8001f76 <HAL_ADC_PollForConversion+0x5e>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d111      	bne.n	8001f9a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d10b      	bne.n	8001f9a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	2204      	movs	r2, #4
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2254      	movs	r2, #84	; 0x54
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e04b      	b.n	8002032 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d0d9      	beq.n	8001f5a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff fc7f 	bl	80018bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d02e      	beq.n	8002020 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7e9b      	ldrb	r3, [r3, #26]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d12a      	bne.n	8002020 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d123      	bne.n	8002020 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff fd5d 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d110      	bne.n	8002008 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	210c      	movs	r1, #12
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_ADC_PollForConversion+0x124>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2201      	movs	r2, #1
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
 8002006:	e00b      	b.n	8002020 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	2220      	movs	r2, #32
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	2201      	movs	r2, #1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7e1b      	ldrb	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	220c      	movs	r2, #12
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b004      	add	sp, #16
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	fffffefe 	.word	0xfffffefe

08002040 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b002      	add	sp, #8
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002062:	2317      	movs	r3, #23
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2254      	movs	r2, #84	; 0x54
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x24>
 8002078:	2302      	movs	r3, #2
 800207a:	e1c0      	b.n	80023fe <HAL_ADC_ConfigChannel+0x3a6>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2254      	movs	r2, #84	; 0x54
 8002080:	2101      	movs	r1, #1
 8002082:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0018      	movs	r0, r3
 800208a:	f7ff fd07 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 800208e:	1e03      	subs	r3, r0, #0
 8002090:	d000      	beq.n	8002094 <HAL_ADC_ConfigChannel+0x3c>
 8002092:	e1a3      	b.n	80023dc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d100      	bne.n	800209e <HAL_ADC_ConfigChannel+0x46>
 800209c:	e143      	b.n	8002326 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020ae:	4ac1      	ldr	r2, [pc, #772]	; (80023b4 <HAL_ADC_ConfigChannel+0x35c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f7ff fc2d 	bl	800191e <LL_ADC_REG_SetSequencerChAdd>
 80020c4:	e0c9      	b.n	800225a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	211f      	movs	r1, #31
 80020d0:	400b      	ands	r3, r1
 80020d2:	210f      	movs	r1, #15
 80020d4:	4099      	lsls	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	43db      	mvns	r3, r3
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	035b      	lsls	r3, r3, #13
 80020e4:	0b5b      	lsrs	r3, r3, #13
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x9c>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	221f      	movs	r2, #31
 80020f0:	4013      	ands	r3, r2
 80020f2:	e098      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d000      	beq.n	8002100 <HAL_ADC_ConfigChannel+0xa8>
 80020fe:	e091      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1cc>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d000      	beq.n	800210c <HAL_ADC_ConfigChannel+0xb4>
 800210a:	e089      	b.n	8002220 <HAL_ADC_ConfigChannel+0x1c8>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2204      	movs	r2, #4
 8002112:	4013      	ands	r3, r2
 8002114:	d000      	beq.n	8002118 <HAL_ADC_ConfigChannel+0xc0>
 8002116:	e081      	b.n	800221c <HAL_ADC_ConfigChannel+0x1c4>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2208      	movs	r2, #8
 800211e:	4013      	ands	r3, r2
 8002120:	d000      	beq.n	8002124 <HAL_ADC_ConfigChannel+0xcc>
 8002122:	e079      	b.n	8002218 <HAL_ADC_ConfigChannel+0x1c0>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2210      	movs	r2, #16
 800212a:	4013      	ands	r3, r2
 800212c:	d000      	beq.n	8002130 <HAL_ADC_ConfigChannel+0xd8>
 800212e:	e071      	b.n	8002214 <HAL_ADC_ConfigChannel+0x1bc>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2220      	movs	r2, #32
 8002136:	4013      	ands	r3, r2
 8002138:	d000      	beq.n	800213c <HAL_ADC_ConfigChannel+0xe4>
 800213a:	e069      	b.n	8002210 <HAL_ADC_ConfigChannel+0x1b8>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	4013      	ands	r3, r2
 8002144:	d000      	beq.n	8002148 <HAL_ADC_ConfigChannel+0xf0>
 8002146:	e061      	b.n	800220c <HAL_ADC_ConfigChannel+0x1b4>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	4013      	ands	r3, r2
 8002150:	d000      	beq.n	8002154 <HAL_ADC_ConfigChannel+0xfc>
 8002152:	e059      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1b0>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d151      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1ac>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4013      	ands	r3, r2
 800216a:	d149      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1a8>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4013      	ands	r3, r2
 8002176:	d141      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x1a4>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4013      	ands	r3, r2
 8002182:	d139      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1a0>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	015b      	lsls	r3, r3, #5
 800218c:	4013      	ands	r3, r2
 800218e:	d131      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x19c>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	4013      	ands	r3, r2
 800219a:	d129      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x198>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	4013      	ands	r3, r2
 80021a6:	d121      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x194>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	4013      	ands	r3, r2
 80021b2:	d119      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x190>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	4013      	ands	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x18c>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	4013      	ands	r3, r2
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x188>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	02db      	lsls	r3, r3, #11
 80021d4:	4013      	ands	r3, r2
 80021d6:	d001      	beq.n	80021dc <HAL_ADC_ConfigChannel+0x184>
 80021d8:	2312      	movs	r3, #18
 80021da:	e024      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021dc:	2300      	movs	r3, #0
 80021de:	e022      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021e0:	2311      	movs	r3, #17
 80021e2:	e020      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021e4:	2310      	movs	r3, #16
 80021e6:	e01e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021e8:	230f      	movs	r3, #15
 80021ea:	e01c      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021ec:	230e      	movs	r3, #14
 80021ee:	e01a      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021f0:	230d      	movs	r3, #13
 80021f2:	e018      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021f4:	230c      	movs	r3, #12
 80021f6:	e016      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021f8:	230b      	movs	r3, #11
 80021fa:	e014      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 80021fc:	230a      	movs	r3, #10
 80021fe:	e012      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002200:	2309      	movs	r3, #9
 8002202:	e010      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002204:	2308      	movs	r3, #8
 8002206:	e00e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002208:	2307      	movs	r3, #7
 800220a:	e00c      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 800220c:	2306      	movs	r3, #6
 800220e:	e00a      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002210:	2305      	movs	r3, #5
 8002212:	e008      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002214:	2304      	movs	r3, #4
 8002216:	e006      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002218:	2303      	movs	r3, #3
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 800221c:	2302      	movs	r3, #2
 800221e:	e002      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1ce>
 8002224:	2300      	movs	r3, #0
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	6852      	ldr	r2, [r2, #4]
 800222a:	201f      	movs	r0, #31
 800222c:	4002      	ands	r2, r0
 800222e:	4093      	lsls	r3, r2
 8002230:	000a      	movs	r2, r1
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	429a      	cmp	r2, r3
 8002246:	d808      	bhi.n	800225a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	001a      	movs	r2, r3
 8002256:	f7ff fb42 	bl	80018de <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	001a      	movs	r2, r3
 8002268:	f7ff fb7c 	bl	8001964 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db00      	blt.n	8002276 <HAL_ADC_ConfigChannel+0x21e>
 8002274:	e0bc      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff faf5 	bl	8001868 <LL_ADC_GetCommonPathInternalCh>
 800227e:	0003      	movs	r3, r0
 8002280:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a4d      	ldr	r2, [pc, #308]	; (80023bc <HAL_ADC_ConfigChannel+0x364>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d122      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002294:	d11d      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	0412      	lsls	r2, r2, #16
 800229c:	4313      	orrs	r3, r2
 800229e:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 80022a0:	0019      	movs	r1, r3
 80022a2:	0010      	movs	r0, r2
 80022a4:	f7ff facc 	bl	8001840 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a8:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <HAL_ADC_ConfigChannel+0x368>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4945      	ldr	r1, [pc, #276]	; (80023c4 <HAL_ADC_ConfigChannel+0x36c>)
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fd ff28 	bl	8000104 <__udivsi3>
 80022b4:	0003      	movs	r3, r0
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	0013      	movs	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	189b      	adds	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022c2:	e002      	b.n	80022ca <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022d0:	e08e      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a3c      	ldr	r2, [pc, #240]	; (80023c8 <HAL_ADC_ConfigChannel+0x370>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d10e      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x2a2>
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	045b      	lsls	r3, r3, #17
 80022e2:	4013      	ands	r3, r2
 80022e4:	d109      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	0452      	lsls	r2, r2, #17
 80022ec:	4313      	orrs	r3, r2
 80022ee:	4a32      	ldr	r2, [pc, #200]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 80022f0:	0019      	movs	r1, r3
 80022f2:	0010      	movs	r0, r2
 80022f4:	f7ff faa4 	bl	8001840 <LL_ADC_SetCommonPathInternalCh>
 80022f8:	e07a      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a33      	ldr	r2, [pc, #204]	; (80023cc <HAL_ADC_ConfigChannel+0x374>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d000      	beq.n	8002306 <HAL_ADC_ConfigChannel+0x2ae>
 8002304:	e074      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	03db      	lsls	r3, r3, #15
 800230c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800230e:	d000      	beq.n	8002312 <HAL_ADC_ConfigChannel+0x2ba>
 8002310:	e06e      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	03d2      	lsls	r2, r2, #15
 8002318:	4313      	orrs	r3, r2
 800231a:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 800231c:	0019      	movs	r1, r3
 800231e:	0010      	movs	r0, r2
 8002320:	f7ff fa8e 	bl	8001840 <LL_ADC_SetCommonPathInternalCh>
 8002324:	e064      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	429a      	cmp	r2, r3
 8002330:	d004      	beq.n	800233c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_ADC_ConfigChannel+0x35c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0019      	movs	r1, r3
 8002346:	0010      	movs	r0, r2
 8002348:	f7ff fafa 	bl	8001940 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	da4d      	bge.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff fa86 	bl	8001868 <LL_ADC_GetCommonPathInternalCh>
 800235c:	0003      	movs	r3, r0
 800235e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a15      	ldr	r2, [pc, #84]	; (80023bc <HAL_ADC_ConfigChannel+0x364>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_ADC_ConfigChannel+0x378>)
 800236e:	4013      	ands	r3, r2
 8002370:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 8002372:	0019      	movs	r1, r3
 8002374:	0010      	movs	r0, r2
 8002376:	f7ff fa63 	bl	8001840 <LL_ADC_SetCommonPathInternalCh>
 800237a:	e039      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_ADC_ConfigChannel+0x370>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d108      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_ADC_ConfigChannel+0x37c>)
 800238a:	4013      	ands	r3, r2
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 800238e:	0019      	movs	r1, r3
 8002390:	0010      	movs	r0, r2
 8002392:	f7ff fa55 	bl	8001840 <LL_ADC_SetCommonPathInternalCh>
 8002396:	e02b      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_ADC_ConfigChannel+0x374>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d126      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_ADC_ConfigChannel+0x380>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <HAL_ADC_ConfigChannel+0x360>)
 80023aa:	0019      	movs	r1, r3
 80023ac:	0010      	movs	r0, r2
 80023ae:	f7ff fa47 	bl	8001840 <LL_ADC_SetCommonPathInternalCh>
 80023b2:	e01d      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x398>
 80023b4:	80000004 	.word	0x80000004
 80023b8:	40012708 	.word	0x40012708
 80023bc:	b0001000 	.word	0xb0001000
 80023c0:	20000000 	.word	0x20000000
 80023c4:	00030d40 	.word	0x00030d40
 80023c8:	b8004000 	.word	0xb8004000
 80023cc:	b4002000 	.word	0xb4002000
 80023d0:	ff7fffff 	.word	0xff7fffff
 80023d4:	feffffff 	.word	0xfeffffff
 80023d8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	2220      	movs	r2, #32
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023e8:	2317      	movs	r3, #23
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2254      	movs	r2, #84	; 0x54
 80023f4:	2100      	movs	r1, #0
 80023f6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80023f8:	2317      	movs	r3, #23
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b006      	add	sp, #24
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)

08002408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff fb0b 	bl	8001a34 <LL_ADC_IsEnabled>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d000      	beq.n	8002424 <ADC_Enable+0x1c>
 8002422:	e069      	b.n	80024f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a36      	ldr	r2, [pc, #216]	; (8002504 <ADC_Enable+0xfc>)
 800242c:	4013      	ands	r3, r2
 800242e:	d00d      	beq.n	800244c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	2210      	movs	r2, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2201      	movs	r2, #1
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e056      	b.n	80024fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff facb 	bl	80019ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002456:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <ADC_Enable+0x100>)
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff fa05 	bl	8001868 <LL_ADC_GetCommonPathInternalCh>
 800245e:	0002      	movs	r2, r0
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	4013      	ands	r3, r2
 8002466:	d00f      	beq.n	8002488 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <ADC_Enable+0x104>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4928      	ldr	r1, [pc, #160]	; (8002510 <ADC_Enable+0x108>)
 800246e:	0018      	movs	r0, r3
 8002470:	f7fd fe48 	bl	8000104 <__udivsi3>
 8002474:	0003      	movs	r3, r0
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800247a:	e002      	b.n	8002482 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3b01      	subs	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e5b      	ldrb	r3, [r3, #25]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d033      	beq.n	80024f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002490:	f7ff f9b6 	bl	8001800 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002498:	e027      	b.n	80024ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0018      	movs	r0, r3
 80024a0:	f7ff fac8 	bl	8001a34 <LL_ADC_IsEnabled>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d104      	bne.n	80024b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff fa9d 	bl	80019ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024b2:	f7ff f9a5 	bl	8001800 <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d914      	bls.n	80024ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d00d      	beq.n	80024ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	2210      	movs	r2, #16
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	2201      	movs	r2, #1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e007      	b.n	80024fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d1d0      	bne.n	800249a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	80000017 	.word	0x80000017
 8002508:	40012708 	.word	0x40012708
 800250c:	20000000 	.word	0x20000000
 8002510:	00030d40 	.word	0x00030d40

08002514 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff fa98 	bl	8001a56 <LL_ADC_IsDisableOngoing>
 8002526:	0003      	movs	r3, r0
 8002528:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff fa80 	bl	8001a34 <LL_ADC_IsEnabled>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d046      	beq.n	80025c6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d143      	bne.n	80025c6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2205      	movs	r2, #5
 8002546:	4013      	ands	r3, r2
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10d      	bne.n	8002568 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff fa5d 	bl	8001a10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2203      	movs	r2, #3
 800255c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800255e:	f7ff f94f 	bl	8001800 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002566:	e028      	b.n	80025ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	2210      	movs	r2, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	2201      	movs	r2, #1
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e021      	b.n	80025c8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002584:	f7ff f93c 	bl	8001800 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d913      	bls.n	80025ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2201      	movs	r2, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d00d      	beq.n	80025ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	2210      	movs	r2, #16
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2201      	movs	r2, #1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e006      	b.n	80025c8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1de      	bne.n	8002584 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <LL_ADC_IsEnabled>:
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <LL_ADC_IsEnabled+0x18>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <LL_ADC_IsEnabled+0x1a>
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0fdb      	lsrs	r3, r3, #31
 8002600:	07da      	lsls	r2, r3, #31
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	429a      	cmp	r2, r3
 8002608:	d101      	bne.n	800260e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800260e:	2300      	movs	r3, #0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2254      	movs	r2, #84	; 0x54
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_ADCEx_Calibration_Start+0x1a>
 800262e:	2302      	movs	r3, #2
 8002630:	e06c      	b.n	800270c <HAL_ADCEx_Calibration_Start+0xf4>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2254      	movs	r2, #84	; 0x54
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800263a:	2317      	movs	r3, #23
 800263c:	18fc      	adds	r4, r7, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff ff67 	bl	8002514 <ADC_Disable>
 8002646:	0003      	movs	r3, r0
 8002648:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff ffbe 	bl	80025d0 <LL_ADC_IsEnabled>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d14c      	bne.n	80026f2 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_ADCEx_Calibration_Start+0xfc>)
 800265e:	4013      	ands	r3, r2
 8002660:	2202      	movs	r2, #2
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2203      	movs	r2, #3
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2103      	movs	r1, #3
 8002680:	438a      	bics	r2, r1
 8002682:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	0609      	lsls	r1, r1, #24
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002696:	e014      	b.n	80026c2 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <HAL_ADCEx_Calibration_Start+0x100>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d90d      	bls.n	80026c2 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	2212      	movs	r2, #18
 80026ac:	4393      	bics	r3, r2
 80026ae:	2210      	movs	r2, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2254      	movs	r2, #84	; 0x54
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e024      	b.n	800270c <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff ff93 	bl	80025f2 <LL_ADC_IsCalibrationOnGoing>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d1e3      	bne.n	8002698 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	2203      	movs	r2, #3
 80026e6:	4393      	bics	r3, r2
 80026e8:	2201      	movs	r2, #1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58
 80026f0:	e005      	b.n	80026fe <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	2210      	movs	r2, #16
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2254      	movs	r2, #84	; 0x54
 8002702:	2100      	movs	r1, #0
 8002704:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002706:	2317      	movs	r3, #23
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b007      	add	sp, #28
 8002712:	bd90      	pop	{r4, r7, pc}
 8002714:	fffffefd 	.word	0xfffffefd
 8002718:	0002f1ff 	.word	0x0002f1ff

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	0002      	movs	r2, r0
 8002724:	1dfb      	adds	r3, r7, #7
 8002726:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b7f      	cmp	r3, #127	; 0x7f
 800272e:	d809      	bhi.n	8002744 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	001a      	movs	r2, r3
 8002736:	231f      	movs	r3, #31
 8002738:	401a      	ands	r2, r3
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_EnableIRQ+0x30>)
 800273c:	2101      	movs	r1, #1
 800273e:	4091      	lsls	r1, r2
 8002740:	000a      	movs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	0002      	movs	r2, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b7f      	cmp	r3, #127	; 0x7f
 8002764:	d828      	bhi.n	80027b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002766:	4a2f      	ldr	r2, [pc, #188]	; (8002824 <__NVIC_SetPriority+0xd4>)
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b25b      	sxtb	r3, r3
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	33c0      	adds	r3, #192	; 0xc0
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	589b      	ldr	r3, [r3, r2]
 8002776:	1dfa      	adds	r2, r7, #7
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	0011      	movs	r1, r2
 800277c:	2203      	movs	r2, #3
 800277e:	400a      	ands	r2, r1
 8002780:	00d2      	lsls	r2, r2, #3
 8002782:	21ff      	movs	r1, #255	; 0xff
 8002784:	4091      	lsls	r1, r2
 8002786:	000a      	movs	r2, r1
 8002788:	43d2      	mvns	r2, r2
 800278a:	401a      	ands	r2, r3
 800278c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	401a      	ands	r2, r3
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	0018      	movs	r0, r3
 800279c:	2303      	movs	r3, #3
 800279e:	4003      	ands	r3, r0
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027a4:	481f      	ldr	r0, [pc, #124]	; (8002824 <__NVIC_SetPriority+0xd4>)
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	430a      	orrs	r2, r1
 80027b0:	33c0      	adds	r3, #192	; 0xc0
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027b6:	e031      	b.n	800281c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <__NVIC_SetPriority+0xd8>)
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	0019      	movs	r1, r3
 80027c0:	230f      	movs	r3, #15
 80027c2:	400b      	ands	r3, r1
 80027c4:	3b08      	subs	r3, #8
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3306      	adds	r3, #6
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	18d3      	adds	r3, r2, r3
 80027ce:	3304      	adds	r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1dfa      	adds	r2, r7, #7
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	0011      	movs	r1, r2
 80027d8:	2203      	movs	r2, #3
 80027da:	400a      	ands	r2, r1
 80027dc:	00d2      	lsls	r2, r2, #3
 80027de:	21ff      	movs	r1, #255	; 0xff
 80027e0:	4091      	lsls	r1, r2
 80027e2:	000a      	movs	r2, r1
 80027e4:	43d2      	mvns	r2, r2
 80027e6:	401a      	ands	r2, r3
 80027e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	22ff      	movs	r2, #255	; 0xff
 80027f0:	401a      	ands	r2, r3
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	0018      	movs	r0, r3
 80027f8:	2303      	movs	r3, #3
 80027fa:	4003      	ands	r3, r0
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002800:	4809      	ldr	r0, [pc, #36]	; (8002828 <__NVIC_SetPriority+0xd8>)
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	001c      	movs	r4, r3
 8002808:	230f      	movs	r3, #15
 800280a:	4023      	ands	r3, r4
 800280c:	3b08      	subs	r3, #8
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	430a      	orrs	r2, r1
 8002812:	3306      	adds	r3, #6
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	18c3      	adds	r3, r0, r3
 8002818:	3304      	adds	r3, #4
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b003      	add	sp, #12
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	045b      	lsls	r3, r3, #17
 800283c:	429a      	cmp	r2, r3
 800283e:	d301      	bcc.n	8002844 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002840:	2301      	movs	r3, #1
 8002842:	e010      	b.n	8002866 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <SysTick_Config+0x44>)
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	3a01      	subs	r2, #1
 800284a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284c:	2301      	movs	r3, #1
 800284e:	425b      	negs	r3, r3
 8002850:	2103      	movs	r1, #3
 8002852:	0018      	movs	r0, r3
 8002854:	f7ff ff7c 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <SysTick_Config+0x44>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <SysTick_Config+0x44>)
 8002860:	2207      	movs	r2, #7
 8002862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002864:	2300      	movs	r3, #0
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	e000e010 	.word	0xe000e010

08002874 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	210f      	movs	r1, #15
 8002880:	187b      	adds	r3, r7, r1
 8002882:	1c02      	adds	r2, r0, #0
 8002884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	187b      	adds	r3, r7, r1
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b25b      	sxtb	r3, r3
 800288e:	0011      	movs	r1, r2
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b004      	add	sp, #16
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	0002      	movs	r2, r0
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b25b      	sxtb	r3, r3
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7ff ff33 	bl	800271c <__NVIC_EnableIRQ>
}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff ffaf 	bl	800282c <SysTick_Config>
 80028ce:	0003      	movs	r3, r0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e6:	e14d      	b.n	8002b84 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4091      	lsls	r1, r2
 80028f2:	000a      	movs	r2, r1
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d100      	bne.n	8002900 <HAL_GPIO_Init+0x28>
 80028fe:	e13e      	b.n	8002b7e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2203      	movs	r2, #3
 8002906:	4013      	ands	r3, r2
 8002908:	2b01      	cmp	r3, #1
 800290a:	d005      	beq.n	8002918 <HAL_GPIO_Init+0x40>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2203      	movs	r2, #3
 8002912:	4013      	ands	r3, r2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d130      	bne.n	800297a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	409a      	lsls	r2, r3
 8002926:	0013      	movs	r3, r2
 8002928:	43da      	mvns	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	0013      	movs	r3, r2
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800294e:	2201      	movs	r2, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	43da      	mvns	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	2201      	movs	r2, #1
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	4013      	ands	r3, r2
 8002982:	2b03      	cmp	r3, #3
 8002984:	d017      	beq.n	80029b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	409a      	lsls	r2, r3
 8002994:	0013      	movs	r3, r2
 8002996:	43da      	mvns	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	0013      	movs	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2203      	movs	r2, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d123      	bne.n	8002a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	58d3      	ldr	r3, [r2, r3]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2207      	movs	r2, #7
 80029d4:	4013      	ands	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	43da      	mvns	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2107      	movs	r1, #7
 80029ee:	400b      	ands	r3, r1
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	409a      	lsls	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	6939      	ldr	r1, [r7, #16]
 8002a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	409a      	lsls	r2, r3
 8002a18:	0013      	movs	r3, r2
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	0013      	movs	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	23c0      	movs	r3, #192	; 0xc0
 8002a44:	029b      	lsls	r3, r3, #10
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <HAL_GPIO_Init+0x174>
 8002a4a:	e098      	b.n	8002b7e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002a4c:	4a53      	ldr	r2, [pc, #332]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3318      	adds	r3, #24
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	589b      	ldr	r3, [r3, r2]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	4013      	ands	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	220f      	movs	r2, #15
 8002a64:	409a      	lsls	r2, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	23a0      	movs	r3, #160	; 0xa0
 8002a74:	05db      	lsls	r3, r3, #23
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x1d6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_GPIO_Init+0x2c8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x1d2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_GPIO_Init+0x2cc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x1ce>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a46      	ldr	r2, [pc, #280]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x1ca>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a45      	ldr	r2, [pc, #276]	; (8002bac <HAL_GPIO_Init+0x2d4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x1c6>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e008      	b.n	8002ab0 <HAL_GPIO_Init+0x1d8>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x1d8>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x1d8>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x1d8>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x1d8>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	00d2      	lsls	r2, r2, #3
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ac0:	4936      	ldr	r1, [pc, #216]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3318      	adds	r3, #24
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ace:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	58d3      	ldr	r3, [r2, r3]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	025b      	lsls	r3, r3, #9
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af4:	4929      	ldr	r1, [pc, #164]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002afe:	2384      	movs	r3, #132	; 0x84
 8002b00:	58d3      	ldr	r3, [r2, r3]
 8002b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	029b      	lsls	r3, r3, #10
 8002b16:	4013      	ands	r3, r2
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b22:	491e      	ldr	r1, [pc, #120]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002b24:	2284      	movs	r2, #132	; 0x84
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	035b      	lsls	r3, r3, #13
 8002b42:	4013      	ands	r3, r2
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	039b      	lsls	r3, r3, #14
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	40da      	lsrs	r2, r3
 8002b8c:	1e13      	subs	r3, r2, #0
 8002b8e:	d000      	beq.n	8002b92 <HAL_GPIO_Init+0x2ba>
 8002b90:	e6aa      	b.n	80028e8 <HAL_GPIO_Init+0x10>
  }
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b006      	add	sp, #24
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021800 	.word	0x40021800
 8002ba0:	50000400 	.word	0x50000400
 8002ba4:	50000800 	.word	0x50000800
 8002ba8:	50000c00 	.word	0x50000c00
 8002bac:	50001000 	.word	0x50001000

08002bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	1dbb      	adds	r3, r7, #6
 8002bba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	1dba      	adds	r2, r7, #6
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d008      	beq.n	8002bda <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002bca:	1dba      	adds	r2, r7, #6
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002bd0:	1dbb      	adds	r3, r7, #6
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 f815 	bl	8002c04 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	1dba      	adds	r2, r7, #6
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	4013      	ands	r3, r2
 8002be4:	d008      	beq.n	8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002be8:	1dba      	adds	r2, r7, #6
 8002bea:	8812      	ldrh	r2, [r2, #0]
 8002bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002bee:	1dbb      	adds	r3, r7, #6
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7fe f9ac 	bl	8000f50 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021800 	.word	0x40021800

08002c04 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d11f      	bne.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	0013      	movs	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4912      	ldr	r1, [pc, #72]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7fd fa5a 	bl	8000104 <__udivsi3>
 8002c50:	0003      	movs	r3, r0
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c56:	e008      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e001      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e009      	b.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	401a      	ands	r2, r3
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d0ed      	beq.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b004      	add	sp, #16
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	fffff9ff 	.word	0xfffff9ff
 8002c90:	20000000 	.word	0x20000000
 8002c94:	000f4240 	.word	0x000f4240

08002c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f000 fb56 	bl	8003358 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d100      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x20>
 8002cb6:	e07d      	b.n	8002db4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4bc3      	ldr	r3, [pc, #780]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2238      	movs	r2, #56	; 0x38
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc2:	4bc1      	ldr	r3, [pc, #772]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x40>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d002      	beq.n	8002cde <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cde:	4bba      	ldr	r3, [pc, #744]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_OscConfig+0x11a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d15f      	bne.n	8002db2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f000 fb30 	bl	8003358 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x7c>
 8002d04:	4bb0      	ldr	r3, [pc, #704]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4baf      	ldr	r3, [pc, #700]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	0249      	lsls	r1, r1, #9
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e020      	b.n	8002d56 <HAL_RCC_OscConfig+0xbe>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	23a0      	movs	r3, #160	; 0xa0
 8002d1a:	02db      	lsls	r3, r3, #11
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10e      	bne.n	8002d3e <HAL_RCC_OscConfig+0xa6>
 8002d20:	4ba9      	ldr	r3, [pc, #676]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4ba8      	ldr	r3, [pc, #672]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	02c9      	lsls	r1, r1, #11
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4ba6      	ldr	r3, [pc, #664]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4ba5      	ldr	r3, [pc, #660]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0249      	lsls	r1, r1, #9
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e00b      	b.n	8002d56 <HAL_RCC_OscConfig+0xbe>
 8002d3e:	4ba2      	ldr	r3, [pc, #648]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4ba1      	ldr	r3, [pc, #644]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d44:	49a1      	ldr	r1, [pc, #644]	; (8002fcc <HAL_RCC_OscConfig+0x334>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	4b9f      	ldr	r3, [pc, #636]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b9e      	ldr	r3, [pc, #632]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d50:	499f      	ldr	r1, [pc, #636]	; (8002fd0 <HAL_RCC_OscConfig+0x338>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d014      	beq.n	8002d88 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fd4f 	bl	8001800 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fd4a 	bl	8001800 <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e2ee      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	4b93      	ldr	r3, [pc, #588]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	029b      	lsls	r3, r3, #10
 8002d82:	4013      	ands	r3, r2
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xd0>
 8002d86:	e015      	b.n	8002db4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fd3a 	bl	8001800 <HAL_GetTick>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d92:	f7fe fd35 	bl	8001800 <HAL_GetTick>
 8002d96:	0002      	movs	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	; 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e2d9      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	4013      	ands	r3, r2
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0xfa>
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2202      	movs	r2, #2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d100      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x128>
 8002dbe:	e099      	b.n	8002ef4 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc0:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2238      	movs	r2, #56	; 0x38
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dca:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0x148>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d002      	beq.n	8002de6 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d135      	bne.n	8002e52 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de6:	4b78      	ldr	r3, [pc, #480]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4013      	ands	r3, r2
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x166>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e2ac      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a74      	ldr	r2, [pc, #464]	; (8002fd4 <HAL_RCC_OscConfig+0x33c>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	021a      	lsls	r2, r3, #8
 8002e0e:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d112      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e1a:	4b6b      	ldr	r3, [pc, #428]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6e      	ldr	r2, [pc, #440]	; (8002fd8 <HAL_RCC_OscConfig+0x340>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e2e:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0adb      	lsrs	r3, r3, #11
 8002e34:	2207      	movs	r2, #7
 8002e36:	4013      	ands	r3, r2
 8002e38:	4a68      	ldr	r2, [pc, #416]	; (8002fdc <HAL_RCC_OscConfig+0x344>)
 8002e3a:	40da      	lsrs	r2, r3
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x348>)
 8002e3e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e40:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <HAL_RCC_OscConfig+0x34c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fe fc7f 	bl	8001748 <HAL_InitTick>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d051      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e282      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d030      	beq.n	8002ebc <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5e      	ldr	r2, [pc, #376]	; (8002fd8 <HAL_RCC_OscConfig+0x340>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	4b57      	ldr	r3, [pc, #348]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e6e:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0049      	lsls	r1, r1, #1
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fcc0 	bl	8001800 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe fcbb 	bl	8001800 <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e25f      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e98:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b48      	ldr	r3, [pc, #288]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a4a      	ldr	r2, [pc, #296]	; (8002fd4 <HAL_RCC_OscConfig+0x33c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	021a      	lsls	r2, r3, #8
 8002eb4:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002ec2:	4949      	ldr	r1, [pc, #292]	; (8002fe8 <HAL_RCC_OscConfig+0x350>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fc9a 	bl	8001800 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed2:	f7fe fc95 	bl	8001800 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e239      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4013      	ands	r3, r2
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x23a>
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	4013      	ands	r3, r2
 8002efc:	d047      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002efe:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2238      	movs	r2, #56	; 0x38
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b18      	cmp	r3, #24
 8002f08:	d10a      	bne.n	8002f20 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4013      	ands	r3, r2
 8002f12:	d03c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2f6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d138      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e21b      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d019      	beq.n	8002f5c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f2c:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	430a      	orrs	r2, r1
 8002f32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fc64 	bl	8001800 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fc5f 	bl	8001800 <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e203      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f54:	2202      	movs	r2, #2
 8002f56:	4013      	ands	r3, r2
 8002f58:	d0f1      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2a6>
 8002f5a:	e018      	b.n	8002f8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fc4a 	bl	8001800 <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fe fc45 	bl	8001800 <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1e9      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d1f1      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_RCC_OscConfig+0x302>
 8002f98:	e0c6      	b.n	8003128 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9a:	231f      	movs	r3, #31
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2238      	movs	r2, #56	; 0x38
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d11e      	bne.n	8002fec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x330>)
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d100      	bne.n	8002fba <HAL_RCC_OscConfig+0x322>
 8002fb8:	e0b6      	b.n	8003128 <HAL_RCC_OscConfig+0x490>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d000      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x32c>
 8002fc2:	e0b1      	b.n	8003128 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e1c7      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	fffeffff 	.word	0xfffeffff
 8002fd0:	fffbffff 	.word	0xfffbffff
 8002fd4:	ffff80ff 	.word	0xffff80ff
 8002fd8:	ffffc7ff 	.word	0xffffc7ff
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fec:	4bb8      	ldr	r3, [pc, #736]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8002fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	055b      	lsls	r3, r3, #21
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x364>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x366>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d011      	beq.n	8003026 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4bb3      	ldr	r3, [pc, #716]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003006:	4bb2      	ldr	r3, [pc, #712]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003008:	2180      	movs	r1, #128	; 0x80
 800300a:	0549      	lsls	r1, r1, #21
 800300c:	430a      	orrs	r2, r1
 800300e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003010:	4baf      	ldr	r3, [pc, #700]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	055b      	lsls	r3, r3, #21
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800301e:	231f      	movs	r3, #31
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003026:	4bab      	ldr	r3, [pc, #684]	; (80032d4 <HAL_RCC_OscConfig+0x63c>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4013      	ands	r3, r2
 8003030:	d11a      	bne.n	8003068 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003032:	4ba8      	ldr	r3, [pc, #672]	; (80032d4 <HAL_RCC_OscConfig+0x63c>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4ba7      	ldr	r3, [pc, #668]	; (80032d4 <HAL_RCC_OscConfig+0x63c>)
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	0049      	lsls	r1, r1, #1
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003040:	f7fe fbde 	bl	8001800 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304a:	f7fe fbd9 	bl	8001800 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e17d      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305c:	4b9d      	ldr	r3, [pc, #628]	; (80032d4 <HAL_RCC_OscConfig+0x63c>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4013      	ands	r3, r2
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <HAL_RCC_OscConfig+0x3e6>
 8003070:	4b97      	ldr	r3, [pc, #604]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003074:	4b96      	ldr	r3, [pc, #600]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	65da      	str	r2, [r3, #92]	; 0x5c
 800307c:	e01c      	b.n	80030b8 <HAL_RCC_OscConfig+0x420>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b05      	cmp	r3, #5
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x408>
 8003086:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800308a:	4b91      	ldr	r3, [pc, #580]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800308c:	2104      	movs	r1, #4
 800308e:	430a      	orrs	r2, r1
 8003090:	65da      	str	r2, [r3, #92]	; 0x5c
 8003092:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003094:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003096:	4b8e      	ldr	r3, [pc, #568]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003098:	2101      	movs	r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0x420>
 80030a0:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80030a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030a4:	4b8a      	ldr	r3, [pc, #552]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	438a      	bics	r2, r1
 80030aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80030ac:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80030ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030b0:	4b87      	ldr	r3, [pc, #540]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80030b2:	2104      	movs	r1, #4
 80030b4:	438a      	bics	r2, r1
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d014      	beq.n	80030ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fb9e 	bl	8001800 <HAL_GetTick>
 80030c4:	0003      	movs	r3, r0
 80030c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c8:	e009      	b.n	80030de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe fb99 	bl	8001800 <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	4a80      	ldr	r2, [pc, #512]	; (80032d8 <HAL_RCC_OscConfig+0x640>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e13c      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030de:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2202      	movs	r2, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x432>
 80030e8:	e013      	b.n	8003112 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fb89 	bl	8001800 <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f2:	e009      	b.n	8003108 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe fb84 	bl	8001800 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	4a76      	ldr	r2, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x640>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e127      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003108:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2202      	movs	r2, #2
 800310e:	4013      	ands	r3, r2
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003112:	231f      	movs	r3, #31
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800311e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003120:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003122:	496e      	ldr	r1, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x644>)
 8003124:	400a      	ands	r2, r1
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2220      	movs	r2, #32
 800312e:	4013      	ands	r3, r2
 8003130:	d039      	beq.n	80031a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01b      	beq.n	8003172 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	03c9      	lsls	r1, r1, #15
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fb5a 	bl	8001800 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003152:	f7fe fb55 	bl	8001800 <HAL_GetTick>
 8003156:	0002      	movs	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0f9      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	4013      	ands	r3, r2
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x4ba>
 8003170:	e019      	b.n	80031a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b56      	ldr	r3, [pc, #344]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003178:	4959      	ldr	r1, [pc, #356]	; (80032e0 <HAL_RCC_OscConfig+0x648>)
 800317a:	400a      	ands	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fb3f 	bl	8001800 <HAL_GetTick>
 8003182:	0003      	movs	r3, r0
 8003184:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003188:	f7fe fb3a 	bl	8001800 <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0de      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	4013      	ands	r3, r2
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d100      	bne.n	80031b0 <HAL_RCC_OscConfig+0x518>
 80031ae:	e0d2      	b.n	8003356 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2238      	movs	r2, #56	; 0x38
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d100      	bne.n	80031be <HAL_RCC_OscConfig+0x526>
 80031bc:	e081      	b.n	80032c2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d156      	bne.n	8003274 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80031cc:	4945      	ldr	r1, [pc, #276]	; (80032e4 <HAL_RCC_OscConfig+0x64c>)
 80031ce:	400a      	ands	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe fb15 	bl	8001800 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fb10 	bl	8001800 <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0b4      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	049b      	lsls	r3, r3, #18
 80031f6:	4013      	ands	r3, r2
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fa:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_RCC_OscConfig+0x650>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	431a      	orrs	r2, r3
 8003228:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800322a:	430a      	orrs	r2, r1
 800322c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322e:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0449      	lsls	r1, r1, #17
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	0549      	lsls	r1, r1, #21
 8003246:	430a      	orrs	r2, r1
 8003248:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe fad9 	bl	8001800 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fad4 	bl	8001800 <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e078      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	049b      	lsls	r3, r3, #18
 800326e:	4013      	ands	r3, r2
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x5bc>
 8003272:	e070      	b.n	8003356 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800327a:	491a      	ldr	r1, [pc, #104]	; (80032e4 <HAL_RCC_OscConfig+0x64c>)
 800327c:	400a      	ands	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003286:	2103      	movs	r1, #3
 8003288:	438a      	bics	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 8003292:	4916      	ldr	r1, [pc, #88]	; (80032ec <HAL_RCC_OscConfig+0x654>)
 8003294:	400a      	ands	r2, r1
 8003296:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fab2 	bl	8001800 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe faad 	bl	8001800 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e051      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x638>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	049b      	lsls	r3, r3, #18
 80032bc:	4013      	ands	r3, r2
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x60a>
 80032c0:	e049      	b.n	8003356 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d112      	bne.n	80032f0 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e044      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
 80032d8:	00001388 	.word	0x00001388
 80032dc:	efffffff 	.word	0xefffffff
 80032e0:	ffbfffff 	.word	0xffbfffff
 80032e4:	feffffff 	.word	0xfeffffff
 80032e8:	11c1808c 	.word	0x11c1808c
 80032ec:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x6c8>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2203      	movs	r2, #3
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	429a      	cmp	r2, r3
 8003302:	d126      	bne.n	8003352 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2270      	movs	r2, #112	; 0x70
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d11f      	bne.n	8003352 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	23fe      	movs	r3, #254	; 0xfe
 8003316:	01db      	lsls	r3, r3, #7
 8003318:	401a      	ands	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d116      	bne.n	8003352 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	23f8      	movs	r3, #248	; 0xf8
 8003328:	039b      	lsls	r3, r3, #14
 800332a:	401a      	ands	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d10e      	bne.n	8003352 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	23e0      	movs	r3, #224	; 0xe0
 8003338:	051b      	lsls	r3, r3, #20
 800333a:	401a      	ands	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	0f5b      	lsrs	r3, r3, #29
 8003348:	075a      	lsls	r2, r3, #29
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b008      	add	sp, #32
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000

08003364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0e9      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003378:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2207      	movs	r2, #7
 800337e:	4013      	ands	r3, r2
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d91e      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2207      	movs	r2, #7
 800338c:	4393      	bics	r3, r2
 800338e:	0019      	movs	r1, r3
 8003390:	4b70      	ldr	r3, [pc, #448]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003398:	f7fe fa32 	bl	8001800 <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033a0:	e009      	b.n	80033b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a2:	f7fe fa2d 	bl	8001800 <HAL_GetTick>
 80033a6:	0002      	movs	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	4a6a      	ldr	r2, [pc, #424]	; (8003558 <HAL_RCC_ClockConfig+0x1f4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0ca      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033b6:	4b67      	ldr	r3, [pc, #412]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2207      	movs	r2, #7
 80033bc:	4013      	ands	r3, r2
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d1ee      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2202      	movs	r2, #2
 80033ca:	4013      	ands	r3, r2
 80033cc:	d015      	beq.n	80033fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2204      	movs	r2, #4
 80033d4:	4013      	ands	r3, r2
 80033d6:	d006      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033d8:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 80033de:	21e0      	movs	r1, #224	; 0xe0
 80033e0:	01c9      	lsls	r1, r1, #7
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e6:	4b5d      	ldr	r3, [pc, #372]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4a5d      	ldr	r2, [pc, #372]	; (8003560 <HAL_RCC_ClockConfig+0x1fc>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2201      	movs	r2, #1
 8003400:	4013      	ands	r3, r2
 8003402:	d057      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	4013      	ands	r3, r2
 8003416:	d12b      	bne.n	8003470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e097      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d107      	bne.n	8003434 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	049b      	lsls	r3, r3, #18
 800342c:	4013      	ands	r3, r2
 800342e:	d11f      	bne.n	8003470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e08b      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343c:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4013      	ands	r3, r2
 8003446:	d113      	bne.n	8003470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e07f      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d106      	bne.n	8003462 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003454:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	2202      	movs	r2, #2
 800345a:	4013      	ands	r3, r2
 800345c:	d108      	bne.n	8003470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e074      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2202      	movs	r2, #2
 8003468:	4013      	ands	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e06d      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003470:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2207      	movs	r2, #7
 8003476:	4393      	bics	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4b37      	ldr	r3, [pc, #220]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003484:	f7fe f9bc 	bl	8001800 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348c:	e009      	b.n	80034a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348e:	f7fe f9b7 	bl	8001800 <HAL_GetTick>
 8003492:	0002      	movs	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <HAL_RCC_ClockConfig+0x1f4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e054      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2238      	movs	r2, #56	; 0x38
 80034a8:	401a      	ands	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1ec      	bne.n	800348e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2207      	movs	r2, #7
 80034ba:	4013      	ands	r3, r2
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d21e      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2207      	movs	r2, #7
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034d4:	f7fe f994 	bl	8001800 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fe f98f 	bl	8001800 <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_RCC_ClockConfig+0x1f4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e02c      	b.n	800354c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_RCC_ClockConfig+0x1f0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2207      	movs	r2, #7
 80034f8:	4013      	ands	r3, r2
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2204      	movs	r2, #4
 8003506:	4013      	ands	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_RCC_ClockConfig+0x200>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800351e:	f000 f829 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003522:	0001      	movs	r1, r0
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	220f      	movs	r2, #15
 800352c:	401a      	ands	r2, r3
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_RCC_ClockConfig+0x204>)
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	58d3      	ldr	r3, [r2, r3]
 8003534:	221f      	movs	r2, #31
 8003536:	4013      	ands	r3, r2
 8003538:	000a      	movs	r2, r1
 800353a:	40da      	lsrs	r2, r3
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_ClockConfig+0x208>)
 800353e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_ClockConfig+0x20c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0018      	movs	r0, r3
 8003546:	f7fe f8ff 	bl	8001748 <HAL_InitTick>
 800354a:	0003      	movs	r3, r0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b004      	add	sp, #16
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40022000 	.word	0x40022000
 8003558:	00001388 	.word	0x00001388
 800355c:	40021000 	.word	0x40021000
 8003560:	fffff0ff 	.word	0xfffff0ff
 8003564:	ffff8fff 	.word	0xffff8fff
 8003568:	08004eb8 	.word	0x08004eb8
 800356c:	20000000 	.word	0x20000000
 8003570:	20000004 	.word	0x20000004

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800357a:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2238      	movs	r2, #56	; 0x38
 8003580:	4013      	ands	r3, r2
 8003582:	d10f      	bne.n	80035a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003584:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0adb      	lsrs	r3, r3, #11
 800358a:	2207      	movs	r2, #7
 800358c:	4013      	ands	r3, r2
 800358e:	2201      	movs	r2, #1
 8003590:	409a      	lsls	r2, r3
 8003592:	0013      	movs	r3, r2
 8003594:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	4835      	ldr	r0, [pc, #212]	; (8003670 <HAL_RCC_GetSysClockFreq+0xfc>)
 800359a:	f7fc fdb3 	bl	8000104 <__udivsi3>
 800359e:	0003      	movs	r3, r0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e05d      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a4:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2238      	movs	r2, #56	; 0x38
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b0:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_RCC_GetSysClockFreq+0x100>)
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e054      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2238      	movs	r2, #56	; 0x38
 80035bc:	4013      	ands	r3, r2
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d138      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2203      	movs	r2, #3
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035cc:	4b27      	ldr	r3, [pc, #156]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	2207      	movs	r2, #7
 80035d4:	4013      	ands	r3, r2
 80035d6:	3301      	adds	r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d10d      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4824      	ldr	r0, [pc, #144]	; (8003674 <HAL_RCC_GetSysClockFreq+0x100>)
 80035e4:	f7fc fd8e 	bl	8000104 <__udivsi3>
 80035e8:	0003      	movs	r3, r0
 80035ea:	0019      	movs	r1, r3
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	227f      	movs	r2, #127	; 0x7f
 80035f4:	4013      	ands	r3, r2
 80035f6:	434b      	muls	r3, r1
 80035f8:	617b      	str	r3, [r7, #20]
        break;
 80035fa:	e00d      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	481c      	ldr	r0, [pc, #112]	; (8003670 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003600:	f7fc fd80 	bl	8000104 <__udivsi3>
 8003604:	0003      	movs	r3, r0
 8003606:	0019      	movs	r1, r3
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	0a1b      	lsrs	r3, r3, #8
 800360e:	227f      	movs	r2, #127	; 0x7f
 8003610:	4013      	ands	r3, r2
 8003612:	434b      	muls	r3, r1
 8003614:	617b      	str	r3, [r7, #20]
        break;
 8003616:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0f5b      	lsrs	r3, r3, #29
 800361e:	2207      	movs	r2, #7
 8003620:	4013      	ands	r3, r2
 8003622:	3301      	adds	r3, #1
 8003624:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	6978      	ldr	r0, [r7, #20]
 800362a:	f7fc fd6b 	bl	8000104 <__udivsi3>
 800362e:	0003      	movs	r3, r0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	e015      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2238      	movs	r2, #56	; 0x38
 800363a:	4013      	ands	r3, r2
 800363c:	2b20      	cmp	r3, #32
 800363e:	d103      	bne.n	8003648 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_GetSysClockFreq+0xf8>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2238      	movs	r2, #56	; 0x38
 800364e:	4013      	ands	r3, r2
 8003650:	2b18      	cmp	r3, #24
 8003652:	d103      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003654:	23fa      	movs	r3, #250	; 0xfa
 8003656:	01db      	lsls	r3, r3, #7
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e001      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003660:	693b      	ldr	r3, [r7, #16]
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b006      	add	sp, #24
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	40021000 	.word	0x40021000
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003680:	2313      	movs	r3, #19
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003688:	2312      	movs	r3, #18
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	4013      	ands	r3, r2
 800369a:	d100      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800369c:	e0ad      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2011      	movs	r0, #17
 80036a0:	183b      	adds	r3, r7, r0
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	055b      	lsls	r3, r3, #21
 80036ae:	4013      	ands	r3, r2
 80036b0:	d110      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	4b44      	ldr	r3, [pc, #272]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	0549      	lsls	r1, r1, #21
 80036bc:	430a      	orrs	r2, r1
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c
 80036c0:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80036c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	055b      	lsls	r3, r3, #21
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d4:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	0049      	lsls	r1, r1, #1
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e2:	f7fe f88d 	bl	8001800 <HAL_GetTick>
 80036e6:	0003      	movs	r3, r0
 80036e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ea:	e00b      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fe f888 	bl	8001800 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d904      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80036fa:	2313      	movs	r3, #19
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2203      	movs	r2, #3
 8003700:	701a      	strb	r2, [r3, #0]
        break;
 8003702:	e005      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003704:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4013      	ands	r3, r2
 800370e:	d0ed      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003710:	2313      	movs	r3, #19
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d15e      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800371c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800371e:	23c0      	movs	r3, #192	; 0xc0
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4013      	ands	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d019      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	429a      	cmp	r2, r3
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	4a24      	ldr	r2, [pc, #144]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0249      	lsls	r1, r1, #9
 800374a:	430a      	orrs	r2, r1
 800374c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003754:	491e      	ldr	r1, [pc, #120]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003756:	400a      	ands	r2, r1
 8003758:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2201      	movs	r2, #1
 8003764:	4013      	ands	r3, r2
 8003766:	d016      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe f84a 	bl	8001800 <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003770:	e00c      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fe f845 	bl	8001800 <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d904      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003782:	2313      	movs	r3, #19
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2203      	movs	r2, #3
 8003788:	701a      	strb	r2, [r3, #0]
            break;
 800378a:	e004      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	2202      	movs	r2, #2
 8003792:	4013      	ands	r3, r2
 8003794:	d0ed      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003796:	2313      	movs	r3, #19
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	4a09      	ldr	r2, [pc, #36]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80037b4:	e016      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b6:	2312      	movs	r3, #18
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2213      	movs	r2, #19
 80037bc:	18ba      	adds	r2, r7, r2
 80037be:	7812      	ldrb	r2, [r2, #0]
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e00f      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
 80037cc:	fffffcff 	.word	0xfffffcff
 80037d0:	fffeffff 	.word	0xfffeffff
 80037d4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	2312      	movs	r3, #18
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2213      	movs	r2, #19
 80037de:	18ba      	adds	r2, r7, r2
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037e4:	2311      	movs	r3, #17
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d105      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ee:	4bb6      	ldr	r3, [pc, #728]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f2:	4bb5      	ldr	r3, [pc, #724]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037f4:	49b5      	ldr	r1, [pc, #724]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2201      	movs	r2, #1
 8003800:	4013      	ands	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003804:	4bb0      	ldr	r3, [pc, #704]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	2203      	movs	r2, #3
 800380a:	4393      	bics	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4bad      	ldr	r3, [pc, #692]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003814:	430a      	orrs	r2, r1
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2202      	movs	r2, #2
 800381e:	4013      	ands	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003822:	4ba9      	ldr	r3, [pc, #676]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	220c      	movs	r2, #12
 8003828:	4393      	bics	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	4ba5      	ldr	r3, [pc, #660]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003832:	430a      	orrs	r2, r1
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2204      	movs	r2, #4
 800383c:	4013      	ands	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003840:	4ba1      	ldr	r3, [pc, #644]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2230      	movs	r2, #48	; 0x30
 8003846:	4393      	bics	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	4b9e      	ldr	r3, [pc, #632]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003850:	430a      	orrs	r2, r1
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2210      	movs	r2, #16
 800385a:	4013      	ands	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800385e:	4b9a      	ldr	r3, [pc, #616]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	4a9b      	ldr	r2, [pc, #620]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003864:	4013      	ands	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	4b96      	ldr	r3, [pc, #600]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800386e:	430a      	orrs	r2, r1
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	015b      	lsls	r3, r3, #5
 800387a:	4013      	ands	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800387e:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	4a94      	ldr	r2, [pc, #592]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	4b8e      	ldr	r3, [pc, #568]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800388e:	430a      	orrs	r2, r1
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4013      	ands	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800389e:	4b8a      	ldr	r3, [pc, #552]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	4a8d      	ldr	r2, [pc, #564]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ac:	4b86      	ldr	r3, [pc, #536]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038ae:	430a      	orrs	r2, r1
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4013      	ands	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038be:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	4a86      	ldr	r2, [pc, #536]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4b7e      	ldr	r3, [pc, #504]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038ce:	430a      	orrs	r2, r1
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2220      	movs	r2, #32
 80038d8:	4013      	ands	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038dc:	4b7a      	ldr	r3, [pc, #488]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	4a7f      	ldr	r2, [pc, #508]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038ec:	430a      	orrs	r2, r1
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2240      	movs	r2, #64	; 0x40
 80038f6:	4013      	ands	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fa:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	4a79      	ldr	r2, [pc, #484]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003900:	4013      	ands	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800390a:	430a      	orrs	r2, r1
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	01db      	lsls	r3, r3, #7
 8003916:	4013      	ands	r3, r2
 8003918:	d015      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800391a:	4b6b      	ldr	r3, [pc, #428]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	0899      	lsrs	r1, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003928:	430a      	orrs	r2, r1
 800392a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	05db      	lsls	r3, r3, #23
 8003934:	429a      	cmp	r2, r3
 8003936:	d106      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003938:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	4b62      	ldr	r3, [pc, #392]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	0249      	lsls	r1, r1, #9
 8003942:	430a      	orrs	r2, r1
 8003944:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	031b      	lsls	r3, r3, #12
 800394e:	4013      	ands	r3, r2
 8003950:	d009      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003952:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	4393      	bics	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003962:	430a      	orrs	r2, r1
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	039b      	lsls	r3, r3, #14
 800396e:	4013      	ands	r3, r2
 8003970:	d016      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003972:	4b55      	ldr	r3, [pc, #340]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	4a5c      	ldr	r2, [pc, #368]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003978:	4013      	ands	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003980:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003982:	430a      	orrs	r2, r1
 8003984:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	03db      	lsls	r3, r3, #15
 800398e:	429a      	cmp	r2, r3
 8003990:	d106      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003992:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b4c      	ldr	r3, [pc, #304]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	0449      	lsls	r1, r1, #17
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	03db      	lsls	r3, r3, #15
 80039a8:	4013      	ands	r3, r2
 80039aa:	d016      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039ac:	4b46      	ldr	r3, [pc, #280]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	4a4e      	ldr	r2, [pc, #312]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	045b      	lsls	r3, r3, #17
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d106      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039cc:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4b3d      	ldr	r3, [pc, #244]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0449      	lsls	r1, r1, #17
 80039d6:	430a      	orrs	r2, r1
 80039d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	4013      	ands	r3, r2
 80039e4:	d014      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	2203      	movs	r2, #3
 80039ec:	4393      	bics	r3, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80039f6:	430a      	orrs	r2, r1
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d106      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a02:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	0249      	lsls	r1, r1, #9
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	019b      	lsls	r3, r3, #6
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d014      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	220c      	movs	r2, #12
 8003a22:	4393      	bics	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2a:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d106      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a38:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a3e:	2180      	movs	r1, #128	; 0x80
 8003a40:	0249      	lsls	r1, r1, #9
 8003a42:	430a      	orrs	r2, r1
 8003a44:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	045b      	lsls	r3, r3, #17
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d016      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a62:	430a      	orrs	r2, r1
 8003a64:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d106      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a78:	2180      	movs	r1, #128	; 0x80
 8003a7a:	0449      	lsls	r1, r1, #17
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	049b      	lsls	r3, r3, #18
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d016      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	4a10      	ldr	r2, [pc, #64]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d106      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	0449      	lsls	r1, r1, #17
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003aba:	2312      	movs	r3, #18
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	781b      	ldrb	r3, [r3, #0]
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	efffffff 	.word	0xefffffff
 8003ad0:	fffff3ff 	.word	0xfffff3ff
 8003ad4:	fffffcff 	.word	0xfffffcff
 8003ad8:	fff3ffff 	.word	0xfff3ffff
 8003adc:	ffcfffff 	.word	0xffcfffff
 8003ae0:	ffffcfff 	.word	0xffffcfff
 8003ae4:	ffff3fff 	.word	0xffff3fff
 8003ae8:	ffbfffff 	.word	0xffbfffff
 8003aec:	feffffff 	.word	0xfeffffff

08003af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e04a      	b.n	8003b98 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	223d      	movs	r2, #61	; 0x3d
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	223c      	movs	r2, #60	; 0x3c
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7fd fd37 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	223d      	movs	r2, #61	; 0x3d
 8003b22:	2102      	movs	r1, #2
 8003b24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	0019      	movs	r1, r3
 8003b30:	0010      	movs	r0, r2
 8003b32:	f000 fca1 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2248      	movs	r2, #72	; 0x48
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	223e      	movs	r2, #62	; 0x3e
 8003b42:	2101      	movs	r1, #1
 8003b44:	5499      	strb	r1, [r3, r2]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	223f      	movs	r2, #63	; 0x3f
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	5499      	strb	r1, [r3, r2]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	2101      	movs	r1, #1
 8003b54:	5499      	strb	r1, [r3, r2]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2241      	movs	r2, #65	; 0x41
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	5499      	strb	r1, [r3, r2]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2242      	movs	r2, #66	; 0x42
 8003b62:	2101      	movs	r1, #1
 8003b64:	5499      	strb	r1, [r3, r2]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2243      	movs	r2, #67	; 0x43
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2244      	movs	r2, #68	; 0x44
 8003b72:	2101      	movs	r1, #1
 8003b74:	5499      	strb	r1, [r3, r2]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2245      	movs	r2, #69	; 0x45
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2246      	movs	r2, #70	; 0x46
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2247      	movs	r2, #71	; 0x47
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223d      	movs	r2, #61	; 0x3d
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e04a      	b.n	8003c48 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	223d      	movs	r2, #61	; 0x3d
 8003bb6:	5c9b      	ldrb	r3, [r3, r2]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d107      	bne.n	8003bce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	223c      	movs	r2, #60	; 0x3c
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f841 	bl	8003c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	223d      	movs	r2, #61	; 0x3d
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	0019      	movs	r1, r3
 8003be0:	0010      	movs	r0, r2
 8003be2:	f000 fc49 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2248      	movs	r2, #72	; 0x48
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	223e      	movs	r2, #62	; 0x3e
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5499      	strb	r1, [r3, r2]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	223f      	movs	r2, #63	; 0x3f
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	5499      	strb	r1, [r3, r2]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	2101      	movs	r1, #1
 8003c04:	5499      	strb	r1, [r3, r2]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2241      	movs	r2, #65	; 0x41
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2242      	movs	r2, #66	; 0x42
 8003c12:	2101      	movs	r1, #1
 8003c14:	5499      	strb	r1, [r3, r2]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2243      	movs	r2, #67	; 0x43
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2244      	movs	r2, #68	; 0x44
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2245      	movs	r2, #69	; 0x45
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2246      	movs	r2, #70	; 0x46
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2247      	movs	r2, #71	; 0x47
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	223d      	movs	r2, #61	; 0x3d
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b002      	add	sp, #8
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x22>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	223e      	movs	r2, #62	; 0x3e
 8003c74:	5c9b      	ldrb	r3, [r3, r2]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	1e5a      	subs	r2, r3, #1
 8003c7c:	4193      	sbcs	r3, r2
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e037      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x92>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d108      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x3a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223f      	movs	r2, #63	; 0x3f
 8003c8c:	5c9b      	ldrb	r3, [r3, r2]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	1e5a      	subs	r2, r3, #1
 8003c94:	4193      	sbcs	r3, r2
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e02b      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x92>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d108      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0x52>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	5c9b      	ldrb	r3, [r3, r2]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	1e5a      	subs	r2, r3, #1
 8003cac:	4193      	sbcs	r3, r2
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	e01f      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x92>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d108      	bne.n	8003cca <HAL_TIM_PWM_Start+0x6a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2241      	movs	r2, #65	; 0x41
 8003cbc:	5c9b      	ldrb	r3, [r3, r2]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	1e5a      	subs	r2, r3, #1
 8003cc4:	4193      	sbcs	r3, r2
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e013      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x92>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d108      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x82>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2242      	movs	r2, #66	; 0x42
 8003cd4:	5c9b      	ldrb	r3, [r3, r2]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	1e5a      	subs	r2, r3, #1
 8003cdc:	4193      	sbcs	r3, r2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e007      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x92>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2243      	movs	r2, #67	; 0x43
 8003ce6:	5c9b      	ldrb	r3, [r3, r2]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	4193      	sbcs	r3, r2
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e090      	b.n	8003e1c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_TIM_PWM_Start+0xaa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	223e      	movs	r2, #62	; 0x3e
 8003d04:	2102      	movs	r1, #2
 8003d06:	5499      	strb	r1, [r3, r2]
 8003d08:	e023      	b.n	8003d52 <HAL_TIM_PWM_Start+0xf2>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d104      	bne.n	8003d1a <HAL_TIM_PWM_Start+0xba>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	223f      	movs	r2, #63	; 0x3f
 8003d14:	2102      	movs	r1, #2
 8003d16:	5499      	strb	r1, [r3, r2]
 8003d18:	e01b      	b.n	8003d52 <HAL_TIM_PWM_Start+0xf2>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0xca>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2240      	movs	r2, #64	; 0x40
 8003d24:	2102      	movs	r1, #2
 8003d26:	5499      	strb	r1, [r3, r2]
 8003d28:	e013      	b.n	8003d52 <HAL_TIM_PWM_Start+0xf2>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_PWM_Start+0xda>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2241      	movs	r2, #65	; 0x41
 8003d34:	2102      	movs	r1, #2
 8003d36:	5499      	strb	r1, [r3, r2]
 8003d38:	e00b      	b.n	8003d52 <HAL_TIM_PWM_Start+0xf2>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Start+0xea>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2242      	movs	r2, #66	; 0x42
 8003d44:	2102      	movs	r1, #2
 8003d46:	5499      	strb	r1, [r3, r2]
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_PWM_Start+0xf2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2243      	movs	r2, #67	; 0x43
 8003d4e:	2102      	movs	r1, #2
 8003d50:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 ff76 	bl	8004c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <HAL_TIM_PWM_Start+0x1c4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_TIM_PWM_Start+0x128>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <HAL_TIM_PWM_Start+0x1c8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIM_PWM_Start+0x128>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_TIM_PWM_Start+0x1cc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIM_PWM_Start+0x128>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <HAL_TIM_PWM_Start+0x1d0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_PWM_Start+0x12c>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_TIM_PWM_Start+0x12e>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	0209      	lsls	r1, r1, #8
 8003da0:	430a      	orrs	r2, r1
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <HAL_TIM_PWM_Start+0x1c4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d014      	beq.n	8003dd8 <HAL_TIM_PWM_Start+0x178>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	05db      	lsls	r3, r3, #23
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d00e      	beq.n	8003dd8 <HAL_TIM_PWM_Start+0x178>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_TIM_PWM_Start+0x1d4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d009      	beq.n	8003dd8 <HAL_TIM_PWM_Start+0x178>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_TIM_PWM_Start+0x1d8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_TIM_PWM_Start+0x178>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <HAL_TIM_PWM_Start+0x1c8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d116      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_TIM_PWM_Start+0x1dc>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d016      	beq.n	8003e18 <HAL_TIM_PWM_Start+0x1b8>
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	025b      	lsls	r3, r3, #9
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d011      	beq.n	8003e18 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	e008      	b.n	8003e18 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e000      	b.n	8003e1a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b004      	add	sp, #16
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40014000 	.word	0x40014000
 8003e2c:	40014400 	.word	0x40014400
 8003e30:	40014800 	.word	0x40014800
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	00010007 	.word	0x00010007

08003e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d124      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11d      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	4252      	negs	r2, r2
 8003e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 fae0 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e007      	b.n	8003e9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 fad3 	bl	8004438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fadf 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d125      	bne.n	8003efa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d11e      	bne.n	8003efa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2205      	movs	r2, #5
 8003ec2:	4252      	negs	r2, r2
 8003ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	23c0      	movs	r3, #192	; 0xc0
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 fab3 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8003ee2:	e007      	b.n	8003ef4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 faa6 	bl	8004438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 fab2 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2208      	movs	r2, #8
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d124      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2208      	movs	r2, #8
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d11d      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2209      	movs	r2, #9
 8003f1c:	4252      	negs	r2, r2
 8003f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2204      	movs	r2, #4
 8003f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 fa87 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8003f3a:	e007      	b.n	8003f4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fa7a 	bl	8004438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 fa86 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2210      	movs	r2, #16
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d125      	bne.n	8003fac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2210      	movs	r2, #16
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d11e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2211      	movs	r2, #17
 8003f74:	4252      	negs	r2, r2
 8003f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	23c0      	movs	r3, #192	; 0xc0
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 fa5a 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e007      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 fa4d 	bl	8004438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 fa59 	bl	8004458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10f      	bne.n	8003fda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4252      	negs	r2, r2
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 fa27 	bl	8004428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2280      	movs	r2, #128	; 0x80
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d10f      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d108      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2281      	movs	r2, #129	; 0x81
 8003ffc:	4252      	negs	r2, r2
 8003ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0018      	movs	r0, r3
 8004004:	f000 fec4 	bl	8004d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	401a      	ands	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	429a      	cmp	r2, r3
 800401a:	d10e      	bne.n	800403a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	4013      	ands	r3, r2
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d107      	bne.n	800403a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_TIM_IRQHandler+0x260>)
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f000 feb3 	bl	8004da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2240      	movs	r2, #64	; 0x40
 8004042:	4013      	ands	r3, r2
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d10f      	bne.n	8004068 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	4013      	ands	r3, r2
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d108      	bne.n	8004068 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2241      	movs	r2, #65	; 0x41
 800405c:	4252      	negs	r2, r2
 800405e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0018      	movs	r0, r3
 8004064:	f000 fa00 	bl	8004468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2220      	movs	r2, #32
 8004070:	4013      	ands	r3, r2
 8004072:	2b20      	cmp	r3, #32
 8004074:	d10f      	bne.n	8004096 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	4013      	ands	r3, r2
 8004080:	2b20      	cmp	r3, #32
 8004082:	d108      	bne.n	8004096 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2221      	movs	r2, #33	; 0x21
 800408a:	4252      	negs	r2, r2
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 fe75 	bl	8004d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b002      	add	sp, #8
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	fffffeff 	.word	0xfffffeff

080040a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	223c      	movs	r2, #60	; 0x3c
 80040b4:	5c9b      	ldrb	r3, [r3, r2]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0df      	b.n	800427e <HAL_TIM_PWM_ConfigChannel+0x1da>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	223c      	movs	r2, #60	; 0x3c
 80040c2:	2101      	movs	r1, #1
 80040c4:	5499      	strb	r1, [r3, r2]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b14      	cmp	r3, #20
 80040ca:	d900      	bls.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x2a>
 80040cc:	e0d1      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	009a      	lsls	r2, r3, #2
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	0011      	movs	r1, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 fa52 	bl	800458c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2108      	movs	r1, #8
 80040f4:	430a      	orrs	r2, r1
 80040f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2104      	movs	r1, #4
 8004104:	438a      	bics	r2, r1
 8004106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6999      	ldr	r1, [r3, #24]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	619a      	str	r2, [r3, #24]
      break;
 800411a:	e0ab      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	0011      	movs	r1, r2
 8004124:	0018      	movs	r0, r3
 8004126:	f000 fabb 	bl	80046a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	0109      	lsls	r1, r1, #4
 8004138:	430a      	orrs	r2, r1
 800413a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4951      	ldr	r1, [pc, #324]	; (800428c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004148:	400a      	ands	r2, r1
 800414a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6999      	ldr	r1, [r3, #24]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	619a      	str	r2, [r3, #24]
      break;
 8004160:	e088      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	0011      	movs	r1, r2
 800416a:	0018      	movs	r0, r3
 800416c:	f000 fb1c 	bl	80047a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2108      	movs	r1, #8
 800417c:	430a      	orrs	r2, r1
 800417e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2104      	movs	r1, #4
 800418c:	438a      	bics	r2, r1
 800418e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69d9      	ldr	r1, [r3, #28]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e067      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	0011      	movs	r1, r2
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 fb83 	bl	80048b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0109      	lsls	r1, r1, #4
 80041c0:	430a      	orrs	r2, r1
 80041c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	492f      	ldr	r1, [pc, #188]	; (800428c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69d9      	ldr	r1, [r3, #28]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	61da      	str	r2, [r3, #28]
      break;
 80041e8:	e044      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	0011      	movs	r1, r2
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 fbca 	bl	800498c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2108      	movs	r1, #8
 8004204:	430a      	orrs	r2, r1
 8004206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2104      	movs	r1, #4
 8004214:	438a      	bics	r2, r1
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800422a:	e023      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	0011      	movs	r1, r2
 8004234:	0018      	movs	r0, r3
 8004236:	f000 fc09 	bl	8004a4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2180      	movs	r1, #128	; 0x80
 8004246:	0109      	lsls	r1, r1, #4
 8004248:	430a      	orrs	r2, r1
 800424a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	490d      	ldr	r1, [pc, #52]	; (800428c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004258:	400a      	ands	r2, r1
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	021a      	lsls	r2, r3, #8
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004270:	e000      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8004272:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	223c      	movs	r2, #60	; 0x3c
 8004278:	2100      	movs	r1, #0
 800427a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	08004ef8 	.word	0x08004ef8
 800428c:	fffffbff 	.word	0xfffffbff

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	223c      	movs	r2, #60	; 0x3c
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_ConfigClockSource+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0b7      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x188>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223c      	movs	r2, #60	; 0x3c
 80042ac:	2101      	movs	r1, #1
 80042ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	223d      	movs	r2, #61	; 0x3d
 80042b4:	2102      	movs	r1, #2
 80042b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a57      	ldr	r2, [pc, #348]	; (8004420 <HAL_TIM_ConfigClockSource+0x190>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a56      	ldr	r2, [pc, #344]	; (8004424 <HAL_TIM_ConfigClockSource+0x194>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	0192      	lsls	r2, r2, #6
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d040      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xd6>
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	0192      	lsls	r2, r2, #6
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d900      	bls.n	80042ee <HAL_TIM_ConfigClockSource+0x5e>
 80042ec:	e088      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 80042ee:	2280      	movs	r2, #128	; 0x80
 80042f0:	0152      	lsls	r2, r2, #5
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d100      	bne.n	80042f8 <HAL_TIM_ConfigClockSource+0x68>
 80042f6:	e085      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	0152      	lsls	r2, r2, #5
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d900      	bls.n	8004302 <HAL_TIM_ConfigClockSource+0x72>
 8004300:	e07e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004302:	2b70      	cmp	r3, #112	; 0x70
 8004304:	d018      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0xa8>
 8004306:	d900      	bls.n	800430a <HAL_TIM_ConfigClockSource+0x7a>
 8004308:	e07a      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 800430a:	2b60      	cmp	r3, #96	; 0x60
 800430c:	d04f      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x11e>
 800430e:	d900      	bls.n	8004312 <HAL_TIM_ConfigClockSource+0x82>
 8004310:	e076      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004312:	2b50      	cmp	r3, #80	; 0x50
 8004314:	d03b      	beq.n	800438e <HAL_TIM_ConfigClockSource+0xfe>
 8004316:	d900      	bls.n	800431a <HAL_TIM_ConfigClockSource+0x8a>
 8004318:	e072      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d057      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x13e>
 800431e:	d900      	bls.n	8004322 <HAL_TIM_ConfigClockSource+0x92>
 8004320:	e06e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	d063      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
 8004326:	d86b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d060      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
 800432c:	d868      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d05d      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
 8004332:	2b10      	cmp	r3, #16
 8004334:	d05b      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004336:	e063      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6899      	ldr	r1, [r3, #8]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f000 fc60 	bl	8004c0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2277      	movs	r2, #119	; 0x77
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
      break;
 8004364:	e04f      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f000 fc49 	bl	8004c0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	01c9      	lsls	r1, r1, #7
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
      break;
 800438c:	e03b      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	001a      	movs	r2, r3
 800439c:	f000 fbba 	bl	8004b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2150      	movs	r1, #80	; 0x50
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 fc14 	bl	8004bd4 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e02b      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	001a      	movs	r2, r3
 80043bc:	f000 fbd8 	bl	8004b70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2160      	movs	r1, #96	; 0x60
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 fc04 	bl	8004bd4 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e01b      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	001a      	movs	r2, r3
 80043dc:	f000 fb9a 	bl	8004b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2140      	movs	r1, #64	; 0x40
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 fbf4 	bl	8004bd4 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e00b      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	0019      	movs	r1, r3
 80043f8:	0010      	movs	r0, r2
 80043fa:	f000 fbeb 	bl	8004bd4 <TIM_ITRx_SetConfig>
        break;
 80043fe:	e002      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004400:	46c0      	nop			; (mov r8, r8)
 8004402:	e000      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004404:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	223d      	movs	r2, #61	; 0x3d
 800440a:	2101      	movs	r1, #1
 800440c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	223c      	movs	r2, #60	; 0x3c
 8004412:	2100      	movs	r1, #0
 8004414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b004      	add	sp, #16
 800441e:	bd80      	pop	{r7, pc}
 8004420:	ffceff88 	.word	0xffceff88
 8004424:	ffff00ff 	.word	0xffff00ff

08004428 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b002      	add	sp, #8
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a38      	ldr	r2, [pc, #224]	; (800456c <TIM_Base_SetConfig+0xf4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00c      	beq.n	80044aa <TIM_Base_SetConfig+0x32>
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	429a      	cmp	r2, r3
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0x32>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a34      	ldr	r2, [pc, #208]	; (8004570 <TIM_Base_SetConfig+0xf8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0x32>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <TIM_Base_SetConfig+0xfc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2270      	movs	r2, #112	; 0x70
 80044ae:	4393      	bics	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2b      	ldr	r2, [pc, #172]	; (800456c <TIM_Base_SetConfig+0xf4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d01c      	beq.n	80044fe <TIM_Base_SetConfig+0x86>
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	05db      	lsls	r3, r3, #23
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d017      	beq.n	80044fe <TIM_Base_SetConfig+0x86>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <TIM_Base_SetConfig+0xf8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0x86>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a26      	ldr	r2, [pc, #152]	; (8004574 <TIM_Base_SetConfig+0xfc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0x86>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <TIM_Base_SetConfig+0x100>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0x86>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a24      	ldr	r2, [pc, #144]	; (800457c <TIM_Base_SetConfig+0x104>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0x86>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <TIM_Base_SetConfig+0x108>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0x86>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a22      	ldr	r2, [pc, #136]	; (8004584 <TIM_Base_SetConfig+0x10c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a21      	ldr	r2, [pc, #132]	; (8004588 <TIM_Base_SetConfig+0x110>)
 8004502:	4013      	ands	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	4393      	bics	r3, r2
 8004516:	001a      	movs	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a0c      	ldr	r2, [pc, #48]	; (800456c <TIM_Base_SetConfig+0xf4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0xde>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a0e      	ldr	r2, [pc, #56]	; (800457c <TIM_Base_SetConfig+0x104>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0xde>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <TIM_Base_SetConfig+0x108>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0xde>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <TIM_Base_SetConfig+0x10c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d103      	bne.n	800455e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	615a      	str	r2, [r3, #20]
}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	46bd      	mov	sp, r7
 8004568:	b004      	add	sp, #16
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40002000 	.word	0x40002000
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800
 8004588:	fffffcff 	.word	0xfffffcff

0800458c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	2201      	movs	r2, #1
 800459c:	4393      	bics	r3, r2
 800459e:	001a      	movs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a32      	ldr	r2, [pc, #200]	; (8004684 <TIM_OC1_SetConfig+0xf8>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2203      	movs	r2, #3
 80045c2:	4393      	bics	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2202      	movs	r2, #2
 80045d4:	4393      	bics	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a28      	ldr	r2, [pc, #160]	; (8004688 <TIM_OC1_SetConfig+0xfc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00b      	beq.n	8004602 <TIM_OC1_SetConfig+0x76>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a27      	ldr	r2, [pc, #156]	; (800468c <TIM_OC1_SetConfig+0x100>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <TIM_OC1_SetConfig+0x76>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <TIM_OC1_SetConfig+0x104>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_OC1_SetConfig+0x76>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a25      	ldr	r2, [pc, #148]	; (8004694 <TIM_OC1_SetConfig+0x108>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10c      	bne.n	800461c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2208      	movs	r2, #8
 8004606:	4393      	bics	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2204      	movs	r2, #4
 8004618:	4393      	bics	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <TIM_OC1_SetConfig+0xfc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00b      	beq.n	800463c <TIM_OC1_SetConfig+0xb0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a19      	ldr	r2, [pc, #100]	; (800468c <TIM_OC1_SetConfig+0x100>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <TIM_OC1_SetConfig+0xb0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <TIM_OC1_SetConfig+0x104>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_OC1_SetConfig+0xb0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a17      	ldr	r2, [pc, #92]	; (8004694 <TIM_OC1_SetConfig+0x108>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4a16      	ldr	r2, [pc, #88]	; (8004698 <TIM_OC1_SetConfig+0x10c>)
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4a15      	ldr	r2, [pc, #84]	; (800469c <TIM_OC1_SetConfig+0x110>)
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	46bd      	mov	sp, r7
 800467e:	b006      	add	sp, #24
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	fffeff8f 	.word	0xfffeff8f
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800
 8004698:	fffffeff 	.word	0xfffffeff
 800469c:	fffffdff 	.word	0xfffffdff

080046a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	2210      	movs	r2, #16
 80046b0:	4393      	bics	r3, r2
 80046b2:	001a      	movs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <TIM_OC2_SetConfig+0xe8>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a2d      	ldr	r2, [pc, #180]	; (800478c <TIM_OC2_SetConfig+0xec>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2220      	movs	r2, #32
 80046ea:	4393      	bics	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <TIM_OC2_SetConfig+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10d      	bne.n	800471e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	4393      	bics	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2240      	movs	r2, #64	; 0x40
 800471a:	4393      	bics	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <TIM_OC2_SetConfig+0xf0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_OC2_SetConfig+0x9e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <TIM_OC2_SetConfig+0xf4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_OC2_SetConfig+0x9e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <TIM_OC2_SetConfig+0xf8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_OC2_SetConfig+0x9e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <TIM_OC2_SetConfig+0xfc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d113      	bne.n	8004766 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <TIM_OC2_SetConfig+0x100>)
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <TIM_OC2_SetConfig+0x104>)
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b006      	add	sp, #24
 8004786:	bd80      	pop	{r7, pc}
 8004788:	feff8fff 	.word	0xfeff8fff
 800478c:	fffffcff 	.word	0xfffffcff
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	fffffbff 	.word	0xfffffbff
 80047a4:	fffff7ff 	.word	0xfffff7ff

080047a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4a35      	ldr	r2, [pc, #212]	; (800488c <TIM_OC3_SetConfig+0xe4>)
 80047b8:	401a      	ands	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <TIM_OC3_SetConfig+0xe8>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2203      	movs	r2, #3
 80047dc:	4393      	bics	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4a29      	ldr	r2, [pc, #164]	; (8004894 <TIM_OC3_SetConfig+0xec>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a25      	ldr	r2, [pc, #148]	; (8004898 <TIM_OC3_SetConfig+0xf0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4a24      	ldr	r2, [pc, #144]	; (800489c <TIM_OC3_SetConfig+0xf4>)
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <TIM_OC3_SetConfig+0xf8>)
 800481e:	4013      	ands	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <TIM_OC3_SetConfig+0xf0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00b      	beq.n	8004842 <TIM_OC3_SetConfig+0x9a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <TIM_OC3_SetConfig+0xfc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <TIM_OC3_SetConfig+0x9a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <TIM_OC3_SetConfig+0x100>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC3_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <TIM_OC3_SetConfig+0x104>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d113      	bne.n	800486a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <TIM_OC3_SetConfig+0x108>)
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <TIM_OC3_SetConfig+0x10c>)
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	621a      	str	r2, [r3, #32]
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b006      	add	sp, #24
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fffffeff 	.word	0xfffffeff
 8004890:	fffeff8f 	.word	0xfffeff8f
 8004894:	fffffdff 	.word	0xfffffdff
 8004898:	40012c00 	.word	0x40012c00
 800489c:	fffff7ff 	.word	0xfffff7ff
 80048a0:	fffffbff 	.word	0xfffffbff
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	ffffefff 	.word	0xffffefff
 80048b4:	ffffdfff 	.word	0xffffdfff

080048b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4a28      	ldr	r2, [pc, #160]	; (8004968 <TIM_OC4_SetConfig+0xb0>)
 80048c8:	401a      	ands	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a22      	ldr	r2, [pc, #136]	; (800496c <TIM_OC4_SetConfig+0xb4>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a21      	ldr	r2, [pc, #132]	; (8004970 <TIM_OC4_SetConfig+0xb8>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <TIM_OC4_SetConfig+0xbc>)
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a19      	ldr	r2, [pc, #100]	; (8004978 <TIM_OC4_SetConfig+0xc0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_OC4_SetConfig+0x78>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a18      	ldr	r2, [pc, #96]	; (800497c <TIM_OC4_SetConfig+0xc4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_OC4_SetConfig+0x78>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a17      	ldr	r2, [pc, #92]	; (8004980 <TIM_OC4_SetConfig+0xc8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC4_SetConfig+0x78>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <TIM_OC4_SetConfig+0xcc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d109      	bne.n	8004944 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <TIM_OC4_SetConfig+0xd0>)
 8004934:	4013      	ands	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b006      	add	sp, #24
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	ffffefff 	.word	0xffffefff
 800496c:	feff8fff 	.word	0xfeff8fff
 8004970:	fffffcff 	.word	0xfffffcff
 8004974:	ffffdfff 	.word	0xffffdfff
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800
 8004988:	ffffbfff 	.word	0xffffbfff

0800498c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <TIM_OC5_SetConfig+0xa4>)
 800499c:	401a      	ands	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <TIM_OC5_SetConfig+0xa8>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <TIM_OC5_SetConfig+0xac>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <TIM_OC5_SetConfig+0xb0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_OC5_SetConfig+0x6e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <TIM_OC5_SetConfig+0xb4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_OC5_SetConfig+0x6e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <TIM_OC5_SetConfig+0xb8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_OC5_SetConfig+0x6e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <TIM_OC5_SetConfig+0xbc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d109      	bne.n	8004a0e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4a0c      	ldr	r2, [pc, #48]	; (8004a30 <TIM_OC5_SetConfig+0xa4>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	621a      	str	r2, [r3, #32]
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b006      	add	sp, #24
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	fffeffff 	.word	0xfffeffff
 8004a34:	fffeff8f 	.word	0xfffeff8f
 8004a38:	fffdffff 	.word	0xfffdffff
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800

08004a4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a26      	ldr	r2, [pc, #152]	; (8004af4 <TIM_OC6_SetConfig+0xa8>)
 8004a5c:	401a      	ands	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <TIM_OC6_SetConfig+0xac>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <TIM_OC6_SetConfig+0xb0>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	051b      	lsls	r3, r3, #20
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_OC6_SetConfig+0xb4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_OC6_SetConfig+0x70>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC6_SetConfig+0xb8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <TIM_OC6_SetConfig+0x70>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <TIM_OC6_SetConfig+0xbc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_OC6_SetConfig+0x70>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <TIM_OC6_SetConfig+0xc0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d109      	bne.n	8004ad0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <TIM_OC6_SetConfig+0xc4>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	029b      	lsls	r3, r3, #10
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b006      	add	sp, #24
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	ffefffff 	.word	0xffefffff
 8004af8:	feff8fff 	.word	0xfeff8fff
 8004afc:	ffdfffff 	.word	0xffdfffff
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	fffbffff 	.word	0xfffbffff

08004b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	4393      	bics	r3, r2
 8004b2e:	001a      	movs	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	22f0      	movs	r2, #240	; 0xf0
 8004b3e:	4393      	bics	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	220a      	movs	r2, #10
 8004b50:	4393      	bics	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b006      	add	sp, #24
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	2210      	movs	r2, #16
 8004b82:	4393      	bics	r3, r2
 8004b84:	001a      	movs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <TIM_TI2_ConfigInputStage+0x60>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	22a0      	movs	r2, #160	; 0xa0
 8004bac:	4393      	bics	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b006      	add	sp, #24
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	ffff0fff 	.word	0xffff0fff

08004bd4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <TIM_ITRx_SetConfig+0x34>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	2207      	movs	r2, #7
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	609a      	str	r2, [r3, #8]
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	ffcfff8f 	.word	0xffcfff8f

08004c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <TIM_ETR_SetConfig+0x3c>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b006      	add	sp, #24
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	ffff00ff 	.word	0xffff00ff

08004c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	221f      	movs	r2, #31
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2201      	movs	r2, #1
 8004c60:	409a      	lsls	r2, r3
 8004c62:	0013      	movs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	43d2      	mvns	r2, r2
 8004c6e:	401a      	ands	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	211f      	movs	r1, #31
 8004c7c:	400b      	ands	r3, r1
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4099      	lsls	r1, r3
 8004c82:	000b      	movs	r3, r1
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b006      	add	sp, #24
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	223c      	movs	r2, #60	; 0x3c
 8004ca2:	5c9b      	ldrb	r3, [r3, r2]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e05a      	b.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	223c      	movs	r2, #60	; 0x3c
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	223d      	movs	r2, #61	; 0x3d
 8004cb8:	2102      	movs	r1, #2
 8004cba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a26      	ldr	r2, [pc, #152]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d108      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2270      	movs	r2, #112	; 0x70
 8004cec:	4393      	bics	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d014      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d00e      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10c      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2280      	movs	r2, #128	; 0x80
 8004d3a:	4393      	bics	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	223d      	movs	r2, #61	; 0x3d
 8004d54:	2101      	movs	r1, #1
 8004d56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	223c      	movs	r2, #60	; 0x3c
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	ff0fffff 	.word	0xff0fffff
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40014000 	.word	0x40014000

08004d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	2600      	movs	r6, #0
 8004db4:	4d0c      	ldr	r5, [pc, #48]	; (8004de8 <__libc_init_array+0x38>)
 8004db6:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db8:	1b64      	subs	r4, r4, r5
 8004dba:	10a4      	asrs	r4, r4, #2
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	f000 f821 	bl	8004e08 <_init>
 8004dc6:	4d0a      	ldr	r5, [pc, #40]	; (8004df0 <__libc_init_array+0x40>)
 8004dc8:	4c0a      	ldr	r4, [pc, #40]	; (8004df4 <__libc_init_array+0x44>)
 8004dca:	1b64      	subs	r4, r4, r5
 8004dcc:	10a4      	asrs	r4, r4, #2
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	00b3      	lsls	r3, r6, #2
 8004dd6:	58eb      	ldr	r3, [r5, r3]
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	00b3      	lsls	r3, r6, #2
 8004de0:	58eb      	ldr	r3, [r5, r3]
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08004f4c 	.word	0x08004f4c
 8004dec:	08004f4c 	.word	0x08004f4c
 8004df0:	08004f4c 	.word	0x08004f4c
 8004df4:	08004f50 	.word	0x08004f50

08004df8 <memset>:
 8004df8:	0003      	movs	r3, r0
 8004dfa:	1882      	adds	r2, r0, r2
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	7019      	strb	r1, [r3, #0]
 8004e04:	3301      	adds	r3, #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <_init>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr

08004e14 <_fini>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr
