
prototipo-03-infravermelho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002adc  08002adc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002adc  08002adc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002adc  08002adc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002af0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002af0  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6b8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c08  00000000  00000000  0002c6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0002e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  0002eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b01e  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db71  00000000  00000000  0004ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b32df  00000000  00000000  0005879f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ba7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  0010bad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002a4c 	.word	0x08002a4c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002a4c 	.word	0x08002a4c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <delay_us>:
static void MX_GPIO_Init(void);
static void MX_USART1_IRDA_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void delay_us  ( uint16_t us)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0 );   // define o valor do contador como 0
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <delay_us+0x30>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2200      	movs	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
	while  (__HAL_TIM_GET_COUNTER(&htim1)  <  us);   // espera o contador alcançar a entrada us no parâmetro
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <delay_us+0x30>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000238:	1dbb      	adds	r3, r7, #6
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f8      	bcc.n	8000232 <delay_us+0x16>
	//return us;
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000078 	.word	0x20000078

08000250 <recebendo_data>:

uint32_t recebendo_data(){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0

	while((HAL_GPIO_ReadPin(infra_GPIO_Port, infra_Pin))==0);
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	23a0      	movs	r3, #160	; 0xa0
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2110      	movs	r1, #16
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fe9c 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000264:	1e03      	subs	r3, r0, #0
 8000266:	d0f7      	beq.n	8000258 <recebendo_data+0x8>
	 while(HAL_GPIO_ReadPin(infra_GPIO_Port, infra_Pin)==1);
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	23a0      	movs	r3, #160	; 0xa0
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2110      	movs	r1, #16
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fe93 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000276:	0003      	movs	r3, r0
 8000278:	2b01      	cmp	r3, #1
 800027a:	d0f6      	beq.n	800026a <recebendo_data+0x1a>

	 for(int i = 0; i < 32; i++)
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e03a      	b.n	80002f8 <recebendo_data+0xa8>
		  		 {
		  			 while((HAL_GPIO_ReadPin(infra_GPIO_Port, infra_Pin))==0);
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	23a0      	movs	r3, #160	; 0xa0
 8000286:	05db      	lsls	r3, r3, #23
 8000288:	2110      	movs	r1, #16
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fe86 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d0f7      	beq.n	8000284 <recebendo_data+0x34>

		  			 contagem = 0;
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <recebendo_data+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
		  			 while(HAL_GPIO_ReadPin(infra_GPIO_Port, infra_Pin)==1){
 800029a:	e008      	b.n	80002ae <recebendo_data+0x5e>
		  				 contagem++;
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <recebendo_data+0xbc>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b19      	ldr	r3, [pc, #100]	; (800030c <recebendo_data+0xbc>)
 80002a6:	701a      	strb	r2, [r3, #0]
		  				 //micros=delay_us(100);
		  				 delay_us(100);
 80002a8:	2064      	movs	r0, #100	; 0x64
 80002aa:	f7ff ffb7 	bl	800021c <delay_us>
		  			 while(HAL_GPIO_ReadPin(infra_GPIO_Port, infra_Pin)==1){
 80002ae:	23a0      	movs	r3, #160	; 0xa0
 80002b0:	05db      	lsls	r3, r3, #23
 80002b2:	2110      	movs	r1, #16
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 fe71 	bl	8000f9c <HAL_GPIO_ReadPin>
 80002ba:	0003      	movs	r3, r0
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d0ed      	beq.n	800029c <recebendo_data+0x4c>
		  				 //delay = delay_us(0.0001);

		  			 }

		  			 if(contagem > 12)
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <recebendo_data+0xbc>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b0c      	cmp	r3, #12
 80002c6:	d909      	bls.n	80002dc <recebendo_data+0x8c>
		  			 {
		  				 //teste = 0;
		  				teste |= (1UL << (31-i));
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	061a      	lsls	r2, r3, #24
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	40da      	lsrs	r2, r3
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <recebendo_data+0xc0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	431a      	orrs	r2, r3
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <recebendo_data+0xc0>)
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	e00a      	b.n	80002f2 <recebendo_data+0xa2>

		  			 else
		  			 {
		  				 //teste = 0;

		  				teste &= ~ (1UL << (31-i));
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	061a      	lsls	r2, r3, #24
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	40da      	lsrs	r2, r3
 80002e4:	0013      	movs	r3, r2
 80002e6:	43da      	mvns	r2, r3
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <recebendo_data+0xc0>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	401a      	ands	r2, r3
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <recebendo_data+0xc0>)
 80002f0:	601a      	str	r2, [r3, #0]
	 for(int i = 0; i < 32; i++)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3301      	adds	r3, #1
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b1f      	cmp	r3, #31
 80002fc:	ddc1      	ble.n	8000282 <recebendo_data+0x32>
		  			 }
		  		 }
	 return teste;
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <recebendo_data+0xc0>)
 8000300:	681b      	ldr	r3, [r3, #0]
}
 8000302:	0018      	movs	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	b002      	add	sp, #8
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	20000074 	.word	0x20000074
 8000310:	20000028 	.word	0x20000028

08000314 <convert_code>:
void convert_code (uint32_t code)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	switch (code)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a6f      	ldr	r2, [pc, #444]	; (80004dc <convert_code+0x1c8>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d100      	bne.n	8000326 <convert_code+0x12>
 8000324:	e0c9      	b.n	80004ba <convert_code+0x1a6>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a6c      	ldr	r2, [pc, #432]	; (80004dc <convert_code+0x1c8>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d900      	bls.n	8000330 <convert_code+0x1c>
 800032e:	e0d0      	b.n	80004d2 <convert_code+0x1be>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a6b      	ldr	r2, [pc, #428]	; (80004e0 <convert_code+0x1cc>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d100      	bne.n	800033a <convert_code+0x26>
 8000338:	e093      	b.n	8000462 <convert_code+0x14e>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a68      	ldr	r2, [pc, #416]	; (80004e0 <convert_code+0x1cc>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d900      	bls.n	8000344 <convert_code+0x30>
 8000342:	e0c6      	b.n	80004d2 <convert_code+0x1be>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a67      	ldr	r2, [pc, #412]	; (80004e4 <convert_code+0x1d0>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d100      	bne.n	800034e <convert_code+0x3a>
 800034c:	e0a9      	b.n	80004a2 <convert_code+0x18e>
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a64      	ldr	r2, [pc, #400]	; (80004e4 <convert_code+0x1d0>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d900      	bls.n	8000358 <convert_code+0x44>
 8000356:	e0bc      	b.n	80004d2 <convert_code+0x1be>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <convert_code+0x1d4>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d100      	bne.n	8000362 <convert_code+0x4e>
 8000360:	e07b      	b.n	800045a <convert_code+0x146>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a60      	ldr	r2, [pc, #384]	; (80004e8 <convert_code+0x1d4>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d900      	bls.n	800036c <convert_code+0x58>
 800036a:	e0b2      	b.n	80004d2 <convert_code+0x1be>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a5f      	ldr	r2, [pc, #380]	; (80004ec <convert_code+0x1d8>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d100      	bne.n	8000376 <convert_code+0x62>
 8000374:	e081      	b.n	800047a <convert_code+0x166>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a5c      	ldr	r2, [pc, #368]	; (80004ec <convert_code+0x1d8>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d900      	bls.n	8000380 <convert_code+0x6c>
 800037e:	e0a8      	b.n	80004d2 <convert_code+0x1be>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a5b      	ldr	r2, [pc, #364]	; (80004f0 <convert_code+0x1dc>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d100      	bne.n	800038a <convert_code+0x76>
 8000388:	e063      	b.n	8000452 <convert_code+0x13e>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a58      	ldr	r2, [pc, #352]	; (80004f0 <convert_code+0x1dc>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d900      	bls.n	8000394 <convert_code+0x80>
 8000392:	e09e      	b.n	80004d2 <convert_code+0x1be>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a57      	ldr	r2, [pc, #348]	; (80004f4 <convert_code+0x1e0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d100      	bne.n	800039e <convert_code+0x8a>
 800039c:	e089      	b.n	80004b2 <convert_code+0x19e>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a54      	ldr	r2, [pc, #336]	; (80004f4 <convert_code+0x1e0>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d900      	bls.n	80003a8 <convert_code+0x94>
 80003a6:	e094      	b.n	80004d2 <convert_code+0x1be>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a53      	ldr	r2, [pc, #332]	; (80004f8 <convert_code+0x1e4>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d100      	bne.n	80003b2 <convert_code+0x9e>
 80003b0:	e06f      	b.n	8000492 <convert_code+0x17e>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a50      	ldr	r2, [pc, #320]	; (80004f8 <convert_code+0x1e4>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d900      	bls.n	80003bc <convert_code+0xa8>
 80003ba:	e08a      	b.n	80004d2 <convert_code+0x1be>
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a4f      	ldr	r2, [pc, #316]	; (80004fc <convert_code+0x1e8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d100      	bne.n	80003c6 <convert_code+0xb2>
 80003c4:	e081      	b.n	80004ca <convert_code+0x1b6>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a4c      	ldr	r2, [pc, #304]	; (80004fc <convert_code+0x1e8>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d900      	bls.n	80003d0 <convert_code+0xbc>
 80003ce:	e080      	b.n	80004d2 <convert_code+0x1be>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a4b      	ldr	r2, [pc, #300]	; (8000500 <convert_code+0x1ec>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d038      	beq.n	800044a <convert_code+0x136>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a49      	ldr	r2, [pc, #292]	; (8000500 <convert_code+0x1ec>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d900      	bls.n	80003e2 <convert_code+0xce>
 80003e0:	e077      	b.n	80004d2 <convert_code+0x1be>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a47      	ldr	r2, [pc, #284]	; (8000504 <convert_code+0x1f0>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d100      	bne.n	80003ec <convert_code+0xd8>
 80003ea:	e06a      	b.n	80004c2 <convert_code+0x1ae>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a45      	ldr	r2, [pc, #276]	; (8000504 <convert_code+0x1f0>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d900      	bls.n	80003f6 <convert_code+0xe2>
 80003f4:	e06d      	b.n	80004d2 <convert_code+0x1be>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a43      	ldr	r2, [pc, #268]	; (8000508 <convert_code+0x1f4>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d045      	beq.n	800048a <convert_code+0x176>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a41      	ldr	r2, [pc, #260]	; (8000508 <convert_code+0x1f4>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d900      	bls.n	8000408 <convert_code+0xf4>
 8000406:	e064      	b.n	80004d2 <convert_code+0x1be>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a40      	ldr	r2, [pc, #256]	; (800050c <convert_code+0x1f8>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d02c      	beq.n	800046a <convert_code+0x156>
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a3e      	ldr	r2, [pc, #248]	; (800050c <convert_code+0x1f8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d85c      	bhi.n	80004d2 <convert_code+0x1be>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a3d      	ldr	r2, [pc, #244]	; (8000510 <convert_code+0x1fc>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d044      	beq.n	80004aa <convert_code+0x196>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a3b      	ldr	r2, [pc, #236]	; (8000510 <convert_code+0x1fc>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d854      	bhi.n	80004d2 <convert_code+0x1be>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a3a      	ldr	r2, [pc, #232]	; (8000514 <convert_code+0x200>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d020      	beq.n	8000472 <convert_code+0x15e>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a38      	ldr	r2, [pc, #224]	; (8000514 <convert_code+0x200>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d84c      	bhi.n	80004d2 <convert_code+0x1be>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a37      	ldr	r2, [pc, #220]	; (8000518 <convert_code+0x204>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d02c      	beq.n	800049a <convert_code+0x186>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a36      	ldr	r2, [pc, #216]	; (800051c <convert_code+0x208>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d01c      	beq.n	8000482 <convert_code+0x16e>
			recebeu = HASHTAG;
			break;


		default :
			break;
 8000448:	e043      	b.n	80004d2 <convert_code+0x1be>
			recebeu = DESLIGADO;
 800044a:	4b35      	ldr	r3, [pc, #212]	; (8000520 <convert_code+0x20c>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
			break;
 8000450:	e040      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_1;
 8000452:	4b33      	ldr	r3, [pc, #204]	; (8000520 <convert_code+0x20c>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
			break;
 8000458:	e03c      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_2;
 800045a:	4b31      	ldr	r3, [pc, #196]	; (8000520 <convert_code+0x20c>)
 800045c:	2202      	movs	r2, #2
 800045e:	701a      	strb	r2, [r3, #0]
			break;
 8000460:	e038      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_3;
 8000462:	4b2f      	ldr	r3, [pc, #188]	; (8000520 <convert_code+0x20c>)
 8000464:	2203      	movs	r2, #3
 8000466:	701a      	strb	r2, [r3, #0]
			break;
 8000468:	e034      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_4;
 800046a:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <convert_code+0x20c>)
 800046c:	2204      	movs	r2, #4
 800046e:	701a      	strb	r2, [r3, #0]
			break;
 8000470:	e030      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_5;
 8000472:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <convert_code+0x20c>)
 8000474:	2205      	movs	r2, #5
 8000476:	701a      	strb	r2, [r3, #0]
			break;
 8000478:	e02c      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_6;
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <convert_code+0x20c>)
 800047c:	2206      	movs	r2, #6
 800047e:	701a      	strb	r2, [r3, #0]
			break;
 8000480:	e028      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_7;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <convert_code+0x20c>)
 8000484:	2207      	movs	r2, #7
 8000486:	701a      	strb	r2, [r3, #0]
			break;
 8000488:	e024      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_8;
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <convert_code+0x20c>)
 800048c:	2208      	movs	r2, #8
 800048e:	701a      	strb	r2, [r3, #0]
			break;
 8000490:	e020      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = BOTAO_9;
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <convert_code+0x20c>)
 8000494:	2209      	movs	r2, #9
 8000496:	701a      	strb	r2, [r3, #0]
			break;
 8000498:	e01c      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = OK;
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <convert_code+0x20c>)
 800049c:	220a      	movs	r2, #10
 800049e:	701a      	strb	r2, [r3, #0]
			break;
 80004a0:	e018      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = SETA_BAIXO;
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <convert_code+0x20c>)
 80004a4:	220b      	movs	r2, #11
 80004a6:	701a      	strb	r2, [r3, #0]
			break;
 80004a8:	e014      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = SETA_ESQUERDA;
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <convert_code+0x20c>)
 80004ac:	220c      	movs	r2, #12
 80004ae:	701a      	strb	r2, [r3, #0]
			break;
 80004b0:	e010      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = SETA_CIMA;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <convert_code+0x20c>)
 80004b4:	220d      	movs	r2, #13
 80004b6:	701a      	strb	r2, [r3, #0]
			break;
 80004b8:	e00c      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = SETA_DIREITA;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <convert_code+0x20c>)
 80004bc:	220e      	movs	r2, #14
 80004be:	701a      	strb	r2, [r3, #0]
			break;
 80004c0:	e008      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = ASTERISCO;
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <convert_code+0x20c>)
 80004c4:	220f      	movs	r2, #15
 80004c6:	701a      	strb	r2, [r3, #0]
			break;
 80004c8:	e004      	b.n	80004d4 <convert_code+0x1c0>
			recebeu = HASHTAG;
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <convert_code+0x20c>)
 80004cc:	2210      	movs	r2, #16
 80004ce:	701a      	strb	r2, [r3, #0]
			break;
 80004d0:	e000      	b.n	80004d4 <convert_code+0x1c0>
			break;
 80004d2:	46c0      	nop			; (mov r8, r8)
		}
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	00ffc23d 	.word	0x00ffc23d
 80004e0:	00ffb04f 	.word	0x00ffb04f
 80004e4:	00ffa857 	.word	0x00ffa857
 80004e8:	00ff9867 	.word	0x00ff9867
 80004ec:	00ff7a85 	.word	0x00ff7a85
 80004f0:	00ff6897 	.word	0x00ff6897
 80004f4:	00ff629d 	.word	0x00ff629d
 80004f8:	00ff5aa5 	.word	0x00ff5aa5
 80004fc:	00ff52ad 	.word	0x00ff52ad
 8000500:	00ff4ab5 	.word	0x00ff4ab5
 8000504:	00ff42bd 	.word	0x00ff42bd
 8000508:	00ff38c7 	.word	0x00ff38c7
 800050c:	00ff30cf 	.word	0x00ff30cf
 8000510:	00ff22dd 	.word	0x00ff22dd
 8000514:	00ff18e7 	.word	0x00ff18e7
 8000518:	00ff02fd 	.word	0x00ff02fd
 800051c:	00ff10ef 	.word	0x00ff10ef
 8000520:	200000cc 	.word	0x200000cc

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fa58 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f82a 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f90e 	bl	8000750 <MX_GPIO_Init>
  MX_USART1_IRDA_Init();
 8000534:	f000 f8e0 	bl	80006f8 <MX_USART1_IRDA_Init>
  MX_TIM1_Init();
 8000538:	f000 f882 	bl	8000640 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //DWT_Delay_Init ();
  //micros=__HAL_TIM_GET_AUTORELOAD(&htim1);
  //micros=micros/9900;
  HAL_TIM_Base_Start(&htim1);
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <main+0x54>)
 800053e:	0018      	movs	r0, r3
 8000540:	f001 ff96 	bl	8002470 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while(HAL_GPIO_ReadPin(infra_GPIO_Port, infra_Pin)==1);
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	23a0      	movs	r3, #160	; 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2110      	movs	r1, #16
 800054c:	0018      	movs	r0, r3
 800054e:	f000 fd25 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000552:	0003      	movs	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d0f6      	beq.n	8000546 <main+0x22>

	  data = recebendo_data ();
 8000558:	f7ff fe7a 	bl	8000250 <recebendo_data>
 800055c:	0003      	movs	r3, r0
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <main+0x58>)
 8000562:	701a      	strb	r2, [r3, #0]

	  		convert_code (teste);
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <main+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff fed3 	bl	8000314 <convert_code>

	  		HAL_Delay (200);
 800056e:	20c8      	movs	r0, #200	; 0xc8
 8000570:	f000 faba 	bl	8000ae8 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(infra_GPIO_Port, infra_Pin)==1);
 8000574:	e7e6      	b.n	8000544 <main+0x20>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	20000078 	.word	0x20000078
 800057c:	20000075 	.word	0x20000075
 8000580:	20000028 	.word	0x20000028

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b095      	sub	sp, #84	; 0x54
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	2414      	movs	r4, #20
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	233c      	movs	r3, #60	; 0x3c
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f002 fa51 	bl	8002a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	0018      	movs	r0, r3
 800059e:	2310      	movs	r3, #16
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f002 fa4a 	bl	8002a3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 ff6f 	bl	8001490 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2202      	movs	r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005c0:	0021      	movs	r1, r4
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2240      	movs	r2, #64	; 0x40
 80005cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2202      	movs	r2, #2
 80005d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2202      	movs	r2, #2
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2208      	movs	r2, #8
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	0292      	lsls	r2, r2, #10
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	0492      	lsls	r2, r2, #18
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	0592      	lsls	r2, r2, #22
 80005fc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	0018      	movs	r0, r3
 8000602:	f000 ff91 	bl	8001528 <HAL_RCC_OscConfig>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800060a:	f000 f8db 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2207      	movs	r2, #7
 8000612:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2202      	movs	r2, #2
 8000618:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2102      	movs	r1, #2
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fae2 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000634:	f000 f8c6 	bl	80007c4 <Error_Handler>
  }
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b015      	add	sp, #84	; 0x54
 800063e:	bd90      	pop	{r4, r7, pc}

08000640 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	2310      	movs	r3, #16
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	0018      	movs	r0, r3
 800064c:	2310      	movs	r3, #16
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f002 f9f3 	bl	8002a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	0018      	movs	r0, r3
 800065a:	230c      	movs	r3, #12
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f002 f9ec 	bl	8002a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_TIM1_Init+0xac>)
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <MX_TIM1_Init+0xb0>)
 8000668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_TIM1_Init+0xac>)
 800066c:	223f      	movs	r2, #63	; 0x3f
 800066e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM1_Init+0xac>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_TIM1_Init+0xac>)
 8000678:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <MX_TIM1_Init+0xb4>)
 800067a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_TIM1_Init+0xac>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_TIM1_Init+0xac>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_TIM1_Init+0xac>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_TIM1_Init+0xac>)
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fe95 	bl	80023c0 <HAL_TIM_Base_Init>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800069a:	f000 f893 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069e:	2110      	movs	r1, #16
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	0152      	lsls	r2, r2, #5
 80006a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006a8:	187a      	adds	r2, r7, r1
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_TIM1_Init+0xac>)
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 ff38 	bl	8002524 <HAL_TIM_ConfigClockSource>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f884 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ce:	1d3a      	adds	r2, r7, #4
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_TIM1_Init+0xac>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 f917 	bl	8002908 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80006de:	f000 f871 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b008      	add	sp, #32
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000078 	.word	0x20000078
 80006f0:	40012c00 	.word	0x40012c00
 80006f4:	0000fffe 	.word	0x0000fffe

080006f8 <MX_USART1_IRDA_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_IRDA_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_USART1_IRDA_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 115200;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 8000704:	22e1      	movs	r2, #225	; 0xe1
 8000706:	0252      	lsls	r2, r2, #9
 8000708:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_EVEN;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_RX;
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 800071a:	2204      	movs	r2, #4
 800071c:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 10;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 8000720:	220a      	movs	r2, #10
 8000722:	751a      	strb	r2, [r3, #20]
  hirda1.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	82da      	strh	r2, [r3, #22]
  hirda1.Init.ClockPrescaler = IRDA_PRESCALER_DIV1;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_USART1_IRDA_Init+0x50>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fc50 	bl	8000fd8 <HAL_IRDA_Init>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_USART1_IRDA_Init+0x48>
  {
    Error_Handler();
 800073c:	f000 f842 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	2000002c 	.word	0x2000002c
 800074c:	40013800 	.word	0x40013800

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	240c      	movs	r4, #12
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0018      	movs	r0, r3
 800075c:	2314      	movs	r3, #20
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f002 f96b 	bl	8002a3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_GPIO_Init+0x70>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_GPIO_Init+0x70>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_GPIO_Init+0x70>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_GPIO_Init+0x70>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_GPIO_Init+0x70>)
 8000784:	2104      	movs	r1, #4
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_GPIO_Init+0x70>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078e:	2204      	movs	r2, #4
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : infra_Pin */
  GPIO_InitStruct.Pin = infra_Pin;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2210      	movs	r2, #16
 800079a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(infra_GPIO_Port, &GPIO_InitStruct);
 80007a8:	193a      	adds	r2, r7, r4
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fa87 	bl	8000cc4 <HAL_GPIO_Init>

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b009      	add	sp, #36	; 0x24
 80007bc:	bd90      	pop	{r4, r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_MspInit+0x4c>)
 80007d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	641a      	str	r2, [r3, #64]	; 0x40
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_MspInit+0x4c>)
 80007f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_MspInit+0x4c>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0549      	lsls	r1, r1, #21
 80007f8:	430a      	orrs	r2, r1
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_MspInit+0x4c>)
 80007fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	055b      	lsls	r3, r3, #21
 8000804:	4013      	ands	r3, r2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800080a:	23c0      	movs	r3, #192	; 0xc0
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	0018      	movs	r0, r3
 8000810:	f000 f98e 	bl	8000b30 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b097      	sub	sp, #92	; 0x5c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	240c      	movs	r4, #12
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	234c      	movs	r3, #76	; 0x4c
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f002 f902 	bl	8002a3c <memset>
  if(htim_base->Instance==TIM1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a11      	ldr	r2, [pc, #68]	; (8000884 <HAL_TIM_Base_MspInit+0x64>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d11c      	bne.n	800087c <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0392      	lsls	r2, r2, #14
 8000848:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2200      	movs	r2, #0
 800084e:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fb78 	bl	8001f48 <HAL_RCCEx_PeriphCLKConfig>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800085c:	f7ff ffb2 	bl	80007c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_TIM_Base_MspInit+0x68>)
 8000862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_TIM_Base_MspInit+0x68>)
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	0109      	lsls	r1, r1, #4
 800086a:	430a      	orrs	r2, r1
 800086c:	641a      	str	r2, [r3, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_TIM_Base_MspInit+0x68>)
 8000870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	4013      	ands	r3, r2
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b017      	add	sp, #92	; 0x5c
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	40012c00 	.word	0x40012c00
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_IRDA_MspInit>:
* This function configures the hardware resources used in this example
* @param hirda: IRDA handle pointer
* @retval None
*/
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b09d      	sub	sp, #116	; 0x74
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	235c      	movs	r3, #92	; 0x5c
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f002 f8cc 	bl	8002a3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	2410      	movs	r4, #16
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	234c      	movs	r3, #76	; 0x4c
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 f8c4 	bl	8002a3c <memset>
  if(hirda->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <HAL_IRDA_MspInit+0xb8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d13d      	bne.n	800093a <HAL_IRDA_MspInit+0xae>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fb3b 	bl	8001f48 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <HAL_IRDA_MspInit+0x4e>
    {
      Error_Handler();
 80008d6:	f7ff ff75 	bl	80007c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_IRDA_MspInit+0xbc>)
 80008dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_IRDA_MspInit+0xbc>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	01c9      	lsls	r1, r1, #7
 80008e4:	430a      	orrs	r2, r1
 80008e6:	641a      	str	r2, [r3, #64]	; 0x40
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_IRDA_MspInit+0xbc>)
 80008ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	01db      	lsls	r3, r3, #7
 80008f0:	4013      	ands	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_IRDA_MspInit+0xbc>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_IRDA_MspInit+0xbc>)
 80008fc:	2104      	movs	r1, #4
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_IRDA_MspInit+0xbc>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000906:	2204      	movs	r2, #4
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800090e:	215c      	movs	r1, #92	; 0x5c
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2202      	movs	r2, #2
 800091a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2201      	movs	r2, #1
 800092c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	187b      	adds	r3, r7, r1
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_IRDA_MspInit+0xc0>)
 8000932:	0019      	movs	r1, r3
 8000934:	0010      	movs	r0, r2
 8000936:	f000 f9c5 	bl	8000cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b01d      	add	sp, #116	; 0x74
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40013800 	.word	0x40013800
 8000948:	40021000 	.word	0x40021000
 800094c:	50000800 	.word	0x50000800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f89c 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800098c:	f7ff fff7 	bl	800097e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000992:	490d      	ldr	r1, [pc, #52]	; (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a8:	4c0a      	ldr	r4, [pc, #40]	; (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009b6:	f002 f81d 	bl	80029f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009ba:	f7ff fdb3 	bl	8000524 <main>

080009be <LoopForever>:

LoopForever:
  b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   r0, =_estack
 80009c0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009cc:	08002ae4 	.word	0x08002ae4
  ldr r2, =_sbss
 80009d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d4:	200000d4 	.word	0x200000d4

080009d8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_COMP_IRQHandler>
	...

080009dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x3c>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Init+0x3c>)
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	0049      	lsls	r1, r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f6:	2003      	movs	r0, #3
 80009f8:	f000 f810 	bl	8000a1c <HAL_InitTick>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e001      	b.n	8000a0c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff fee2 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a24:	230f      	movs	r3, #15
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <HAL_InitTick+0x88>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d02b      	beq.n	8000a8c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0x8c>)
 8000a36:	681c      	ldr	r4, [r3, #0]
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_InitTick+0x88>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	23fa      	movs	r3, #250	; 0xfa
 8000a40:	0098      	lsls	r0, r3, #2
 8000a42:	f7ff fb5f 	bl	8000104 <__udivsi3>
 8000a46:	0003      	movs	r3, r0
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f7ff fb5a 	bl	8000104 <__udivsi3>
 8000a50:	0003      	movs	r3, r0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 f929 	bl	8000caa <HAL_SYSTICK_Config>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d112      	bne.n	8000a82 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d80a      	bhi.n	8000a78 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	2301      	movs	r3, #1
 8000a66:	425b      	negs	r3, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f908 	bl	8000c80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_InitTick+0x90>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e00d      	b.n	8000a94 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a78:	230f      	movs	r3, #15
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e008      	b.n	8000a94 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a82:	230f      	movs	r3, #15
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e003      	b.n	8000a94 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a94:	230f      	movs	r3, #15
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b005      	add	sp, #20
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	18d2      	adds	r2, r2, r3
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200000d0 	.word	0x200000d0

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	200000d0 	.word	0x200000d0

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff fff0 	bl	8000ad4 <HAL_GetTick>
 8000af4:	0003      	movs	r3, r0
 8000af6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_Delay+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	001a      	movs	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	189b      	adds	r3, r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	f7ff ffe0 	bl	8000ad4 <HAL_GetTick>
 8000b14:	0002      	movs	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000008 	.word	0x20000008

08000b30 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	0019      	movs	r1, r3
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	40010000 	.word	0x40010000
 8000b58:	fffff9ff 	.word	0xfffff9ff

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b70:	d828      	bhi.n	8000bc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	33c0      	adds	r3, #192	; 0xc0
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	589b      	ldr	r3, [r3, r2]
 8000b82:	1dfa      	adds	r2, r7, #7
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	0011      	movs	r1, r2
 8000b88:	2203      	movs	r2, #3
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	21ff      	movs	r1, #255	; 0xff
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	401a      	ands	r2, r3
 8000b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4003      	ands	r3, r0
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	481f      	ldr	r0, [pc, #124]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	33c0      	adds	r3, #192	; 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bc2:	e031      	b.n	8000c28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0019      	movs	r1, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	400b      	ands	r3, r1
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3306      	adds	r3, #6
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	3304      	adds	r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	; 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001c      	movs	r4, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	4023      	ands	r3, r4
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	3306      	adds	r3, #6
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	18c3      	adds	r3, r0, r3
 8000c24:	3304      	adds	r3, #4
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	045b      	lsls	r3, r3, #17
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d301      	bcc.n	8000c50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e010      	b.n	8000c72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <SysTick_Config+0x44>)
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	3a01      	subs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c58:	2301      	movs	r3, #1
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	2103      	movs	r1, #3
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff7c 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x44>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x44>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff5d 	bl	8000b5c <__NVIC_SetPriority>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ffbf 	bl	8000c38 <SysTick_Config>
 8000cba:	0003      	movs	r3, r0
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	e14d      	b.n	8000f70 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d100      	bne.n	8000cec <HAL_GPIO_Init+0x28>
 8000cea:	e13e      	b.n	8000f6a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d005      	beq.n	8000d04 <HAL_GPIO_Init+0x40>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	43da      	mvns	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	2201      	movs	r2, #1
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d017      	beq.n	8000da2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2203      	movs	r2, #3
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d123      	bne.n	8000df6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	58d3      	ldr	r3, [r2, r3]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2107      	movs	r1, #7
 8000dda:	400b      	ands	r3, r1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	6939      	ldr	r1, [r7, #16]
 8000df4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2203      	movs	r2, #3
 8000e14:	401a      	ands	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	029b      	lsls	r3, r3, #10
 8000e32:	4013      	ands	r3, r2
 8000e34:	d100      	bne.n	8000e38 <HAL_GPIO_Init+0x174>
 8000e36:	e098      	b.n	8000f6a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e38:	4a53      	ldr	r2, [pc, #332]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3318      	adds	r3, #24
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	589b      	ldr	r3, [r3, r2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	220f      	movs	r2, #15
 8000e50:	409a      	lsls	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x1d6>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_GPIO_Init+0x2c8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x1d2>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <HAL_GPIO_Init+0x2cc>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x1ce>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x1ca>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a45      	ldr	r2, [pc, #276]	; (8000f98 <HAL_GPIO_Init+0x2d4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x1c6>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x1d8>
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x1d8>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x1d8>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x1d8>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x1d8>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	00d2      	lsls	r2, r2, #3
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eac:	4936      	ldr	r1, [pc, #216]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3318      	adds	r3, #24
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000eba:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	58d3      	ldr	r3, [r2, r3]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43da      	mvns	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ee0:	4929      	ldr	r1, [pc, #164]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000ee8:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000eea:	2384      	movs	r3, #132	; 0x84
 8000eec:	58d3      	ldr	r3, [r2, r3]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	4013      	ands	r3, r2
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f0e:	491e      	ldr	r1, [pc, #120]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000f10:	2284      	movs	r2, #132	; 0x84
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	035b      	lsls	r3, r3, #13
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43da      	mvns	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	039b      	lsls	r3, r3, #14
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_GPIO_Init+0x2c4>)
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	40da      	lsrs	r2, r3
 8000f78:	1e13      	subs	r3, r2, #0
 8000f7a:	d000      	beq.n	8000f7e <HAL_GPIO_Init+0x2ba>
 8000f7c:	e6aa      	b.n	8000cd4 <HAL_GPIO_Init+0x10>
  }
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	50000400 	.word	0x50000400
 8000f90:	50000800 	.word	0x50000800
 8000f94:	50000c00 	.word	0x50000c00
 8000f98:	50001000 	.word	0x50001000

08000f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	000a      	movs	r2, r1
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	1cba      	adds	r2, r7, #2
 8000fb0:	8812      	ldrh	r2, [r2, #0]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d004      	beq.n	8000fc0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e003      	b.n	8000fc8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fc8:	230f      	movs	r3, #15
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_IRDA_Init>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e044      	b.n	8001074 <HAL_IRDA_Init+0x9c>
  }

  /* Check the USART/UART associated to the IRDA handle */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d107      	bne.n	8001002 <HAL_IRDA_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2238      	movs	r2, #56	; 0x38
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fc45 	bl	800088c <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2224      	movs	r2, #36	; 0x24
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable the Peripheral to update the configuration registers */
  __HAL_IRDA_DISABLE(hirda);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2101      	movs	r1, #1
 8001014:	438a      	bics	r2, r1
 8001016:	601a      	str	r2, [r3, #0]

  /* Set the IRDA Communication parameters */
  if (IRDA_SetConfig(hirda) == HAL_ERROR)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f830 	bl	8001080 <IRDA_SetConfig>
 8001020:	0003      	movs	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <HAL_IRDA_Init+0x52>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e024      	b.n	8001074 <HAL_IRDA_Init+0x9c>
  }

  /* In IRDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4911      	ldr	r1, [pc, #68]	; (800107c <HAL_IRDA_Init+0xa4>)
 8001036:	400a      	ands	r2, r1
 8001038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2128      	movs	r1, #40	; 0x28
 8001046:	438a      	bics	r2, r1
 8001048:	609a      	str	r2, [r3, #8]

  /* set the UART/USART in IRDA mode */
  hirda->Instance->CR3 |= USART_CR3_IREN;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2102      	movs	r1, #2
 8001056:	430a      	orrs	r2, r1
 8001058:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_IRDA_ENABLE(hirda);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving hirda->gState and hirda->RxState to Ready */
  return (IRDA_CheckIdleState(hirda));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0018      	movs	r0, r3
 800106e:	f000 f97f 	bl	8001370 <IRDA_CheckIdleState>
 8001072:	0003      	movs	r3, r0
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}
 800107c:	ffff87ff 	.word	0xffff87ff

08001080 <IRDA_SetConfig>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  IRDA_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret = HAL_OK;
 8001088:	2312      	movs	r3, #18
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the IRDA Word Length, Parity and transfer Mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4aaa      	ldr	r2, [pc, #680]	; (8001354 <IRDA_SetConfig+0x2d4>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	0019      	movs	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2204      	movs	r2, #4
 80010c0:	4393      	bics	r3, r2
 80010c2:	001a      	movs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8adb      	ldrh	r3, [r3, #22]
 80010c8:	0019      	movs	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	609a      	str	r2, [r3, #8]

  /*--------------------- USART clock PRESC Configuration ----------------*/
  /* Configure
  * - IRDA Clock Prescaler: set PRESCALER according to hirda->Init.ClockPrescaler value */
  MODIFY_REG(hirda->Instance->PRESC, USART_PRESC_PRESCALER, hirda->Init.ClockPrescaler);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d8:	220f      	movs	r2, #15
 80010da:	4393      	bics	r3, r2
 80010dc:	0019      	movs	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART GTPR Configuration ----------------------*/
  MODIFY_REG(hirda->Instance->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)hirda->Init.Prescaler);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	22ff      	movs	r2, #255	; 0xff
 80010f2:	4393      	bics	r3, r2
 80010f4:	001a      	movs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7d1b      	ldrb	r3, [r3, #20]
 80010fa:	0019      	movs	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART BRR Configuration -----------------------*/
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a93      	ldr	r2, [pc, #588]	; (8001358 <IRDA_SetConfig+0x2d8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d127      	bne.n	800115e <IRDA_SetConfig+0xde>
 800110e:	4b93      	ldr	r3, [pc, #588]	; (800135c <IRDA_SetConfig+0x2dc>)
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	2203      	movs	r2, #3
 8001114:	4013      	ands	r3, r2
 8001116:	2b03      	cmp	r3, #3
 8001118:	d017      	beq.n	800114a <IRDA_SetConfig+0xca>
 800111a:	d81b      	bhi.n	8001154 <IRDA_SetConfig+0xd4>
 800111c:	2b02      	cmp	r3, #2
 800111e:	d00a      	beq.n	8001136 <IRDA_SetConfig+0xb6>
 8001120:	d818      	bhi.n	8001154 <IRDA_SetConfig+0xd4>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <IRDA_SetConfig+0xac>
 8001126:	2b01      	cmp	r3, #1
 8001128:	d00a      	beq.n	8001140 <IRDA_SetConfig+0xc0>
 800112a:	e013      	b.n	8001154 <IRDA_SetConfig+0xd4>
 800112c:	2313      	movs	r3, #19
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e071      	b.n	800121a <IRDA_SetConfig+0x19a>
 8001136:	2313      	movs	r3, #19
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e06c      	b.n	800121a <IRDA_SetConfig+0x19a>
 8001140:	2313      	movs	r3, #19
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2204      	movs	r2, #4
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e067      	b.n	800121a <IRDA_SetConfig+0x19a>
 800114a:	2313      	movs	r3, #19
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2210      	movs	r2, #16
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e062      	b.n	800121a <IRDA_SetConfig+0x19a>
 8001154:	2313      	movs	r3, #19
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2220      	movs	r2, #32
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e05d      	b.n	800121a <IRDA_SetConfig+0x19a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a7f      	ldr	r2, [pc, #508]	; (8001360 <IRDA_SetConfig+0x2e0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d127      	bne.n	80011b8 <IRDA_SetConfig+0x138>
 8001168:	4b7c      	ldr	r3, [pc, #496]	; (800135c <IRDA_SetConfig+0x2dc>)
 800116a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116c:	220c      	movs	r2, #12
 800116e:	4013      	ands	r3, r2
 8001170:	2b0c      	cmp	r3, #12
 8001172:	d017      	beq.n	80011a4 <IRDA_SetConfig+0x124>
 8001174:	d81b      	bhi.n	80011ae <IRDA_SetConfig+0x12e>
 8001176:	2b08      	cmp	r3, #8
 8001178:	d00a      	beq.n	8001190 <IRDA_SetConfig+0x110>
 800117a:	d818      	bhi.n	80011ae <IRDA_SetConfig+0x12e>
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <IRDA_SetConfig+0x106>
 8001180:	2b04      	cmp	r3, #4
 8001182:	d00a      	beq.n	800119a <IRDA_SetConfig+0x11a>
 8001184:	e013      	b.n	80011ae <IRDA_SetConfig+0x12e>
 8001186:	2313      	movs	r3, #19
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e044      	b.n	800121a <IRDA_SetConfig+0x19a>
 8001190:	2313      	movs	r3, #19
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2202      	movs	r2, #2
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e03f      	b.n	800121a <IRDA_SetConfig+0x19a>
 800119a:	2313      	movs	r3, #19
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	2204      	movs	r2, #4
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e03a      	b.n	800121a <IRDA_SetConfig+0x19a>
 80011a4:	2313      	movs	r3, #19
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2210      	movs	r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e035      	b.n	800121a <IRDA_SetConfig+0x19a>
 80011ae:	2313      	movs	r3, #19
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2220      	movs	r2, #32
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e030      	b.n	800121a <IRDA_SetConfig+0x19a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a69      	ldr	r2, [pc, #420]	; (8001364 <IRDA_SetConfig+0x2e4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d127      	bne.n	8001212 <IRDA_SetConfig+0x192>
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <IRDA_SetConfig+0x2dc>)
 80011c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c6:	2230      	movs	r2, #48	; 0x30
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b30      	cmp	r3, #48	; 0x30
 80011cc:	d017      	beq.n	80011fe <IRDA_SetConfig+0x17e>
 80011ce:	d81b      	bhi.n	8001208 <IRDA_SetConfig+0x188>
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d00a      	beq.n	80011ea <IRDA_SetConfig+0x16a>
 80011d4:	d818      	bhi.n	8001208 <IRDA_SetConfig+0x188>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <IRDA_SetConfig+0x160>
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d00a      	beq.n	80011f4 <IRDA_SetConfig+0x174>
 80011de:	e013      	b.n	8001208 <IRDA_SetConfig+0x188>
 80011e0:	2313      	movs	r3, #19
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e017      	b.n	800121a <IRDA_SetConfig+0x19a>
 80011ea:	2313      	movs	r3, #19
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e012      	b.n	800121a <IRDA_SetConfig+0x19a>
 80011f4:	2313      	movs	r3, #19
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	2204      	movs	r2, #4
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e00d      	b.n	800121a <IRDA_SetConfig+0x19a>
 80011fe:	2313      	movs	r3, #19
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	2210      	movs	r2, #16
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e008      	b.n	800121a <IRDA_SetConfig+0x19a>
 8001208:	2313      	movs	r3, #19
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2220      	movs	r2, #32
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e003      	b.n	800121a <IRDA_SetConfig+0x19a>
 8001212:	2313      	movs	r3, #19
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	2220      	movs	r2, #32
 8001218:	701a      	strb	r2, [r3, #0]
  tmpreg =   0U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  switch (clocksource)
 800121e:	2313      	movs	r3, #19
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b10      	cmp	r3, #16
 8001226:	d05c      	beq.n	80012e2 <IRDA_SetConfig+0x262>
 8001228:	dd00      	ble.n	800122c <IRDA_SetConfig+0x1ac>
 800122a:	e075      	b.n	8001318 <IRDA_SetConfig+0x298>
 800122c:	2b04      	cmp	r3, #4
 800122e:	d03b      	beq.n	80012a8 <IRDA_SetConfig+0x228>
 8001230:	dc72      	bgt.n	8001318 <IRDA_SetConfig+0x298>
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <IRDA_SetConfig+0x1bc>
 8001236:	2b02      	cmp	r3, #2
 8001238:	d01d      	beq.n	8001276 <IRDA_SetConfig+0x1f6>
 800123a:	e06d      	b.n	8001318 <IRDA_SetConfig+0x298>
  {
    case IRDA_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800123c:	f000 fe6e 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8001240:	0003      	movs	r3, r0
 8001242:	60fb      	str	r3, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <IRDA_SetConfig+0x2e8>)
 800124a:	0052      	lsls	r2, r2, #1
 800124c:	5ad3      	ldrh	r3, [r2, r3]
 800124e:	0019      	movs	r1, r3
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7fe ff57 	bl	8000104 <__udivsi3>
 8001256:	0003      	movs	r3, r0
 8001258:	001a      	movs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	085b      	lsrs	r3, r3, #1
 8001260:	18d2      	adds	r2, r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	0019      	movs	r1, r3
 8001268:	0010      	movs	r0, r2
 800126a:	f7fe ff4b 	bl	8000104 <__udivsi3>
 800126e:	0003      	movs	r3, r0
 8001270:	b29b      	uxth	r3, r3
 8001272:	617b      	str	r3, [r7, #20]
      break;
 8001274:	e055      	b.n	8001322 <IRDA_SetConfig+0x2a2>
    case IRDA_CLOCKSOURCE_HSI:
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(HSI_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <IRDA_SetConfig+0x2e8>)
 800127c:	0052      	lsls	r2, r2, #1
 800127e:	5ad3      	ldrh	r3, [r2, r3]
 8001280:	0019      	movs	r1, r3
 8001282:	483a      	ldr	r0, [pc, #232]	; (800136c <IRDA_SetConfig+0x2ec>)
 8001284:	f7fe ff3e 	bl	8000104 <__udivsi3>
 8001288:	0003      	movs	r3, r0
 800128a:	001a      	movs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	18d2      	adds	r2, r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	0019      	movs	r1, r3
 800129a:	0010      	movs	r0, r2
 800129c:	f7fe ff32 	bl	8000104 <__udivsi3>
 80012a0:	0003      	movs	r3, r0
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	617b      	str	r3, [r7, #20]
      break;
 80012a6:	e03c      	b.n	8001322 <IRDA_SetConfig+0x2a2>
    case IRDA_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80012a8:	f000 fdac 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 80012ac:	0003      	movs	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699a      	ldr	r2, [r3, #24]
 80012b4:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <IRDA_SetConfig+0x2e8>)
 80012b6:	0052      	lsls	r2, r2, #1
 80012b8:	5ad3      	ldrh	r3, [r2, r3]
 80012ba:	0019      	movs	r1, r3
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7fe ff21 	bl	8000104 <__udivsi3>
 80012c2:	0003      	movs	r3, r0
 80012c4:	001a      	movs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	18d2      	adds	r2, r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	0019      	movs	r1, r3
 80012d4:	0010      	movs	r0, r2
 80012d6:	f7fe ff15 	bl	8000104 <__udivsi3>
 80012da:	0003      	movs	r3, r0
 80012dc:	b29b      	uxth	r3, r3
 80012de:	617b      	str	r3, [r7, #20]
      break;
 80012e0:	e01f      	b.n	8001322 <IRDA_SetConfig+0x2a2>
    case IRDA_CLOCKSOURCE_LSE:
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16((uint32_t)LSE_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <IRDA_SetConfig+0x2e8>)
 80012e8:	0052      	lsls	r2, r2, #1
 80012ea:	5ad3      	ldrh	r3, [r2, r3]
 80012ec:	0019      	movs	r1, r3
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	0218      	lsls	r0, r3, #8
 80012f2:	f7fe ff07 	bl	8000104 <__udivsi3>
 80012f6:	0003      	movs	r3, r0
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	001a      	movs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	18d2      	adds	r2, r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f7fe fefa 	bl	8000104 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	b29b      	uxth	r3, r3
 8001314:	617b      	str	r3, [r7, #20]
      break;
 8001316:	e004      	b.n	8001322 <IRDA_SetConfig+0x2a2>
    default:
      ret = HAL_ERROR;
 8001318:	2312      	movs	r3, #18
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
      break;
 8001320:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 */
  if ((tmpreg >= USART_BRR_MIN) && (tmpreg <= USART_BRR_MAX))
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d909      	bls.n	800133c <IRDA_SetConfig+0x2bc>
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	025b      	lsls	r3, r3, #9
 800132e:	429a      	cmp	r2, r3
 8001330:	d204      	bcs.n	800133c <IRDA_SetConfig+0x2bc>
  {
    hirda->Instance->BRR = tmpreg;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	e003      	b.n	8001344 <IRDA_SetConfig+0x2c4>
  }
  else
  {
    ret = HAL_ERROR;
 800133c:	2312      	movs	r3, #18
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001344:	2312      	movs	r3, #18
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	781b      	ldrb	r3, [r3, #0]
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b006      	add	sp, #24
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	efffe9f3 	.word	0xefffe9f3
 8001358:	40013800 	.word	0x40013800
 800135c:	40021000 	.word	0x40021000
 8001360:	40004400 	.word	0x40004400
 8001364:	40004800 	.word	0x40004800
 8001368:	08002ac4 	.word	0x08002ac4
 800136c:	00f42400 	.word	0x00f42400

08001370 <IRDA_CheckIdleState>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_CheckIdleState(IRDA_HandleTypeDef *hirda)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the IRDA ErrorCode */
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800137e:	f7ff fba9 	bl	8000ad4 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2208      	movs	r2, #8
 800138e:	4013      	ands	r3, r2
 8001390:	2b08      	cmp	r3, #8
 8001392:	d10e      	bne.n	80013b2 <IRDA_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_TEACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	0399      	lsls	r1, r3, #14
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	23fa      	movs	r3, #250	; 0xfa
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	0013      	movs	r3, r2
 80013a4:	2200      	movs	r2, #0
 80013a6:	f000 f829 	bl	80013fc <IRDA_WaitOnFlagUntilTimeout>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d001      	beq.n	80013b2 <IRDA_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e020      	b.n	80013f4 <IRDA_CheckIdleState+0x84>
    }
  }
  /* Check if the Receiver is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2204      	movs	r2, #4
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d10e      	bne.n	80013de <IRDA_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_REACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	03d9      	lsls	r1, r3, #15
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	23fa      	movs	r3, #250	; 0xfa
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	0013      	movs	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	f000 f813 	bl	80013fc <IRDA_WaitOnFlagUntilTimeout>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d001      	beq.n	80013de <IRDA_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e00a      	b.n	80013f4 <IRDA_CheckIdleState+0x84>
    }
  }

  /* Initialize the IRDA state*/
  hirda->gState  = HAL_IRDA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2220      	movs	r2, #32
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hirda->RxState = HAL_IRDA_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2220      	movs	r2, #32
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Process Unlocked */
  __HAL_UNLOCK(hirda);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2238      	movs	r2, #56	; 0x38
 80013ee:	2100      	movs	r1, #0
 80013f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b004      	add	sp, #16
 80013fa:	bd80      	pop	{r7, pc}

080013fc <IRDA_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 800140c:	e029      	b.n	8001462 <IRDA_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	3301      	adds	r3, #1
 8001412:	d026      	beq.n	8001462 <IRDA_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001414:	f7ff fb5e 	bl	8000ad4 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	429a      	cmp	r2, r3
 8001422:	d302      	bcc.n	800142a <IRDA_WaitOnFlagUntilTimeout+0x2e>
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11b      	bne.n	8001462 <IRDA_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4915      	ldr	r1, [pc, #84]	; (800148c <IRDA_WaitOnFlagUntilTimeout+0x90>)
 8001436:	400a      	ands	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	438a      	bics	r2, r1
 8001448:	609a      	str	r2, [r3, #8]

        hirda->gState  = HAL_IRDA_STATE_READY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2220      	movs	r2, #32
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
        hirda->RxState = HAL_IRDA_STATE_READY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2220      	movs	r2, #32
 8001454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hirda);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2238      	movs	r2, #56	; 0x38
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e00f      	b.n	8001482 <IRDA_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	4013      	ands	r3, r2
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	425a      	negs	r2, r3
 8001472:	4153      	adcs	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	001a      	movs	r2, r3
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d0c6      	beq.n	800140e <IRDA_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b004      	add	sp, #16
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	fffffe5f 	.word	0xfffffe5f

08001490 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800149e:	4013      	ands	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d11f      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	0013      	movs	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	189b      	adds	r3, r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4912      	ldr	r1, [pc, #72]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7fe fe1e 	bl	8000104 <__udivsi3>
 80014c8:	0003      	movs	r3, r0
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ce:	e008      	b.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3b01      	subs	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e001      	b.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e009      	b.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	401a      	ands	r2, r3
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d0ed      	beq.n	80014d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40007000 	.word	0x40007000
 8001504:	fffff9ff 	.word	0xfffff9ff
 8001508:	20000000 	.word	0x20000000
 800150c:	000f4240 	.word	0x000f4240

08001510 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	23e0      	movs	r3, #224	; 0xe0
 800151a:	01db      	lsls	r3, r3, #7
 800151c:	4013      	ands	r3, r2
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	f000 fb56 	bl	8001be8 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	4013      	ands	r3, r2
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x20>
 8001546:	e07d      	b.n	8001644 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001548:	4bc3      	ldr	r3, [pc, #780]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2238      	movs	r2, #56	; 0x38
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001552:	4bc1      	ldr	r3, [pc, #772]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2203      	movs	r2, #3
 8001558:	4013      	ands	r3, r2
 800155a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d102      	bne.n	8001568 <HAL_RCC_OscConfig+0x40>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d002      	beq.n	800156e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	4bba      	ldr	r3, [pc, #744]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	029b      	lsls	r3, r3, #10
 8001576:	4013      	ands	r3, r2
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x11a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d15f      	bne.n	8001642 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	f000 fb30 	bl	8001be8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	429a      	cmp	r2, r3
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x7c>
 8001594:	4bb0      	ldr	r3, [pc, #704]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4baf      	ldr	r3, [pc, #700]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	0249      	lsls	r1, r1, #9
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e020      	b.n	80015e6 <HAL_RCC_OscConfig+0xbe>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	23a0      	movs	r3, #160	; 0xa0
 80015aa:	02db      	lsls	r3, r3, #11
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d10e      	bne.n	80015ce <HAL_RCC_OscConfig+0xa6>
 80015b0:	4ba9      	ldr	r3, [pc, #676]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4ba8      	ldr	r3, [pc, #672]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	02c9      	lsls	r1, r1, #11
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	4ba6      	ldr	r3, [pc, #664]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4ba5      	ldr	r3, [pc, #660]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0249      	lsls	r1, r1, #9
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0xbe>
 80015ce:	4ba2      	ldr	r3, [pc, #648]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4ba1      	ldr	r3, [pc, #644]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015d4:	49a1      	ldr	r1, [pc, #644]	; (800185c <HAL_RCC_OscConfig+0x334>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	4b9f      	ldr	r3, [pc, #636]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80015e0:	499f      	ldr	r1, [pc, #636]	; (8001860 <HAL_RCC_OscConfig+0x338>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d014      	beq.n	8001618 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fa71 	bl	8000ad4 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fa6c 	bl	8000ad4 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e2ee      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160a:	4b93      	ldr	r3, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	029b      	lsls	r3, r3, #10
 8001612:	4013      	ands	r3, r2
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xd0>
 8001616:	e015      	b.n	8001644 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fa5c 	bl	8000ad4 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001622:	f7ff fa57 	bl	8000ad4 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e2d9      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001634:	4b88      	ldr	r3, [pc, #544]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0xfa>
 8001640:	e000      	b.n	8001644 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2202      	movs	r2, #2
 800164a:	4013      	ands	r3, r2
 800164c:	d100      	bne.n	8001650 <HAL_RCC_OscConfig+0x128>
 800164e:	e099      	b.n	8001784 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001650:	4b81      	ldr	r3, [pc, #516]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2238      	movs	r2, #56	; 0x38
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2203      	movs	r2, #3
 8001660:	4013      	ands	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d102      	bne.n	8001670 <HAL_RCC_OscConfig+0x148>
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d002      	beq.n	8001676 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d135      	bne.n	80016e2 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001676:	4b78      	ldr	r3, [pc, #480]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4013      	ands	r3, r2
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x166>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e2ac      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b72      	ldr	r3, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a74      	ldr	r2, [pc, #464]	; (8001864 <HAL_RCC_OscConfig+0x33c>)
 8001694:	4013      	ands	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	021a      	lsls	r2, r3, #8
 800169e:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d112      	bne.n	80016d0 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016aa:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6e      	ldr	r2, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x340>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016be:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0adb      	lsrs	r3, r3, #11
 80016c4:	2207      	movs	r2, #7
 80016c6:	4013      	ands	r3, r2
 80016c8:	4a68      	ldr	r2, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x344>)
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <HAL_RCC_OscConfig+0x348>)
 80016ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x34c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff f9a1 	bl	8000a1c <HAL_InitTick>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d051      	beq.n	8001782 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e282      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d030      	beq.n	800174c <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016ea:	4b5b      	ldr	r3, [pc, #364]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5e      	ldr	r2, [pc, #376]	; (8001868 <HAL_RCC_OscConfig+0x340>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b56      	ldr	r3, [pc, #344]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0049      	lsls	r1, r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff f9e2 	bl	8000ad4 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff f9dd 	bl	8000ad4 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e25f      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001728:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4013      	ands	r3, r2
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_RCC_OscConfig+0x33c>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	021a      	lsls	r2, r3, #8
 8001744:	4b44      	ldr	r3, [pc, #272]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	e01b      	b.n	8001784 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800174c:	4b42      	ldr	r3, [pc, #264]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b41      	ldr	r3, [pc, #260]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001752:	4949      	ldr	r1, [pc, #292]	; (8001878 <HAL_RCC_OscConfig+0x350>)
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff f9bc 	bl	8000ad4 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff f9b7 	bl	8000ad4 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e239      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4013      	ands	r3, r2
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x23a>
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001782:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2208      	movs	r2, #8
 800178a:	4013      	ands	r3, r2
 800178c:	d047      	beq.n	800181e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800178e:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2238      	movs	r2, #56	; 0x38
 8001794:	4013      	ands	r3, r2
 8001796:	2b18      	cmp	r3, #24
 8001798:	d10a      	bne.n	80017b0 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d03c      	beq.n	800181e <HAL_RCC_OscConfig+0x2f6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d138      	bne.n	800181e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e21b      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80017ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80017be:	2101      	movs	r1, #1
 80017c0:	430a      	orrs	r2, r1
 80017c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff f986 	bl	8000ad4 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff f981 	bl	8000ad4 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e203      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d0f1      	beq.n	80017ce <HAL_RCC_OscConfig+0x2a6>
 80017ea:	e018      	b.n	800181e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80017ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	438a      	bics	r2, r1
 80017f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f96c 	bl	8000ad4 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff f967 	bl	8000ad4 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1e9      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d1f1      	bne.n	8001802 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2204      	movs	r2, #4
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x302>
 8001828:	e0c6      	b.n	80019b8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	231f      	movs	r3, #31
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2238      	movs	r2, #56	; 0x38
 8001838:	4013      	ands	r3, r2
 800183a:	2b20      	cmp	r3, #32
 800183c:	d11e      	bne.n	800187c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x330>)
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d100      	bne.n	800184a <HAL_RCC_OscConfig+0x322>
 8001848:	e0b6      	b.n	80019b8 <HAL_RCC_OscConfig+0x490>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d000      	beq.n	8001854 <HAL_RCC_OscConfig+0x32c>
 8001852:	e0b1      	b.n	80019b8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e1c7      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
 8001858:	40021000 	.word	0x40021000
 800185c:	fffeffff 	.word	0xfffeffff
 8001860:	fffbffff 	.word	0xfffbffff
 8001864:	ffff80ff 	.word	0xffff80ff
 8001868:	ffffc7ff 	.word	0xffffc7ff
 800186c:	00f42400 	.word	0x00f42400
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004
 8001878:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800187c:	4bb8      	ldr	r3, [pc, #736]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 800187e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	055b      	lsls	r3, r3, #21
 8001884:	4013      	ands	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_RCC_OscConfig+0x364>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x366>
 800188c:	2300      	movs	r3, #0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d011      	beq.n	80018b6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4bb3      	ldr	r3, [pc, #716]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001896:	4bb2      	ldr	r3, [pc, #712]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0549      	lsls	r1, r1, #21
 800189c:	430a      	orrs	r2, r1
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a0:	4baf      	ldr	r3, [pc, #700]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 80018a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	055b      	lsls	r3, r3, #21
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018ae:	231f      	movs	r3, #31
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	4bab      	ldr	r3, [pc, #684]	; (8001b64 <HAL_RCC_OscConfig+0x63c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4013      	ands	r3, r2
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c2:	4ba8      	ldr	r3, [pc, #672]	; (8001b64 <HAL_RCC_OscConfig+0x63c>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4ba7      	ldr	r3, [pc, #668]	; (8001b64 <HAL_RCC_OscConfig+0x63c>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0049      	lsls	r1, r1, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f900 	bl	8000ad4 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff f8fb 	bl	8000ad4 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e17d      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ec:	4b9d      	ldr	r3, [pc, #628]	; (8001b64 <HAL_RCC_OscConfig+0x63c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x3e6>
 8001900:	4b97      	ldr	r3, [pc, #604]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001904:	4b96      	ldr	r3, [pc, #600]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001906:	2101      	movs	r1, #1
 8001908:	430a      	orrs	r2, r1
 800190a:	65da      	str	r2, [r3, #92]	; 0x5c
 800190c:	e01c      	b.n	8001948 <HAL_RCC_OscConfig+0x420>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x408>
 8001916:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800191a:	4b91      	ldr	r3, [pc, #580]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 800191c:	2104      	movs	r1, #4
 800191e:	430a      	orrs	r2, r1
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
 8001922:	4b8f      	ldr	r3, [pc, #572]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001924:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001926:	4b8e      	ldr	r3, [pc, #568]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	65da      	str	r2, [r3, #92]	; 0x5c
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x420>
 8001930:	4b8b      	ldr	r3, [pc, #556]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001934:	4b8a      	ldr	r3, [pc, #552]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c
 800193c:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 800193e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001940:	4b87      	ldr	r3, [pc, #540]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001942:	2104      	movs	r1, #4
 8001944:	438a      	bics	r2, r1
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d014      	beq.n	800197a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f8c0 	bl	8000ad4 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001958:	e009      	b.n	800196e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff f8bb 	bl	8000ad4 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <HAL_RCC_OscConfig+0x640>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e13c      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	4b7c      	ldr	r3, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2202      	movs	r2, #2
 8001974:	4013      	ands	r3, r2
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x432>
 8001978:	e013      	b.n	80019a2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff f8ab 	bl	8000ad4 <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001982:	e009      	b.n	8001998 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff f8a6 	bl	8000ad4 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	4a76      	ldr	r2, [pc, #472]	; (8001b68 <HAL_RCC_OscConfig+0x640>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e127      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001998:	4b71      	ldr	r3, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 800199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019a2:	231f      	movs	r3, #31
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 80019ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b0:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 80019b2:	496e      	ldr	r1, [pc, #440]	; (8001b6c <HAL_RCC_OscConfig+0x644>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2220      	movs	r2, #32
 80019be:	4013      	ands	r3, r2
 80019c0:	d039      	beq.n	8001a36 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d01b      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b64      	ldr	r3, [pc, #400]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	03c9      	lsls	r1, r1, #15
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff f87c 	bl	8000ad4 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e2:	f7ff f877 	bl	8000ad4 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0f9      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019f4:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	4013      	ands	r3, r2
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4ba>
 8001a00:	e019      	b.n	8001a36 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a08:	4959      	ldr	r1, [pc, #356]	; (8001b70 <HAL_RCC_OscConfig+0x648>)
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff f861 	bl	8000ad4 <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a18:	f7ff f85c 	bl	8000ad4 <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0de      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	4013      	ands	r3, r2
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d100      	bne.n	8001a40 <HAL_RCC_OscConfig+0x518>
 8001a3e:	e0d2      	b.n	8001be6 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a40:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2238      	movs	r2, #56	; 0x38
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d100      	bne.n	8001a4e <HAL_RCC_OscConfig+0x526>
 8001a4c:	e081      	b.n	8001b52 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d156      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a5c:	4945      	ldr	r1, [pc, #276]	; (8001b74 <HAL_RCC_OscConfig+0x64c>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f837 	bl	8000ad4 <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f832 	bl	8000ad4 <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0b4      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	049b      	lsls	r3, r3, #18
 8001a86:	4013      	ands	r3, r2
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8a:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	4a3a      	ldr	r2, [pc, #232]	; (8001b78 <HAL_RCC_OscConfig+0x650>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	0449      	lsls	r1, r1, #17
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001acc:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	0549      	lsls	r1, r1, #21
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7fe fffb 	bl	8000ad4 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fff6 	bl	8000ad4 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e078      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	049b      	lsls	r3, r3, #18
 8001afe:	4013      	ands	r3, r2
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x5bc>
 8001b02:	e070      	b.n	8001be6 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001b0a:	491a      	ldr	r1, [pc, #104]	; (8001b74 <HAL_RCC_OscConfig+0x64c>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001b16:	2103      	movs	r1, #3
 8001b18:	438a      	bics	r2, r1
 8001b1a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001b22:	4916      	ldr	r1, [pc, #88]	; (8001b7c <HAL_RCC_OscConfig+0x654>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7fe ffd4 	bl	8000ad4 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe ffcf 	bl	8000ad4 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e051      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_OscConfig+0x638>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	049b      	lsls	r3, r3, #18
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x60a>
 8001b50:	e049      	b.n	8001be6 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d112      	bne.n	8001b80 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e044      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40007000 	.word	0x40007000
 8001b68:	00001388 	.word	0x00001388
 8001b6c:	efffffff 	.word	0xefffffff
 8001b70:	ffbfffff 	.word	0xffbfffff
 8001b74:	feffffff 	.word	0xfeffffff
 8001b78:	11c1808c 	.word	0x11c1808c
 8001b7c:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x6c8>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d126      	bne.n	8001be2 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2270      	movs	r2, #112	; 0x70
 8001b98:	401a      	ands	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11f      	bne.n	8001be2 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	23fe      	movs	r3, #254	; 0xfe
 8001ba6:	01db      	lsls	r3, r3, #7
 8001ba8:	401a      	ands	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d116      	bne.n	8001be2 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	23f8      	movs	r3, #248	; 0xf8
 8001bb8:	039b      	lsls	r3, r3, #14
 8001bba:	401a      	ands	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d10e      	bne.n	8001be2 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	23e0      	movs	r3, #224	; 0xe0
 8001bc8:	051b      	lsls	r3, r3, #20
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	0f5b      	lsrs	r3, r3, #29
 8001bd8:	075a      	lsls	r2, r3, #29
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b008      	add	sp, #32
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0e9      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b76      	ldr	r3, [pc, #472]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	4013      	ands	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d91e      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c28:	f7fe ff54 	bl	8000ad4 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c32:	f7fe ff4f 	bl	8000ad4 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	4a6a      	ldr	r2, [pc, #424]	; (8001de8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0ca      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c46:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d015      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2204      	movs	r2, #4
 8001c64:	4013      	ands	r3, r2
 8001c66:	d006      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c68:	4b60      	ldr	r3, [pc, #384]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001c6e:	21e0      	movs	r1, #224	; 0xe0
 8001c70:	01c9      	lsls	r1, r1, #7
 8001c72:	430a      	orrs	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4a5d      	ldr	r2, [pc, #372]	; (8001df0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	0019      	movs	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d057      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d12b      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e097      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	049b      	lsls	r3, r3, #18
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d11f      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e08b      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ccc:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d113      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e07f      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e074      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e06d      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2207      	movs	r2, #7
 8001d06:	4393      	bics	r3, r2
 8001d08:	0019      	movs	r1, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d14:	f7fe fede 	bl	8000ad4 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1e:	f7fe fed9 	bl	8000ad4 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e054      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2238      	movs	r2, #56	; 0x38
 8001d38:	401a      	ands	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1ec      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2207      	movs	r2, #7
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d21e      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2207      	movs	r2, #7
 8001d58:	4393      	bics	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d64:	f7fe feb6 	bl	8000ad4 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6e:	f7fe feb1 	bl	8000ad4 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_RCC_ClockConfig+0x1f4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e02c      	b.n	8001ddc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2207      	movs	r2, #7
 8001d88:	4013      	ands	r3, r2
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2204      	movs	r2, #4
 8001d96:	4013      	ands	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <HAL_RCC_ClockConfig+0x200>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dae:	f000 f829 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001db2:	0001      	movs	r1, r0
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_ClockConfig+0x1f8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	220f      	movs	r2, #15
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCC_ClockConfig+0x204>)
 8001dc0:	0092      	lsls	r2, r2, #2
 8001dc2:	58d3      	ldr	r3, [r2, r3]
 8001dc4:	221f      	movs	r2, #31
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	000a      	movs	r2, r1
 8001dca:	40da      	lsrs	r2, r3
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_ClockConfig+0x208>)
 8001dce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_ClockConfig+0x20c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7fe fe21 	bl	8000a1c <HAL_InitTick>
 8001dda:	0003      	movs	r3, r0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b004      	add	sp, #16
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40022000 	.word	0x40022000
 8001de8:	00001388 	.word	0x00001388
 8001dec:	40021000 	.word	0x40021000
 8001df0:	fffff0ff 	.word	0xfffff0ff
 8001df4:	ffff8fff 	.word	0xffff8fff
 8001df8:	08002a64 	.word	0x08002a64
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2238      	movs	r2, #56	; 0x38
 8001e10:	4013      	ands	r3, r2
 8001e12:	d10f      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0adb      	lsrs	r3, r3, #11
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2201      	movs	r2, #1
 8001e20:	409a      	lsls	r2, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	4835      	ldr	r0, [pc, #212]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e2a:	f7fe f96b 	bl	8000104 <__udivsi3>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	e05d      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2238      	movs	r2, #56	; 0x38
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d102      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e054      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2238      	movs	r2, #56	; 0x38
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d138      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2203      	movs	r2, #3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	2207      	movs	r2, #7
 8001e64:	4013      	ands	r3, r2
 8001e66:	3301      	adds	r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d10d      	bne.n	8001e8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	4824      	ldr	r0, [pc, #144]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e74:	f7fe f946 	bl	8000104 <__udivsi3>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	227f      	movs	r2, #127	; 0x7f
 8001e84:	4013      	ands	r3, r2
 8001e86:	434b      	muls	r3, r1
 8001e88:	617b      	str	r3, [r7, #20]
        break;
 8001e8a:	e00d      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	481c      	ldr	r0, [pc, #112]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e90:	f7fe f938 	bl	8000104 <__udivsi3>
 8001e94:	0003      	movs	r3, r0
 8001e96:	0019      	movs	r1, r3
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	227f      	movs	r2, #127	; 0x7f
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	434b      	muls	r3, r1
 8001ea4:	617b      	str	r3, [r7, #20]
        break;
 8001ea6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0f5b      	lsrs	r3, r3, #29
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7fe f923 	bl	8000104 <__udivsi3>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	e015      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2238      	movs	r2, #56	; 0x38
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d103      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2238      	movs	r2, #56	; 0x38
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b18      	cmp	r3, #24
 8001ee2:	d103      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ee4:	23fa      	movs	r3, #250	; 0xfa
 8001ee6:	01db      	lsls	r3, r3, #7
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e001      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ef0:	693b      	ldr	r3, [r7, #16]
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b006      	add	sp, #24
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200

08001f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f20:	f7ff fff2 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f24:	0004      	movs	r4, r0
 8001f26:	f7ff faf3 	bl	8001510 <LL_RCC_GetAPB1Prescaler>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	0b1a      	lsrs	r2, r3, #12
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	58d3      	ldr	r3, [r2, r3]
 8001f34:	221f      	movs	r2, #31
 8001f36:	4013      	ands	r3, r2
 8001f38:	40dc      	lsrs	r4, r3
 8001f3a:	0023      	movs	r3, r4
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	08002aa4 	.word	0x08002aa4

08001f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f50:	2313      	movs	r3, #19
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f58:	2312      	movs	r3, #18
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d100      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f6c:	e0ad      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2011      	movs	r0, #17
 8001f70:	183b      	adds	r3, r7, r0
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	055b      	lsls	r3, r3, #21
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d110      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b44      	ldr	r3, [pc, #272]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f86:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	0549      	lsls	r1, r1, #21
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f90:	4b40      	ldr	r3, [pc, #256]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	055b      	lsls	r3, r3, #21
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	183b      	adds	r3, r7, r0
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa4:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	0049      	lsls	r1, r1, #1
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fd8f 	bl	8000ad4 <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbc:	f7fe fd8a 	bl	8000ad4 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d904      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fca:	2313      	movs	r3, #19
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2203      	movs	r2, #3
 8001fd0:	701a      	strb	r2, [r3, #0]
        break;
 8001fd2:	e005      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0ed      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fe0:	2313      	movs	r3, #19
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d15e      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d019      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	429a      	cmp	r2, r3
 8002004:	d014      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	4a24      	ldr	r2, [pc, #144]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800200c:	4013      	ands	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0249      	lsls	r1, r1, #9
 800201a:	430a      	orrs	r2, r1
 800201c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002020:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002024:	491e      	ldr	r1, [pc, #120]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002026:	400a      	ands	r2, r1
 8002028:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d016      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe fd4c 	bl	8000ad4 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002040:	e00c      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fd47 	bl	8000ad4 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d904      	bls.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002052:	2313      	movs	r3, #19
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2203      	movs	r2, #3
 8002058:	701a      	strb	r2, [r3, #0]
            break;
 800205a:	e004      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	2202      	movs	r2, #2
 8002062:	4013      	ands	r3, r2
 8002064:	d0ed      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002066:	2313      	movs	r3, #19
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10a      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002080:	430a      	orrs	r2, r1
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c
 8002084:	e016      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002086:	2312      	movs	r3, #18
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2213      	movs	r2, #19
 800208c:	18ba      	adds	r2, r7, r2
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e00f      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
 800209c:	fffffcff 	.word	0xfffffcff
 80020a0:	fffeffff 	.word	0xfffeffff
 80020a4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a8:	2312      	movs	r3, #18
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2213      	movs	r2, #19
 80020ae:	18ba      	adds	r2, r7, r2
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b4:	2311      	movs	r3, #17
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4bb6      	ldr	r3, [pc, #728]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c2:	4bb5      	ldr	r3, [pc, #724]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c4:	49b5      	ldr	r1, [pc, #724]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d4:	4bb0      	ldr	r3, [pc, #704]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	2203      	movs	r2, #3
 80020da:	4393      	bics	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4bad      	ldr	r3, [pc, #692]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2202      	movs	r2, #2
 80020ee:	4013      	ands	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f2:	4ba9      	ldr	r3, [pc, #676]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	220c      	movs	r2, #12
 80020f8:	4393      	bics	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4ba5      	ldr	r3, [pc, #660]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002102:	430a      	orrs	r2, r1
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002110:	4ba1      	ldr	r3, [pc, #644]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	2230      	movs	r2, #48	; 0x30
 8002116:	4393      	bics	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b9e      	ldr	r3, [pc, #632]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002120:	430a      	orrs	r2, r1
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2210      	movs	r2, #16
 800212a:	4013      	ands	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212e:	4b9a      	ldr	r3, [pc, #616]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	4a9b      	ldr	r2, [pc, #620]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	4b96      	ldr	r3, [pc, #600]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800213e:	430a      	orrs	r2, r1
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	015b      	lsls	r3, r3, #5
 800214a:	4013      	ands	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800214e:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	4a94      	ldr	r2, [pc, #592]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	4b8e      	ldr	r3, [pc, #568]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215e:	430a      	orrs	r2, r1
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4013      	ands	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216e:	4b8a      	ldr	r3, [pc, #552]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	4a8d      	ldr	r2, [pc, #564]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002174:	4013      	ands	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217c:	4b86      	ldr	r3, [pc, #536]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800217e:	430a      	orrs	r2, r1
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4013      	ands	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800218e:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	4a86      	ldr	r2, [pc, #536]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219c:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ac:	4b7a      	ldr	r3, [pc, #488]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	4a7f      	ldr	r2, [pc, #508]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	4b77      	ldr	r3, [pc, #476]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	4013      	ands	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ca:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	4a79      	ldr	r2, [pc, #484]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	01db      	lsls	r3, r3, #7
 80021e6:	4013      	ands	r3, r2
 80021e8:	d015      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021ea:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	0899      	lsrs	r1, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f6:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	05db      	lsls	r3, r3, #23
 8002204:	429a      	cmp	r2, r3
 8002206:	d106      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002208:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b62      	ldr	r3, [pc, #392]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	0249      	lsls	r1, r1, #9
 8002212:	430a      	orrs	r2, r1
 8002214:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	031b      	lsls	r3, r3, #12
 800221e:	4013      	ands	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	4393      	bics	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002232:	430a      	orrs	r2, r1
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	039b      	lsls	r3, r3, #14
 800223e:	4013      	ands	r3, r2
 8002240:	d016      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002242:	4b55      	ldr	r3, [pc, #340]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	4a5c      	ldr	r2, [pc, #368]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002252:	430a      	orrs	r2, r1
 8002254:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	03db      	lsls	r3, r3, #15
 800225e:	429a      	cmp	r2, r3
 8002260:	d106      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002262:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0449      	lsls	r1, r1, #17
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	03db      	lsls	r3, r3, #15
 8002278:	4013      	ands	r3, r2
 800227a:	d016      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	4a4e      	ldr	r2, [pc, #312]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002282:	4013      	ands	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800228c:	430a      	orrs	r2, r1
 800228e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	045b      	lsls	r3, r3, #17
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800229c:	4b3e      	ldr	r3, [pc, #248]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0449      	lsls	r1, r1, #17
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	4013      	ands	r3, r2
 80022b4:	d014      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	2203      	movs	r2, #3
 80022bc:	4393      	bics	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d106      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0249      	lsls	r1, r1, #9
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	019b      	lsls	r3, r3, #6
 80022e8:	4013      	ands	r3, r2
 80022ea:	d014      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	220c      	movs	r2, #12
 80022f2:	4393      	bics	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fa:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b04      	cmp	r3, #4
 8002306:	d106      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002308:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0249      	lsls	r1, r1, #9
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	045b      	lsls	r3, r3, #17
 800231e:	4013      	ands	r3, r2
 8002320:	d016      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002332:	430a      	orrs	r2, r1
 8002334:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	019b      	lsls	r3, r3, #6
 800233e:	429a      	cmp	r2, r3
 8002340:	d106      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0449      	lsls	r1, r1, #17
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	049b      	lsls	r3, r3, #18
 8002358:	4013      	ands	r3, r2
 800235a:	d016      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800236c:	430a      	orrs	r2, r1
 800236e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	0449      	lsls	r1, r1, #17
 8002386:	430a      	orrs	r2, r1
 8002388:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800238a:	2312      	movs	r3, #18
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	781b      	ldrb	r3, [r3, #0]
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b006      	add	sp, #24
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	efffffff 	.word	0xefffffff
 80023a0:	fffff3ff 	.word	0xfffff3ff
 80023a4:	fffffcff 	.word	0xfffffcff
 80023a8:	fff3ffff 	.word	0xfff3ffff
 80023ac:	ffcfffff 	.word	0xffcfffff
 80023b0:	ffffcfff 	.word	0xffffcfff
 80023b4:	ffff3fff 	.word	0xffff3fff
 80023b8:	ffbfffff 	.word	0xffbfffff
 80023bc:	feffffff 	.word	0xfeffffff

080023c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e04a      	b.n	8002468 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	223d      	movs	r2, #61	; 0x3d
 80023d6:	5c9b      	ldrb	r3, [r3, r2]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	223c      	movs	r2, #60	; 0x3c
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7fe fa19 	bl	8000820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	223d      	movs	r2, #61	; 0x3d
 80023f2:	2102      	movs	r1, #2
 80023f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	0019      	movs	r1, r3
 8002400:	0010      	movs	r0, r2
 8002402:	f000 f95b 	bl	80026bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2248      	movs	r2, #72	; 0x48
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	223e      	movs	r2, #62	; 0x3e
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	223f      	movs	r2, #63	; 0x3f
 800241a:	2101      	movs	r1, #1
 800241c:	5499      	strb	r1, [r3, r2]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2240      	movs	r2, #64	; 0x40
 8002422:	2101      	movs	r1, #1
 8002424:	5499      	strb	r1, [r3, r2]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2241      	movs	r2, #65	; 0x41
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2242      	movs	r2, #66	; 0x42
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2243      	movs	r2, #67	; 0x43
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2244      	movs	r2, #68	; 0x44
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2245      	movs	r2, #69	; 0x45
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2246      	movs	r2, #70	; 0x46
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2247      	movs	r2, #71	; 0x47
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	223d      	movs	r2, #61	; 0x3d
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	223d      	movs	r2, #61	; 0x3d
 800247c:	5c9b      	ldrb	r3, [r3, r2]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d001      	beq.n	8002488 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e03f      	b.n	8002508 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	223d      	movs	r2, #61	; 0x3d
 800248c:	2102      	movs	r1, #2
 800248e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <HAL_TIM_Base_Start+0xa0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d014      	beq.n	80024c4 <HAL_TIM_Base_Start+0x54>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	05db      	lsls	r3, r3, #23
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d00e      	beq.n	80024c4 <HAL_TIM_Base_Start+0x54>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <HAL_TIM_Base_Start+0xa4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_TIM_Base_Start+0x54>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_TIM_Base_Start+0xa8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_TIM_Base_Start+0x54>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_TIM_Base_Start+0xac>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d116      	bne.n	80024f2 <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <HAL_TIM_Base_Start+0xb0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d016      	beq.n	8002504 <HAL_TIM_Base_Start+0x94>
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	025b      	lsls	r3, r3, #9
 80024dc:	429a      	cmp	r2, r3
 80024de:	d011      	beq.n	8002504 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f0:	e008      	b.n	8002504 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e000      	b.n	8002506 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002504:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b004      	add	sp, #16
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800
 800251c:	40014000 	.word	0x40014000
 8002520:	00010007 	.word	0x00010007

08002524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223c      	movs	r2, #60	; 0x3c
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIM_ConfigClockSource+0x18>
 8002538:	2302      	movs	r3, #2
 800253a:	e0b7      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x188>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	223c      	movs	r2, #60	; 0x3c
 8002540:	2101      	movs	r1, #1
 8002542:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	223d      	movs	r2, #61	; 0x3d
 8002548:	2102      	movs	r1, #2
 800254a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_TIM_ConfigClockSource+0x190>)
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a56      	ldr	r2, [pc, #344]	; (80026b8 <HAL_TIM_ConfigClockSource+0x194>)
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	0192      	lsls	r2, r2, #6
 8002574:	4293      	cmp	r3, r2
 8002576:	d040      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0xd6>
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	0192      	lsls	r2, r2, #6
 800257c:	4293      	cmp	r3, r2
 800257e:	d900      	bls.n	8002582 <HAL_TIM_ConfigClockSource+0x5e>
 8002580:	e088      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	0152      	lsls	r2, r2, #5
 8002586:	4293      	cmp	r3, r2
 8002588:	d100      	bne.n	800258c <HAL_TIM_ConfigClockSource+0x68>
 800258a:	e085      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x174>
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	0152      	lsls	r2, r2, #5
 8002590:	4293      	cmp	r3, r2
 8002592:	d900      	bls.n	8002596 <HAL_TIM_ConfigClockSource+0x72>
 8002594:	e07e      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 8002596:	2b70      	cmp	r3, #112	; 0x70
 8002598:	d018      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0xa8>
 800259a:	d900      	bls.n	800259e <HAL_TIM_ConfigClockSource+0x7a>
 800259c:	e07a      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 800259e:	2b60      	cmp	r3, #96	; 0x60
 80025a0:	d04f      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0x11e>
 80025a2:	d900      	bls.n	80025a6 <HAL_TIM_ConfigClockSource+0x82>
 80025a4:	e076      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 80025a6:	2b50      	cmp	r3, #80	; 0x50
 80025a8:	d03b      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xfe>
 80025aa:	d900      	bls.n	80025ae <HAL_TIM_ConfigClockSource+0x8a>
 80025ac:	e072      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d057      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0x13e>
 80025b2:	d900      	bls.n	80025b6 <HAL_TIM_ConfigClockSource+0x92>
 80025b4:	e06e      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 80025b6:	2b30      	cmp	r3, #48	; 0x30
 80025b8:	d063      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15e>
 80025ba:	d86b      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d060      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15e>
 80025c0:	d868      	bhi.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d05d      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15e>
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d05b      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025ca:	e063      	b.n	8002694 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6899      	ldr	r1, [r3, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f000 f974 	bl	80028c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2277      	movs	r2, #119	; 0x77
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	609a      	str	r2, [r3, #8]
      break;
 80025f8:	e04f      	b.n	800269a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f000 f95d 	bl	80028c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	01c9      	lsls	r1, r1, #7
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
      break;
 8002620:	e03b      	b.n	800269a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	001a      	movs	r2, r3
 8002630:	f000 f8ce 	bl	80027d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2150      	movs	r1, #80	; 0x50
 800263a:	0018      	movs	r0, r3
 800263c:	f000 f928 	bl	8002890 <TIM_ITRx_SetConfig>
      break;
 8002640:	e02b      	b.n	800269a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	001a      	movs	r2, r3
 8002650:	f000 f8ec 	bl	800282c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2160      	movs	r1, #96	; 0x60
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f918 	bl	8002890 <TIM_ITRx_SetConfig>
      break;
 8002660:	e01b      	b.n	800269a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	001a      	movs	r2, r3
 8002670:	f000 f8ae 	bl	80027d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2140      	movs	r1, #64	; 0x40
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f908 	bl	8002890 <TIM_ITRx_SetConfig>
      break;
 8002680:	e00b      	b.n	800269a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0019      	movs	r1, r3
 800268c:	0010      	movs	r0, r2
 800268e:	f000 f8ff 	bl	8002890 <TIM_ITRx_SetConfig>
        break;
 8002692:	e002      	b.n	800269a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	e000      	b.n	800269a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002698:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223d      	movs	r2, #61	; 0x3d
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	223c      	movs	r2, #60	; 0x3c
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	ffceff88 	.word	0xffceff88
 80026b8:	ffff00ff 	.word	0xffff00ff

080026bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a38      	ldr	r2, [pc, #224]	; (80027b0 <TIM_Base_SetConfig+0xf4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00c      	beq.n	80026ee <TIM_Base_SetConfig+0x32>
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	05db      	lsls	r3, r3, #23
 80026da:	429a      	cmp	r2, r3
 80026dc:	d007      	beq.n	80026ee <TIM_Base_SetConfig+0x32>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <TIM_Base_SetConfig+0xf8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_Base_SetConfig+0x32>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a33      	ldr	r2, [pc, #204]	; (80027b8 <TIM_Base_SetConfig+0xfc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d108      	bne.n	8002700 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2270      	movs	r2, #112	; 0x70
 80026f2:	4393      	bics	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <TIM_Base_SetConfig+0xf4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d01c      	beq.n	8002742 <TIM_Base_SetConfig+0x86>
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	05db      	lsls	r3, r3, #23
 800270e:	429a      	cmp	r2, r3
 8002710:	d017      	beq.n	8002742 <TIM_Base_SetConfig+0x86>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <TIM_Base_SetConfig+0xf8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <TIM_Base_SetConfig+0x86>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <TIM_Base_SetConfig+0xfc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00f      	beq.n	8002742 <TIM_Base_SetConfig+0x86>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a25      	ldr	r2, [pc, #148]	; (80027bc <TIM_Base_SetConfig+0x100>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00b      	beq.n	8002742 <TIM_Base_SetConfig+0x86>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <TIM_Base_SetConfig+0x104>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <TIM_Base_SetConfig+0x86>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <TIM_Base_SetConfig+0x108>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d003      	beq.n	8002742 <TIM_Base_SetConfig+0x86>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <TIM_Base_SetConfig+0x10c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d108      	bne.n	8002754 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a21      	ldr	r2, [pc, #132]	; (80027cc <TIM_Base_SetConfig+0x110>)
 8002746:	4013      	ands	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	4393      	bics	r3, r2
 800275a:	001a      	movs	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <TIM_Base_SetConfig+0xf4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00b      	beq.n	800279a <TIM_Base_SetConfig+0xde>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <TIM_Base_SetConfig+0x104>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <TIM_Base_SetConfig+0xde>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <TIM_Base_SetConfig+0x108>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <TIM_Base_SetConfig+0xde>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <TIM_Base_SetConfig+0x10c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d103      	bne.n	80027a2 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	615a      	str	r2, [r3, #20]
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40002000 	.word	0x40002000
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800
 80027cc:	fffffcff 	.word	0xfffffcff

080027d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	2201      	movs	r2, #1
 80027e8:	4393      	bics	r3, r2
 80027ea:	001a      	movs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	22f0      	movs	r2, #240	; 0xf0
 80027fa:	4393      	bics	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	220a      	movs	r2, #10
 800280c:	4393      	bics	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	621a      	str	r2, [r3, #32]
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b006      	add	sp, #24
 800282a:	bd80      	pop	{r7, pc}

0800282c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	2210      	movs	r2, #16
 800283e:	4393      	bics	r3, r2
 8002840:	001a      	movs	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <TIM_TI2_ConfigInputStage+0x60>)
 8002856:	4013      	ands	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	031b      	lsls	r3, r3, #12
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	22a0      	movs	r2, #160	; 0xa0
 8002868:	4393      	bics	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b006      	add	sp, #24
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	ffff0fff 	.word	0xffff0fff

08002890 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <TIM_ITRx_SetConfig+0x34>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	2207      	movs	r2, #7
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	609a      	str	r2, [r3, #8]
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b004      	add	sp, #16
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	ffcfff8f 	.word	0xffcfff8f

080028c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <TIM_ETR_SetConfig+0x3c>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b006      	add	sp, #24
 8002902:	bd80      	pop	{r7, pc}
 8002904:	ffff00ff 	.word	0xffff00ff

08002908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	223c      	movs	r2, #60	; 0x3c
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e05a      	b.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	223c      	movs	r2, #60	; 0x3c
 8002924:	2101      	movs	r1, #1
 8002926:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	223d      	movs	r2, #61	; 0x3d
 800292c:	2102      	movs	r1, #2
 800292e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d108      	bne.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800294e:	4013      	ands	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2270      	movs	r2, #112	; 0x70
 8002960:	4393      	bics	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d014      	beq.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	05db      	lsls	r3, r3, #23
 8002988:	429a      	cmp	r2, r3
 800298a:	d00e      	beq.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10c      	bne.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	4393      	bics	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	223d      	movs	r2, #61	; 0x3d
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	223c      	movs	r2, #60	; 0x3c
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	ff0fffff 	.word	0xff0fffff
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800
 80029f0:	40014000 	.word	0x40014000

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2600      	movs	r6, #0
 80029f8:	4d0c      	ldr	r5, [pc, #48]	; (8002a2c <__libc_init_array+0x38>)
 80029fa:	4c0d      	ldr	r4, [pc, #52]	; (8002a30 <__libc_init_array+0x3c>)
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	42a6      	cmp	r6, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	2600      	movs	r6, #0
 8002a06:	f000 f821 	bl	8002a4c <_init>
 8002a0a:	4d0a      	ldr	r5, [pc, #40]	; (8002a34 <__libc_init_array+0x40>)
 8002a0c:	4c0a      	ldr	r4, [pc, #40]	; (8002a38 <__libc_init_array+0x44>)
 8002a0e:	1b64      	subs	r4, r4, r5
 8002a10:	10a4      	asrs	r4, r4, #2
 8002a12:	42a6      	cmp	r6, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	00b3      	lsls	r3, r6, #2
 8002a1a:	58eb      	ldr	r3, [r5, r3]
 8002a1c:	4798      	blx	r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	00b3      	lsls	r3, r6, #2
 8002a24:	58eb      	ldr	r3, [r5, r3]
 8002a26:	4798      	blx	r3
 8002a28:	3601      	adds	r6, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08002adc 	.word	0x08002adc
 8002a30:	08002adc 	.word	0x08002adc
 8002a34:	08002adc 	.word	0x08002adc
 8002a38:	08002ae0 	.word	0x08002ae0

08002a3c <memset>:
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	1882      	adds	r2, r0, r2
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d100      	bne.n	8002a46 <memset+0xa>
 8002a44:	4770      	bx	lr
 8002a46:	7019      	strb	r1, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	e7f9      	b.n	8002a40 <memset+0x4>

08002a4c <_init>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr

08002a58 <_fini>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr
